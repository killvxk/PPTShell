// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (de5828a5).
//
// e:\my project\ppttransition\debug\msppt.tlh
//
// C++ source equivalent of Win32 type library C:\\Program Files\\Microsoft Office\\Office12\\MSPPT.OLB
// compiler-generated file created 11/22/11 at 18:23:18 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
#include "mso.tlh"
#include "vbe6ext.tlh"
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>


namespace MSPpt {

//
// Forward references and typedefs
//

struct __declspec(uuid("91493440-5a91-11cf-8700-00aa0060263b"))
/* LIBID */ __PowerPoint;
enum PpWindowState;
enum PpArrangeStyle;
enum PpViewType;
enum PpColorSchemeIndex;
enum PpSlideSizeType;
enum PpSaveAsFileType;
enum PpTextStyleType;
enum PpSlideLayout;
enum PpEntryEffect;
enum PpTextLevelEffect;
enum PpTextUnitEffect;
enum PpChartUnitEffect;
enum PpAfterEffect;
enum PpAdvanceMode;
enum PpSoundEffectType;
enum PpFollowColors;
enum PpUpdateOption;
enum PpParagraphAlignment;
enum PpBaselineAlignment;
enum PpTabStopType;
enum PpIndentControl;
enum PpChangeCase;
enum PpSlideShowPointerType;
enum PpSlideShowState;
enum PpSlideShowAdvanceMode;
enum PpFileDialogType;
enum PpPrintOutputType;
enum PpPrintHandoutOrder;
enum PpPrintColorType;
enum PpSelectionType;
enum PpDirection;
enum PpDateTimeFormat;
enum PpTransitionSpeed;
enum PpMouseActivation;
enum PpActionType;
enum PpPlaceholderType;
enum PpSlideShowType;
enum PpPrintRangeType;
enum PpAutoSize;
enum PpMediaType;
enum PpSoundFormatType;
enum PpFarEastLineBreakLevel;
enum PpSlideShowRangeType;
enum PpFrameColors;
struct __declspec(uuid("91493450-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Collection;
struct __declspec(uuid("91493442-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Application;
struct __declspec(uuid("91493451-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Global;
struct /* coclass */ Application;
struct /* coclass */ Global;
struct __declspec(uuid("91493452-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ColorFormat;
struct __declspec(uuid("91493453-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowWindow;
struct __declspec(uuid("91493454-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Selection;
struct __declspec(uuid("91493455-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DocumentWindows;
struct __declspec(uuid("91493456-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowWindows;
struct __declspec(uuid("91493457-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DocumentWindow;
struct __declspec(uuid("91493458-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ View;
struct __declspec(uuid("91493459-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowView;
struct __declspec(uuid("9149345a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowSettings;
struct __declspec(uuid("9149345b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ NamedSlideShows;
struct __declspec(uuid("9149345c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ NamedSlideShow;
struct __declspec(uuid("9149345d-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PrintOptions;
struct __declspec(uuid("9149345e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PrintRanges;
struct __declspec(uuid("9149345f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PrintRange;
struct __declspec(uuid("91493460-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AddIns;
struct __declspec(uuid("91493461-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AddIn;
struct __declspec(uuid("91493462-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Presentations;
struct __declspec(uuid("91493463-5a91-11cf-8700-00aa0060263b"))
/* interface */ PresEvents;
struct /* coclass */ Presentation;
struct __declspec(uuid("91493464-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Hyperlinks;
struct __declspec(uuid("91493465-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Hyperlink;
struct __declspec(uuid("91493466-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PageSetup;
struct __declspec(uuid("91493467-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Fonts;
struct __declspec(uuid("91493468-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ExtraColors;
struct __declspec(uuid("91493469-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Slides;
struct __declspec(uuid("9149346a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Slide;
struct __declspec(uuid("9149346b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideRange;
struct __declspec(uuid("9149346c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Master;
struct __declspec(uuid("9149346d-5a91-11cf-8700-00aa0060263b"))
/* interface */ SldEvents;
struct /* coclass */ Slide;
struct __declspec(uuid("9149346e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ColorSchemes;
struct __declspec(uuid("9149346f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ColorScheme;
struct __declspec(uuid("91493470-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ RGBColor;
struct __declspec(uuid("91493471-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowTransition;
struct __declspec(uuid("91493472-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SoundEffect;
struct __declspec(uuid("91493473-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SoundFormat;
struct __declspec(uuid("91493474-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ HeadersFooters;
struct __declspec(uuid("91493475-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Shapes;
struct __declspec(uuid("91493476-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Placeholders;
struct __declspec(uuid("91493477-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PlaceholderFormat;
struct __declspec(uuid("91493478-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ FreeformBuilder;
struct __declspec(uuid("91493479-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Shape;
struct __declspec(uuid("9149347a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ShapeRange;
struct __declspec(uuid("9149347b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ GroupShapes;
struct __declspec(uuid("9149347c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Adjustments;
struct __declspec(uuid("9149347d-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PictureFormat;
struct __declspec(uuid("9149347e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ FillFormat;
struct __declspec(uuid("9149347f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ LineFormat;
struct __declspec(uuid("91493480-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ShadowFormat;
struct __declspec(uuid("91493481-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ConnectorFormat;
struct __declspec(uuid("91493482-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextEffectFormat;
struct __declspec(uuid("91493483-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ThreeDFormat;
struct __declspec(uuid("91493484-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextFrame;
struct __declspec(uuid("91493485-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CalloutFormat;
struct __declspec(uuid("91493486-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ShapeNodes;
struct __declspec(uuid("91493487-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ShapeNode;
struct __declspec(uuid("91493488-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ OLEFormat;
struct __declspec(uuid("91493489-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ LinkFormat;
struct __declspec(uuid("9149348a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ObjectVerbs;
struct __declspec(uuid("9149348b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AnimationSettings;
struct __declspec(uuid("9149348c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ActionSettings;
struct __declspec(uuid("9149348d-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ActionSetting;
struct __declspec(uuid("9149348e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PlaySettings;
struct __declspec(uuid("9149348f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextRange;
struct __declspec(uuid("91493490-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Ruler;
struct __declspec(uuid("91493491-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ RulerLevels;
struct __declspec(uuid("91493492-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ RulerLevel;
struct __declspec(uuid("91493493-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TabStops;
struct __declspec(uuid("91493494-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TabStop;
struct __declspec(uuid("91493495-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Font;
struct __declspec(uuid("91493496-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ParagraphFormat;
struct __declspec(uuid("91493497-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ BulletFormat;
struct __declspec(uuid("91493498-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextStyles;
struct __declspec(uuid("91493499-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextStyle;
struct __declspec(uuid("9149349a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextStyleLevels;
struct __declspec(uuid("9149349b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextStyleLevel;
struct __declspec(uuid("9149349c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ HeaderFooter;
struct __declspec(uuid("9149349d-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Presentation;
struct __declspec(uuid("914934b9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Tags;
struct __declspec(uuid("914934be-5a91-11cf-8700-00aa0060263b"))
/* interface */ MouseTracker;
struct __declspec(uuid("914934bf-5a91-11cf-8700-00aa0060263b"))
/* interface */ MouseDownHandler;
struct __declspec(uuid("914934c0-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ OCXExtender;
struct __declspec(uuid("914934c1-5a91-11cf-8700-00aa0060263b"))
/* interface */ OCXExtenderEvents;
struct /* coclass */ OLEControl;
enum PpBorderType;
enum PpHTMLVersion;
enum PpPublishSourceType;
enum PpBulletType;
enum PpNumberedBulletStyle;
enum PpShapeFormat;
enum PpExportMode;
struct __declspec(uuid("914934c2-5a91-11cf-8700-00aa0060263b"))
/* interface */ EApplication;
struct __declspec(uuid("914934c3-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Table;
struct __declspec(uuid("914934c4-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Columns;
struct __declspec(uuid("914934c5-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Column;
struct __declspec(uuid("914934c6-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Rows;
struct __declspec(uuid("914934c7-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Row;
struct __declspec(uuid("914934c8-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CellRange;
struct __declspec(uuid("914934c9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Cell;
struct __declspec(uuid("914934ca-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Borders;
struct __declspec(uuid("914934cb-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Panes;
struct __declspec(uuid("914934cc-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Pane;
struct __declspec(uuid("914934cd-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DefaultWebOptions;
struct __declspec(uuid("914934ce-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ WebOptions;
struct __declspec(uuid("914934cf-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PublishObjects;
struct __declspec(uuid("914934d0-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PublishObject;
struct __declspec(uuid("914934d2-5a91-11cf-8700-00aa0060263b"))
/* interface */ MasterEvents;
struct /* coclass */ Master;
enum PpPasteDataType;
struct __declspec(uuid("914934d3-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _PowerRex;
struct /* coclass */ PowerRex;
struct __declspec(uuid("914934d4-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Comments;
struct __declspec(uuid("914934d5-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Comment;
struct __declspec(uuid("914934d6-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Designs;
struct __declspec(uuid("914934d7-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Design;
struct __declspec(uuid("914934d8-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DiagramNode;
struct __declspec(uuid("914934d9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DiagramNodeChildren;
struct __declspec(uuid("914934da-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DiagramNodes;
struct __declspec(uuid("914934db-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Diagram;
struct __declspec(uuid("914934dc-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TimeLine;
struct __declspec(uuid("914934dd-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Sequences;
enum MsoAnimEffect;
enum MsoAnimateByLevel;
enum MsoAnimTriggerType;
enum MsoAnimAfterEffect;
enum MsoAnimTextUnitEffect;
struct __declspec(uuid("914934de-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Sequence;
enum MsoAnimEffectRestart;
enum MsoAnimEffectAfter;
struct __declspec(uuid("914934df-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Effect;
struct __declspec(uuid("914934e0-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Timing;
enum MsoAnimDirection;
struct __declspec(uuid("914934e1-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ EffectParameters;
struct __declspec(uuid("914934e2-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ EffectInformation;
enum MsoAnimType;
struct __declspec(uuid("914934e3-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AnimationBehaviors;
enum MsoAnimAdditive;
enum MsoAnimAccumulate;
struct __declspec(uuid("914934e4-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AnimationBehavior;
struct __declspec(uuid("914934e5-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ MotionEffect;
struct __declspec(uuid("914934e6-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ColorEffect;
struct __declspec(uuid("914934e7-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ScaleEffect;
struct __declspec(uuid("914934e8-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ RotationEffect;
enum MsoAnimProperty;
struct __declspec(uuid("914934e9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PropertyEffect;
struct __declspec(uuid("914934ea-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AnimationPoints;
struct __declspec(uuid("914934eb-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AnimationPoint;
enum PpAlertLevel;
struct __declspec(uuid("914934ec-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CanvasShapes;
enum PpRevisionInfo;
struct __declspec(uuid("914934ed-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AutoCorrect;
struct __declspec(uuid("914934ee-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Options;
enum MsoAnimCommandType;
struct __declspec(uuid("914934ef-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CommandEffect;
enum MsoAnimFilterEffectType;
enum MsoAnimFilterEffectSubtype;
struct __declspec(uuid("914934f0-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ FilterEffect;
struct __declspec(uuid("914934f1-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SetEffect;
struct __declspec(uuid("914934f2-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CustomLayouts;
struct __declspec(uuid("914934f3-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CustomLayout;
enum PpRemoveDocInfoType;
enum PpCheckInVersionType;
enum MsoClickState;
enum PpFixedFormatType;
enum PpFixedFormatIntent;
struct __declspec(uuid("914934f5-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TableStyle;
struct __declspec(uuid("914934f6-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CustomerData;
struct __declspec(uuid("914934f7-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Research;
struct __declspec(uuid("914934f8-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TableBackground;
struct __declspec(uuid("914934f9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextFrame2;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(Collection, __uuidof(Collection));
_COM_SMARTPTR_TYPEDEF(ColorFormat, __uuidof(ColorFormat));
_COM_SMARTPTR_TYPEDEF(NamedSlideShow, __uuidof(NamedSlideShow));
_COM_SMARTPTR_TYPEDEF(NamedSlideShows, __uuidof(NamedSlideShows));
_COM_SMARTPTR_TYPEDEF(PrintRange, __uuidof(PrintRange));
_COM_SMARTPTR_TYPEDEF(PrintRanges, __uuidof(PrintRanges));
_COM_SMARTPTR_TYPEDEF(PrintOptions, __uuidof(PrintOptions));
_COM_SMARTPTR_TYPEDEF(AddIn, __uuidof(AddIn));
_COM_SMARTPTR_TYPEDEF(AddIns, __uuidof(AddIns));
_COM_SMARTPTR_TYPEDEF(PresEvents, __uuidof(PresEvents));
_COM_SMARTPTR_TYPEDEF(Presentations, __uuidof(Presentations));
_COM_SMARTPTR_TYPEDEF(Hyperlink, __uuidof(Hyperlink));
_COM_SMARTPTR_TYPEDEF(Hyperlinks, __uuidof(Hyperlinks));
_COM_SMARTPTR_TYPEDEF(PageSetup, __uuidof(PageSetup));
_COM_SMARTPTR_TYPEDEF(ExtraColors, __uuidof(ExtraColors));
_COM_SMARTPTR_TYPEDEF(SldEvents, __uuidof(SldEvents));
_COM_SMARTPTR_TYPEDEF(RGBColor, __uuidof(RGBColor));
_COM_SMARTPTR_TYPEDEF(ColorScheme, __uuidof(ColorScheme));
_COM_SMARTPTR_TYPEDEF(ColorSchemes, __uuidof(ColorSchemes));
_COM_SMARTPTR_TYPEDEF(SoundEffect, __uuidof(SoundEffect));
_COM_SMARTPTR_TYPEDEF(SlideShowTransition, __uuidof(SlideShowTransition));
_COM_SMARTPTR_TYPEDEF(SoundFormat, __uuidof(SoundFormat));
_COM_SMARTPTR_TYPEDEF(PlaceholderFormat, __uuidof(PlaceholderFormat));
_COM_SMARTPTR_TYPEDEF(Adjustments, __uuidof(Adjustments));
_COM_SMARTPTR_TYPEDEF(PictureFormat, __uuidof(PictureFormat));
_COM_SMARTPTR_TYPEDEF(FillFormat, __uuidof(FillFormat));
_COM_SMARTPTR_TYPEDEF(LineFormat, __uuidof(LineFormat));
_COM_SMARTPTR_TYPEDEF(ShadowFormat, __uuidof(ShadowFormat));
_COM_SMARTPTR_TYPEDEF(TextEffectFormat, __uuidof(TextEffectFormat));
_COM_SMARTPTR_TYPEDEF(ThreeDFormat, __uuidof(ThreeDFormat));
_COM_SMARTPTR_TYPEDEF(CalloutFormat, __uuidof(CalloutFormat));
_COM_SMARTPTR_TYPEDEF(ShapeNode, __uuidof(ShapeNode));
_COM_SMARTPTR_TYPEDEF(ShapeNodes, __uuidof(ShapeNodes));
_COM_SMARTPTR_TYPEDEF(LinkFormat, __uuidof(LinkFormat));
_COM_SMARTPTR_TYPEDEF(ObjectVerbs, __uuidof(ObjectVerbs));
_COM_SMARTPTR_TYPEDEF(OLEFormat, __uuidof(OLEFormat));
_COM_SMARTPTR_TYPEDEF(ActionSetting, __uuidof(ActionSetting));
_COM_SMARTPTR_TYPEDEF(ActionSettings, __uuidof(ActionSettings));
_COM_SMARTPTR_TYPEDEF(PlaySettings, __uuidof(PlaySettings));
_COM_SMARTPTR_TYPEDEF(AnimationSettings, __uuidof(AnimationSettings));
_COM_SMARTPTR_TYPEDEF(RulerLevel, __uuidof(RulerLevel));
_COM_SMARTPTR_TYPEDEF(RulerLevels, __uuidof(RulerLevels));
_COM_SMARTPTR_TYPEDEF(TabStop, __uuidof(TabStop));
_COM_SMARTPTR_TYPEDEF(TabStops, __uuidof(TabStops));
_COM_SMARTPTR_TYPEDEF(Ruler, __uuidof(Ruler));
_COM_SMARTPTR_TYPEDEF(Font, __uuidof(Font));
_COM_SMARTPTR_TYPEDEF(Fonts, __uuidof(Fonts));
_COM_SMARTPTR_TYPEDEF(HeaderFooter, __uuidof(HeaderFooter));
_COM_SMARTPTR_TYPEDEF(HeadersFooters, __uuidof(HeadersFooters));
_COM_SMARTPTR_TYPEDEF(Tags, __uuidof(Tags));
_COM_SMARTPTR_TYPEDEF(MouseTracker, __uuidof(MouseTracker));
_COM_SMARTPTR_TYPEDEF(SlideShowView, __uuidof(SlideShowView));
_COM_SMARTPTR_TYPEDEF(SlideShowWindow, __uuidof(SlideShowWindow));
_COM_SMARTPTR_TYPEDEF(SlideShowWindows, __uuidof(SlideShowWindows));
_COM_SMARTPTR_TYPEDEF(SlideShowSettings, __uuidof(SlideShowSettings));
_COM_SMARTPTR_TYPEDEF(MouseDownHandler, __uuidof(MouseDownHandler));
_COM_SMARTPTR_TYPEDEF(OCXExtender, __uuidof(OCXExtender));
_COM_SMARTPTR_TYPEDEF(OCXExtenderEvents, __uuidof(OCXExtenderEvents));
_COM_SMARTPTR_TYPEDEF(BulletFormat, __uuidof(BulletFormat));
_COM_SMARTPTR_TYPEDEF(ParagraphFormat, __uuidof(ParagraphFormat));
_COM_SMARTPTR_TYPEDEF(TextStyleLevel, __uuidof(TextStyleLevel));
_COM_SMARTPTR_TYPEDEF(TextStyleLevels, __uuidof(TextStyleLevels));
_COM_SMARTPTR_TYPEDEF(Borders, __uuidof(Borders));
_COM_SMARTPTR_TYPEDEF(Pane, __uuidof(Pane));
_COM_SMARTPTR_TYPEDEF(Panes, __uuidof(Panes));
_COM_SMARTPTR_TYPEDEF(DefaultWebOptions, __uuidof(DefaultWebOptions));
_COM_SMARTPTR_TYPEDEF(WebOptions, __uuidof(WebOptions));
_COM_SMARTPTR_TYPEDEF(PublishObject, __uuidof(PublishObject));
_COM_SMARTPTR_TYPEDEF(PublishObjects, __uuidof(PublishObjects));
_COM_SMARTPTR_TYPEDEF(MasterEvents, __uuidof(MasterEvents));
_COM_SMARTPTR_TYPEDEF(View, __uuidof(View));
_COM_SMARTPTR_TYPEDEF(TextRange, __uuidof(TextRange));
_COM_SMARTPTR_TYPEDEF(TextFrame, __uuidof(TextFrame));
_COM_SMARTPTR_TYPEDEF(TextStyle, __uuidof(TextStyle));
_COM_SMARTPTR_TYPEDEF(TextStyles, __uuidof(TextStyles));
_COM_SMARTPTR_TYPEDEF(_PowerRex, __uuidof(_PowerRex));
_COM_SMARTPTR_TYPEDEF(Comment, __uuidof(Comment));
_COM_SMARTPTR_TYPEDEF(Comments, __uuidof(Comments));
_COM_SMARTPTR_TYPEDEF(EffectParameters, __uuidof(EffectParameters));
_COM_SMARTPTR_TYPEDEF(EffectInformation, __uuidof(EffectInformation));
_COM_SMARTPTR_TYPEDEF(MotionEffect, __uuidof(MotionEffect));
_COM_SMARTPTR_TYPEDEF(ColorEffect, __uuidof(ColorEffect));
_COM_SMARTPTR_TYPEDEF(ScaleEffect, __uuidof(ScaleEffect));
_COM_SMARTPTR_TYPEDEF(RotationEffect, __uuidof(RotationEffect));
_COM_SMARTPTR_TYPEDEF(AnimationPoint, __uuidof(AnimationPoint));
_COM_SMARTPTR_TYPEDEF(AnimationPoints, __uuidof(AnimationPoints));
_COM_SMARTPTR_TYPEDEF(PropertyEffect, __uuidof(PropertyEffect));
_COM_SMARTPTR_TYPEDEF(AutoCorrect, __uuidof(AutoCorrect));
_COM_SMARTPTR_TYPEDEF(Options, __uuidof(Options));
_COM_SMARTPTR_TYPEDEF(CommandEffect, __uuidof(CommandEffect));
_COM_SMARTPTR_TYPEDEF(FilterEffect, __uuidof(FilterEffect));
_COM_SMARTPTR_TYPEDEF(SetEffect, __uuidof(SetEffect));
_COM_SMARTPTR_TYPEDEF(TableStyle, __uuidof(TableStyle));
_COM_SMARTPTR_TYPEDEF(CustomerData, __uuidof(CustomerData));
_COM_SMARTPTR_TYPEDEF(Research, __uuidof(Research));
_COM_SMARTPTR_TYPEDEF(TableBackground, __uuidof(TableBackground));
_COM_SMARTPTR_TYPEDEF(TextFrame2, __uuidof(TextFrame2));
_COM_SMARTPTR_TYPEDEF(_Application, __uuidof(_Application));
_COM_SMARTPTR_TYPEDEF(_Global, __uuidof(_Global));
_COM_SMARTPTR_TYPEDEF(Selection, __uuidof(Selection));
_COM_SMARTPTR_TYPEDEF(DocumentWindow, __uuidof(DocumentWindow));
_COM_SMARTPTR_TYPEDEF(DocumentWindows, __uuidof(DocumentWindows));
_COM_SMARTPTR_TYPEDEF(Slides, __uuidof(Slides));
_COM_SMARTPTR_TYPEDEF(_Slide, __uuidof(_Slide));
_COM_SMARTPTR_TYPEDEF(SlideRange, __uuidof(SlideRange));
_COM_SMARTPTR_TYPEDEF(_Master, __uuidof(_Master));
_COM_SMARTPTR_TYPEDEF(Design, __uuidof(Design));
_COM_SMARTPTR_TYPEDEF(Designs, __uuidof(Designs));
_COM_SMARTPTR_TYPEDEF(Shapes, __uuidof(Shapes));
_COM_SMARTPTR_TYPEDEF(Placeholders, __uuidof(Placeholders));
_COM_SMARTPTR_TYPEDEF(FreeformBuilder, __uuidof(FreeformBuilder));
_COM_SMARTPTR_TYPEDEF(Shape, __uuidof(Shape));
_COM_SMARTPTR_TYPEDEF(ConnectorFormat, __uuidof(ConnectorFormat));
_COM_SMARTPTR_TYPEDEF(_Presentation, __uuidof(_Presentation));
_COM_SMARTPTR_TYPEDEF(Cell, __uuidof(Cell));
_COM_SMARTPTR_TYPEDEF(CellRange, __uuidof(CellRange));
_COM_SMARTPTR_TYPEDEF(Column, __uuidof(Column));
_COM_SMARTPTR_TYPEDEF(Columns, __uuidof(Columns));
_COM_SMARTPTR_TYPEDEF(Row, __uuidof(Row));
_COM_SMARTPTR_TYPEDEF(Rows, __uuidof(Rows));
_COM_SMARTPTR_TYPEDEF(Table, __uuidof(Table));
_COM_SMARTPTR_TYPEDEF(Timing, __uuidof(Timing));
_COM_SMARTPTR_TYPEDEF(AnimationBehavior, __uuidof(AnimationBehavior));
_COM_SMARTPTR_TYPEDEF(AnimationBehaviors, __uuidof(AnimationBehaviors));
_COM_SMARTPTR_TYPEDEF(Effect, __uuidof(Effect));
_COM_SMARTPTR_TYPEDEF(EApplication, __uuidof(EApplication));
_COM_SMARTPTR_TYPEDEF(Sequence, __uuidof(Sequence));
_COM_SMARTPTR_TYPEDEF(Sequences, __uuidof(Sequences));
_COM_SMARTPTR_TYPEDEF(TimeLine, __uuidof(TimeLine));
_COM_SMARTPTR_TYPEDEF(ShapeRange, __uuidof(ShapeRange));
_COM_SMARTPTR_TYPEDEF(GroupShapes, __uuidof(GroupShapes));
_COM_SMARTPTR_TYPEDEF(CanvasShapes, __uuidof(CanvasShapes));
_COM_SMARTPTR_TYPEDEF(CustomLayout, __uuidof(CustomLayout));
_COM_SMARTPTR_TYPEDEF(CustomLayouts, __uuidof(CustomLayouts));
_COM_SMARTPTR_TYPEDEF(DiagramNode, __uuidof(DiagramNode));
_COM_SMARTPTR_TYPEDEF(DiagramNodeChildren, __uuidof(DiagramNodeChildren));
_COM_SMARTPTR_TYPEDEF(DiagramNodes, __uuidof(DiagramNodes));
_COM_SMARTPTR_TYPEDEF(Diagram, __uuidof(Diagram));

//
// Type library items
//

enum PpWindowState
{
    ppWindowNormal = 1,
    ppWindowMinimized = 2,
    ppWindowMaximized = 3
};

enum PpArrangeStyle
{
    ppArrangeTiled = 1,
    ppArrangeCascade = 2
};

enum PpViewType
{
    ppViewSlide = 1,
    ppViewSlideMaster = 2,
    ppViewNotesPage = 3,
    ppViewHandoutMaster = 4,
    ppViewNotesMaster = 5,
    ppViewOutline = 6,
    ppViewSlideSorter = 7,
    ppViewTitleMaster = 8,
    ppViewNormal = 9,
    ppViewPrintPreview = 10,
    ppViewThumbnails = 11,
    ppViewMasterThumbnails = 12
};

enum PpColorSchemeIndex
{
    ppSchemeColorMixed = -2,
    ppNotSchemeColor = 0,
    ppBackground = 1,
    ppForeground = 2,
    ppShadow = 3,
    ppTitle = 4,
    ppFill = 5,
    ppAccent1 = 6,
    ppAccent2 = 7,
    ppAccent3 = 8
};

enum PpSlideSizeType
{
    ppSlideSizeOnScreen = 1,
    ppSlideSizeLetterPaper = 2,
    ppSlideSizeA4Paper = 3,
    ppSlideSize35MM = 4,
    ppSlideSizeOverhead = 5,
    ppSlideSizeBanner = 6,
    ppSlideSizeCustom = 7,
    ppSlideSizeLedgerPaper = 8,
    ppSlideSizeA3Paper = 9,
    ppSlideSizeB4ISOPaper = 10,
    ppSlideSizeB5ISOPaper = 11,
    ppSlideSizeB4JISPaper = 12,
    ppSlideSizeB5JISPaper = 13,
    ppSlideSizeHagakiCard = 14,
    ppSlideSizeOnScreen16x9 = 15,
    ppSlideSizeOnScreen16x10 = 16
};

enum PpSaveAsFileType
{
    ppSaveAsPresentation = 1,
    ppSaveAsPowerPoint7 = 2,
    ppSaveAsPowerPoint4 = 3,
    ppSaveAsPowerPoint3 = 4,
    ppSaveAsTemplate = 5,
    ppSaveAsRTF = 6,
    ppSaveAsShow = 7,
    ppSaveAsAddIn = 8,
    ppSaveAsPowerPoint4FarEast = 10,
    ppSaveAsDefault = 11,
    ppSaveAsHTML = 12,
    ppSaveAsHTMLv3 = 13,
    ppSaveAsHTMLDual = 14,
    ppSaveAsMetaFile = 15,
    ppSaveAsGIF = 16,
    ppSaveAsJPG = 17,
    ppSaveAsPNG = 18,
    ppSaveAsBMP = 19,
    ppSaveAsWebArchive = 20,
    ppSaveAsTIF = 21,
    ppSaveAsPresForReview = 22,
    ppSaveAsEMF = 23,
    ppSaveAsOpenXMLPresentation = 24,
    ppSaveAsOpenXMLPresentationMacroEnabled = 25,
    ppSaveAsOpenXMLTemplate = 26,
    ppSaveAsOpenXMLTemplateMacroEnabled = 27,
    ppSaveAsOpenXMLShow = 28,
    ppSaveAsOpenXMLShowMacroEnabled = 29,
    ppSaveAsOpenXMLAddin = 30,
    ppSaveAsOpenXMLTheme = 31,
    ppSaveAsPDF = 32,
    ppSaveAsXPS = 33,
    ppSaveAsXMLPresentation = 34
};

enum PpTextStyleType
{
    ppDefaultStyle = 1,
    ppTitleStyle = 2,
    ppBodyStyle = 3
};

enum PpSlideLayout
{
    ppLayoutMixed = -2,
    ppLayoutTitle = 1,
    ppLayoutText = 2,
    ppLayoutTwoColumnText = 3,
    ppLayoutTable = 4,
    ppLayoutTextAndChart = 5,
    ppLayoutChartAndText = 6,
    ppLayoutOrgchart = 7,
    ppLayoutChart = 8,
    ppLayoutTextAndClipart = 9,
    ppLayoutClipartAndText = 10,
    ppLayoutTitleOnly = 11,
    ppLayoutBlank = 12,
    ppLayoutTextAndObject = 13,
    ppLayoutObjectAndText = 14,
    ppLayoutLargeObject = 15,
    ppLayoutObject = 16,
    ppLayoutTextAndMediaClip = 17,
    ppLayoutMediaClipAndText = 18,
    ppLayoutObjectOverText = 19,
    ppLayoutTextOverObject = 20,
    ppLayoutTextAndTwoObjects = 21,
    ppLayoutTwoObjectsAndText = 22,
    ppLayoutTwoObjectsOverText = 23,
    ppLayoutFourObjects = 24,
    ppLayoutVerticalText = 25,
    ppLayoutClipArtAndVerticalText = 26,
    ppLayoutVerticalTitleAndText = 27,
    ppLayoutVerticalTitleAndTextOverChart = 28,
    ppLayoutTwoObjects = 29,
    ppLayoutObjectAndTwoObjects = 30,
    ppLayoutTwoObjectsAndObject = 31,
    ppLayoutCustom = 32,
    ppLayoutSectionHeader = 33,
    ppLayoutComparison = 34,
    ppLayoutContentWithCaption = 35,
    ppLayoutPictureWithCaption = 36
};

enum PpEntryEffect
{
    ppEffectMixed = -2,
    ppEffectNone = 0,
    ppEffectCut = 257,
    ppEffectCutThroughBlack = 258,
    ppEffectRandom = 513,
    ppEffectBlindsHorizontal = 769,
    ppEffectBlindsVertical = 770,
    ppEffectCheckerboardAcross = 1025,
    ppEffectCheckerboardDown = 1026,
    ppEffectCoverLeft = 1281,
    ppEffectCoverUp = 1282,
    ppEffectCoverRight = 1283,
    ppEffectCoverDown = 1284,
    ppEffectCoverLeftUp = 1285,
    ppEffectCoverRightUp = 1286,
    ppEffectCoverLeftDown = 1287,
    ppEffectCoverRightDown = 1288,
    ppEffectDissolve = 1537,
    ppEffectFade = 1793,
    ppEffectUncoverLeft = 2049,
    ppEffectUncoverUp = 2050,
    ppEffectUncoverRight = 2051,
    ppEffectUncoverDown = 2052,
    ppEffectUncoverLeftUp = 2053,
    ppEffectUncoverRightUp = 2054,
    ppEffectUncoverLeftDown = 2055,
    ppEffectUncoverRightDown = 2056,
    ppEffectRandomBarsHorizontal = 2305,
    ppEffectRandomBarsVertical = 2306,
    ppEffectStripsUpLeft = 2561,
    ppEffectStripsUpRight = 2562,
    ppEffectStripsDownLeft = 2563,
    ppEffectStripsDownRight = 2564,
    ppEffectStripsLeftUp = 2565,
    ppEffectStripsRightUp = 2566,
    ppEffectStripsLeftDown = 2567,
    ppEffectStripsRightDown = 2568,
    ppEffectWipeLeft = 2817,
    ppEffectWipeUp = 2818,
    ppEffectWipeRight = 2819,
    ppEffectWipeDown = 2820,
    ppEffectBoxOut = 3073,
    ppEffectBoxIn = 3074,
    ppEffectFlyFromLeft = 3329,
    ppEffectFlyFromTop = 3330,
    ppEffectFlyFromRight = 3331,
    ppEffectFlyFromBottom = 3332,
    ppEffectFlyFromTopLeft = 3333,
    ppEffectFlyFromTopRight = 3334,
    ppEffectFlyFromBottomLeft = 3335,
    ppEffectFlyFromBottomRight = 3336,
    ppEffectPeekFromLeft = 3337,
    ppEffectPeekFromDown = 3338,
    ppEffectPeekFromRight = 3339,
    ppEffectPeekFromUp = 3340,
    ppEffectCrawlFromLeft = 3341,
    ppEffectCrawlFromUp = 3342,
    ppEffectCrawlFromRight = 3343,
    ppEffectCrawlFromDown = 3344,
    ppEffectZoomIn = 3345,
    ppEffectZoomInSlightly = 3346,
    ppEffectZoomOut = 3347,
    ppEffectZoomOutSlightly = 3348,
    ppEffectZoomCenter = 3349,
    ppEffectZoomBottom = 3350,
    ppEffectStretchAcross = 3351,
    ppEffectStretchLeft = 3352,
    ppEffectStretchUp = 3353,
    ppEffectStretchRight = 3354,
    ppEffectStretchDown = 3355,
    ppEffectSwivel = 3356,
    ppEffectSpiral = 3357,
    ppEffectSplitHorizontalOut = 3585,
    ppEffectSplitHorizontalIn = 3586,
    ppEffectSplitVerticalOut = 3587,
    ppEffectSplitVerticalIn = 3588,
    ppEffectFlashOnceFast = 3841,
    ppEffectFlashOnceMedium = 3842,
    ppEffectFlashOnceSlow = 3843,
    ppEffectAppear = 3844,
    ppEffectCircleOut = 3845,
    ppEffectDiamondOut = 3846,
    ppEffectCombHorizontal = 3847,
    ppEffectCombVertical = 3848,
    ppEffectFadeSmoothly = 3849,
    ppEffectNewsflash = 3850,
    ppEffectPlusOut = 3851,
    ppEffectPushDown = 3852,
    ppEffectPushLeft = 3853,
    ppEffectPushRight = 3854,
    ppEffectPushUp = 3855,
    ppEffectWedge = 3856,
    ppEffectWheel1Spoke = 3857,
    ppEffectWheel2Spokes = 3858,
    ppEffectWheel3Spokes = 3859,
    ppEffectWheel4Spokes = 3860,
    ppEffectWheel8Spokes = 3861
};

enum PpTextLevelEffect
{
    ppAnimateLevelMixed = -2,
    ppAnimateLevelNone = 0,
    ppAnimateByFirstLevel = 1,
    ppAnimateBySecondLevel = 2,
    ppAnimateByThirdLevel = 3,
    ppAnimateByFourthLevel = 4,
    ppAnimateByFifthLevel = 5,
    ppAnimateByAllLevels = 16
};

enum PpTextUnitEffect
{
    ppAnimateUnitMixed = -2,
    ppAnimateByParagraph = 0,
    ppAnimateByWord = 1,
    ppAnimateByCharacter = 2
};

enum PpChartUnitEffect
{
    ppAnimateChartMixed = -2,
    ppAnimateBySeries = 1,
    ppAnimateByCategory = 2,
    ppAnimateBySeriesElements = 3,
    ppAnimateByCategoryElements = 4,
    ppAnimateChartAllAtOnce = 5
};

enum PpAfterEffect
{
    ppAfterEffectMixed = -2,
    ppAfterEffectNothing = 0,
    ppAfterEffectHide = 1,
    ppAfterEffectDim = 2,
    ppAfterEffectHideOnClick = 3
};

enum PpAdvanceMode
{
    ppAdvanceModeMixed = -2,
    ppAdvanceOnClick = 1,
    ppAdvanceOnTime = 2
};

enum PpSoundEffectType
{
    ppSoundEffectsMixed = -2,
    ppSoundNone = 0,
    ppSoundStopPrevious = 1,
    ppSoundFile = 2
};

enum PpFollowColors
{
    ppFollowColorsMixed = -2,
    ppFollowColorsNone = 0,
    ppFollowColorsScheme = 1,
    ppFollowColorsTextAndBackground = 2
};

enum PpUpdateOption
{
    ppUpdateOptionMixed = -2,
    ppUpdateOptionManual = 1,
    ppUpdateOptionAutomatic = 2
};

enum PpParagraphAlignment
{
    ppAlignmentMixed = -2,
    ppAlignLeft = 1,
    ppAlignCenter = 2,
    ppAlignRight = 3,
    ppAlignJustify = 4,
    ppAlignDistribute = 5,
    ppAlignThaiDistribute = 6,
    ppAlignJustifyLow = 7
};

enum PpBaselineAlignment
{
    ppBaselineAlignMixed = -2,
    ppBaselineAlignBaseline = 1,
    ppBaselineAlignTop = 2,
    ppBaselineAlignCenter = 3,
    ppBaselineAlignFarEast50 = 4,
    ppBaselineAlignAuto = 5
};

enum PpTabStopType
{
    ppTabStopMixed = -2,
    ppTabStopLeft = 1,
    ppTabStopCenter = 2,
    ppTabStopRight = 3,
    ppTabStopDecimal = 4
};

enum PpIndentControl
{
    ppIndentControlMixed = -2,
    ppIndentReplaceAttr = 1,
    ppIndentKeepAttr = 2
};

enum PpChangeCase
{
    ppCaseSentence = 1,
    ppCaseLower = 2,
    ppCaseUpper = 3,
    ppCaseTitle = 4,
    ppCaseToggle = 5
};

enum PpSlideShowPointerType
{
    ppSlideShowPointerNone = 0,
    ppSlideShowPointerArrow = 1,
    ppSlideShowPointerPen = 2,
    ppSlideShowPointerAlwaysHidden = 3,
    ppSlideShowPointerAutoArrow = 4,
    ppSlideShowPointerEraser = 5
};

enum PpSlideShowState
{
    ppSlideShowRunning = 1,
    ppSlideShowPaused = 2,
    ppSlideShowBlackScreen = 3,
    ppSlideShowWhiteScreen = 4,
    ppSlideShowDone = 5
};

enum PpSlideShowAdvanceMode
{
    ppSlideShowManualAdvance = 1,
    ppSlideShowUseSlideTimings = 2,
    ppSlideShowRehearseNewTimings = 3
};

enum PpFileDialogType
{
    ppFileDialogOpen = 1,
    ppFileDialogSave = 2
};

enum PpPrintOutputType
{
    ppPrintOutputSlides = 1,
    ppPrintOutputTwoSlideHandouts = 2,
    ppPrintOutputThreeSlideHandouts = 3,
    ppPrintOutputSixSlideHandouts = 4,
    ppPrintOutputNotesPages = 5,
    ppPrintOutputOutline = 6,
    ppPrintOutputBuildSlides = 7,
    ppPrintOutputFourSlideHandouts = 8,
    ppPrintOutputNineSlideHandouts = 9,
    ppPrintOutputOneSlideHandouts = 10
};

enum PpPrintHandoutOrder
{
    ppPrintHandoutVerticalFirst = 1,
    ppPrintHandoutHorizontalFirst = 2
};

enum PpPrintColorType
{
    ppPrintColor = 1,
    ppPrintBlackAndWhite = 2,
    ppPrintPureBlackAndWhite = 3
};

enum PpSelectionType
{
    ppSelectionNone = 0,
    ppSelectionSlides = 1,
    ppSelectionShapes = 2,
    ppSelectionText = 3
};

enum PpDirection
{
    ppDirectionMixed = -2,
    ppDirectionLeftToRight = 1,
    ppDirectionRightToLeft = 2
};

enum PpDateTimeFormat
{
    ppDateTimeFormatMixed = -2,
    ppDateTimeMdyy = 1,
    ppDateTimeddddMMMMddyyyy = 2,
    ppDateTimedMMMMyyyy = 3,
    ppDateTimeMMMMdyyyy = 4,
    ppDateTimedMMMyy = 5,
    ppDateTimeMMMMyy = 6,
    ppDateTimeMMyy = 7,
    ppDateTimeMMddyyHmm = 8,
    ppDateTimeMMddyyhmmAMPM = 9,
    ppDateTimeHmm = 10,
    ppDateTimeHmmss = 11,
    ppDateTimehmmAMPM = 12,
    ppDateTimehmmssAMPM = 13,
    ppDateTimeFigureOut = 14
};

enum PpTransitionSpeed
{
    ppTransitionSpeedMixed = -2,
    ppTransitionSpeedSlow = 1,
    ppTransitionSpeedMedium = 2,
    ppTransitionSpeedFast = 3
};

enum PpMouseActivation
{
    ppMouseClick = 1,
    ppMouseOver = 2
};

enum PpActionType
{
    ppActionMixed = -2,
    ppActionNone = 0,
    ppActionNextSlide = 1,
    ppActionPreviousSlide = 2,
    ppActionFirstSlide = 3,
    ppActionLastSlide = 4,
    ppActionLastSlideViewed = 5,
    ppActionEndShow = 6,
    ppActionHyperlink = 7,
    ppActionRunMacro = 8,
    ppActionRunProgram = 9,
    ppActionNamedSlideShow = 10,
    ppActionOLEVerb = 11,
    ppActionPlay = 12
};

enum PpPlaceholderType
{
    ppPlaceholderMixed = -2,
    ppPlaceholderTitle = 1,
    ppPlaceholderBody = 2,
    ppPlaceholderCenterTitle = 3,
    ppPlaceholderSubtitle = 4,
    ppPlaceholderVerticalTitle = 5,
    ppPlaceholderVerticalBody = 6,
    ppPlaceholderObject = 7,
    ppPlaceholderChart = 8,
    ppPlaceholderBitmap = 9,
    ppPlaceholderMediaClip = 10,
    ppPlaceholderOrgChart = 11,
    ppPlaceholderTable = 12,
    ppPlaceholderSlideNumber = 13,
    ppPlaceholderHeader = 14,
    ppPlaceholderFooter = 15,
    ppPlaceholderDate = 16,
    ppPlaceholderVerticalObject = 17,
    ppPlaceholderPicture = 18
};

enum PpSlideShowType
{
    ppShowTypeSpeaker = 1,
    ppShowTypeWindow = 2,
    ppShowTypeKiosk = 3,
	ppShowTypeWindow2 = 4
};

enum PpPrintRangeType
{
    ppPrintAll = 1,
    ppPrintSelection = 2,
    ppPrintCurrent = 3,
    ppPrintSlideRange = 4,
    ppPrintNamedSlideShow = 5
};

enum PpAutoSize
{
    ppAutoSizeMixed = -2,
    ppAutoSizeNone = 0,
    ppAutoSizeShapeToFitText = 1
};

enum PpMediaType
{
    ppMediaTypeMixed = -2,
    ppMediaTypeOther = 1,
    ppMediaTypeSound = 2,
    ppMediaTypeMovie = 3
};

enum PpSoundFormatType
{
    ppSoundFormatMixed = -2,
    ppSoundFormatNone = 0,
    ppSoundFormatWAV = 1,
    ppSoundFormatMIDI = 2,
    ppSoundFormatCDAudio = 3
};

enum PpFarEastLineBreakLevel
{
    ppFarEastLineBreakLevelNormal = 1,
    ppFarEastLineBreakLevelStrict = 2,
    ppFarEastLineBreakLevelCustom = 3
};

enum PpSlideShowRangeType
{
    ppShowAll = 1,
    ppShowSlideRange = 2,
    ppShowNamedSlideShow = 3
};

enum PpFrameColors
{
    ppFrameColorsBrowserColors = 1,
    ppFrameColorsPresentationSchemeTextColor = 2,
    ppFrameColorsPresentationSchemeAccentColor = 3,
    ppFrameColorsWhiteTextOnBlack = 4,
    ppFrameColorsBlackTextOnWhite = 5
};

struct __declspec(uuid("91493450-5a91-11cf-8700-00aa0060263b"))
Collection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    _variant_t _Index (
        int Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw__Index (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * _Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
};

struct __declspec(uuid("91493441-5a91-11cf-8700-00aa0060263b"))
Application;
    // [ default ] interface _Application
    // [ default, source ] interface EApplication

struct __declspec(uuid("91493443-5a91-11cf-8700-00aa0060263b"))
Global;
    // [ default ] interface _Global

struct __declspec(uuid("91493452-5a91-11cf-8700-00aa0060263b"))
ColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum Office::MsoColorType Type;
    __declspec(property(get=GetTintAndShade,put=PutTintAndShade))
    float TintAndShade;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    enum PpColorSchemeIndex SchemeColor;

	__declspec(property(get=Get__RGB,put=Put__RGB))
	Office::MsoRGBType __RGB;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    Office::MsoRGBType Get__RGB ( );
    void Put__RGB (
        Office::MsoRGBType __RGB );
    enum Office::MsoColorType GetType ( );
    enum PpColorSchemeIndex GetSchemeColor ( );
    void PutSchemeColor (
        enum PpColorSchemeIndex SchemeColor );
    float GetTintAndShade ( );
    void PutTintAndShade (
        float pValue );
    enum Office::MsoThemeColorIndex GetObjectThemeColor ( );
    void PutObjectThemeColor (
        enum Office::MsoThemeColorIndex ObjectThemeColor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get___RGB (
        /*[out,retval]*/ Office::MsoRGBType * __RGB ) = 0;
      virtual HRESULT __stdcall put___RGB (
        /*[in]*/ Office::MsoRGBType __RGB ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoColorType * Type ) = 0;
      virtual HRESULT __stdcall get_SchemeColor (
        /*[out,retval]*/ enum PpColorSchemeIndex * SchemeColor ) = 0;
      virtual HRESULT __stdcall put_SchemeColor (
        /*[in]*/ enum PpColorSchemeIndex SchemeColor ) = 0;
      virtual HRESULT __stdcall get_TintAndShade (
        /*[out,retval]*/ float * pValue ) = 0;
      virtual HRESULT __stdcall put_TintAndShade (
        /*[in]*/ float pValue ) = 0;
      virtual HRESULT __stdcall get_ObjectThemeColor (
        /*[out,retval]*/ enum Office::MsoThemeColorIndex * ObjectThemeColor ) = 0;
      virtual HRESULT __stdcall put_ObjectThemeColor (
        /*[in]*/ enum Office::MsoThemeColorIndex ObjectThemeColor ) = 0;
};

struct __declspec(uuid("9149345c-5a91-11cf-8700-00aa0060263b"))
NamedSlideShow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSlideIDs))
    _variant_t SlideIDs;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    HRESULT Delete ( );
    _variant_t GetSlideIDs ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_SlideIDs (
        /*[out,retval]*/ VARIANT * SlideIDs ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
};

struct __declspec(uuid("9149345b-5a91-11cf-8700-00aa0060263b"))
NamedSlideShows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    NamedSlideShowPtr Item (
        const _variant_t & Index );
    NamedSlideShowPtr Add (
        _bstr_t Name,
        const _variant_t & safeArrayOfSlideIDs );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct NamedSlideShow * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT safeArrayOfSlideIDs,
        /*[out,retval]*/ struct NamedSlideShow * * Add ) = 0;
};

struct __declspec(uuid("9149345f-5a91-11cf-8700-00aa0060263b"))
PrintRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStart))
    int Start;
    __declspec(property(get=GetEnd))
    int End;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    int GetStart ( );
    int GetEnd ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ int * Start ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ int * End ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("9149345e-5a91-11cf-8700-00aa0060263b"))
PrintRanges : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    PrintRangePtr Add (
        int Start,
        int End );
    _ApplicationPtr GetApplication ( );
    HRESULT ClearAll ( );
    PrintRangePtr Item (
        int Index );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int Start,
        /*[in]*/ int End,
        /*[out,retval]*/ struct PrintRange * * Add ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_ClearAll ( ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct PrintRange * * Item ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("9149345d-5a91-11cf-8700-00aa0060263b"))
PrintOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHandoutOrder,put=PutHandoutOrder))
    enum PpPrintHandoutOrder HandoutOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetPrintColorType,put=PutPrintColorType))
    enum PpPrintColorType PrintColorType;
    __declspec(property(get=GetNumberOfCopies,put=PutNumberOfCopies))
    int NumberOfCopies;
    __declspec(property(get=GetOutputType,put=PutOutputType))
    enum PpPrintOutputType OutputType;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRangeType,put=PutRangeType))
    enum PpPrintRangeType RangeType;
    __declspec(property(get=GetRanges))
    PrintRangesPtr Ranges;
    __declspec(property(get=GetSlideShowName,put=PutSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum PpPrintColorType GetPrintColorType ( );
    void PutPrintColorType (
        enum PpPrintColorType PrintColorType );
    enum Office::MsoTriState GetCollate ( );
    void PutCollate (
        enum Office::MsoTriState Collate );
    enum Office::MsoTriState GetFitToPage ( );
    void PutFitToPage (
        enum Office::MsoTriState FitToPage );
    enum Office::MsoTriState GetFrameSlides ( );
    void PutFrameSlides (
        enum Office::MsoTriState FrameSlides );
    int GetNumberOfCopies ( );
    void PutNumberOfCopies (
        int NumberOfCopies );
    enum PpPrintOutputType GetOutputType ( );
    void PutOutputType (
        enum PpPrintOutputType OutputType );
    IDispatchPtr GetParent ( );
    enum Office::MsoTriState GetPrintHiddenSlides ( );
    void PutPrintHiddenSlides (
        enum Office::MsoTriState PrintHiddenSlides );
    enum Office::MsoTriState GetPrintInBackground ( );
    void PutPrintInBackground (
        enum Office::MsoTriState PrintInBackground );
    enum PpPrintRangeType GetRangeType ( );
    void PutRangeType (
        enum PpPrintRangeType RangeType );
    PrintRangesPtr GetRanges ( );
    enum Office::MsoTriState GetPrintFontsAsGraphics ( );
    void PutPrintFontsAsGraphics (
        enum Office::MsoTriState PrintFontsAsGraphics );
    _bstr_t GetSlideShowName ( );
    void PutSlideShowName (
        _bstr_t SlideShowName );
    _bstr_t GetActivePrinter ( );
    void PutActivePrinter (
        _bstr_t ActivePrinter );
    enum PpPrintHandoutOrder GetHandoutOrder ( );
    void PutHandoutOrder (
        enum PpPrintHandoutOrder HandoutOrder );
    enum Office::MsoTriState GetPrintComments ( );
    void PutPrintComments (
        enum Office::MsoTriState PrintComments );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_PrintColorType (
        /*[out,retval]*/ enum PpPrintColorType * PrintColorType ) = 0;
      virtual HRESULT __stdcall put_PrintColorType (
        /*[in]*/ enum PpPrintColorType PrintColorType ) = 0;
      virtual HRESULT __stdcall get_Collate (
        /*[out,retval]*/ enum Office::MsoTriState * Collate ) = 0;
      virtual HRESULT __stdcall put_Collate (
        /*[in]*/ enum Office::MsoTriState Collate ) = 0;
      virtual HRESULT __stdcall get_FitToPage (
        /*[out,retval]*/ enum Office::MsoTriState * FitToPage ) = 0;
      virtual HRESULT __stdcall put_FitToPage (
        /*[in]*/ enum Office::MsoTriState FitToPage ) = 0;
      virtual HRESULT __stdcall get_FrameSlides (
        /*[out,retval]*/ enum Office::MsoTriState * FrameSlides ) = 0;
      virtual HRESULT __stdcall put_FrameSlides (
        /*[in]*/ enum Office::MsoTriState FrameSlides ) = 0;
      virtual HRESULT __stdcall get_NumberOfCopies (
        /*[out,retval]*/ int * NumberOfCopies ) = 0;
      virtual HRESULT __stdcall put_NumberOfCopies (
        /*[in]*/ int NumberOfCopies ) = 0;
      virtual HRESULT __stdcall get_OutputType (
        /*[out,retval]*/ enum PpPrintOutputType * OutputType ) = 0;
      virtual HRESULT __stdcall put_OutputType (
        /*[in]*/ enum PpPrintOutputType OutputType ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_PrintHiddenSlides (
        /*[out,retval]*/ enum Office::MsoTriState * PrintHiddenSlides ) = 0;
      virtual HRESULT __stdcall put_PrintHiddenSlides (
        /*[in]*/ enum Office::MsoTriState PrintHiddenSlides ) = 0;
      virtual HRESULT __stdcall get_PrintInBackground (
        /*[out,retval]*/ enum Office::MsoTriState * PrintInBackground ) = 0;
      virtual HRESULT __stdcall put_PrintInBackground (
        /*[in]*/ enum Office::MsoTriState PrintInBackground ) = 0;
      virtual HRESULT __stdcall get_RangeType (
        /*[out,retval]*/ enum PpPrintRangeType * RangeType ) = 0;
      virtual HRESULT __stdcall put_RangeType (
        /*[in]*/ enum PpPrintRangeType RangeType ) = 0;
      virtual HRESULT __stdcall get_Ranges (
        /*[out,retval]*/ struct PrintRanges * * Ranges ) = 0;
      virtual HRESULT __stdcall get_PrintFontsAsGraphics (
        /*[out,retval]*/ enum Office::MsoTriState * PrintFontsAsGraphics ) = 0;
      virtual HRESULT __stdcall put_PrintFontsAsGraphics (
        /*[in]*/ enum Office::MsoTriState PrintFontsAsGraphics ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall put_SlideShowName (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[out,retval]*/ BSTR * ActivePrinter ) = 0;
      virtual HRESULT __stdcall put_ActivePrinter (
        /*[in]*/ BSTR ActivePrinter ) = 0;
      virtual HRESULT __stdcall get_HandoutOrder (
        /*[out,retval]*/ enum PpPrintHandoutOrder * HandoutOrder ) = 0;
      virtual HRESULT __stdcall put_HandoutOrder (
        /*[in]*/ enum PpPrintHandoutOrder HandoutOrder ) = 0;
      virtual HRESULT __stdcall get_PrintComments (
        /*[out,retval]*/ enum Office::MsoTriState * PrintComments ) = 0;
      virtual HRESULT __stdcall put_PrintComments (
        /*[in]*/ enum Office::MsoTriState PrintComments ) = 0;
};

struct __declspec(uuid("91493461-5a91-11cf-8700-00aa0060263b"))
AddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetRegisteredInHKLM))
    enum Office::MsoTriState RegisteredInHKLM;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetFullName ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    enum Office::MsoTriState GetRegistered ( );
    void PutRegistered (
        enum Office::MsoTriState Registered );
    enum Office::MsoTriState GetAutoLoad ( );
    void PutAutoLoad (
        enum Office::MsoTriState AutoLoad );
    enum Office::MsoTriState GetLoaded ( );
    void PutLoaded (
        enum Office::MsoTriState Loaded );
    enum Office::MsoTriState GetDisplayAlerts ( );
    void PutDisplayAlerts (
        enum Office::MsoTriState DisplayAlerts );
    enum Office::MsoTriState GetRegisteredInHKLM ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * FullName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall get_Registered (
        /*[out,retval]*/ enum Office::MsoTriState * Registered ) = 0;
      virtual HRESULT __stdcall put_Registered (
        /*[in]*/ enum Office::MsoTriState Registered ) = 0;
      virtual HRESULT __stdcall get_AutoLoad (
        /*[out,retval]*/ enum Office::MsoTriState * AutoLoad ) = 0;
      virtual HRESULT __stdcall put_AutoLoad (
        /*[in]*/ enum Office::MsoTriState AutoLoad ) = 0;
      virtual HRESULT __stdcall get_Loaded (
        /*[out,retval]*/ enum Office::MsoTriState * Loaded ) = 0;
      virtual HRESULT __stdcall put_Loaded (
        /*[in]*/ enum Office::MsoTriState Loaded ) = 0;
      virtual HRESULT __stdcall get_DisplayAlerts (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayAlerts ) = 0;
      virtual HRESULT __stdcall put_DisplayAlerts (
        /*[in]*/ enum Office::MsoTriState DisplayAlerts ) = 0;
      virtual HRESULT __stdcall get_RegisteredInHKLM (
        /*[out,retval]*/ enum Office::MsoTriState * RegisteredInHKLM ) = 0;
};

struct __declspec(uuid("91493460-5a91-11cf-8700-00aa0060263b"))
AddIns : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    AddInPtr Item (
        VARIANT * Index );
    AddInPtr Add (
        _bstr_t FileName );
    HRESULT Remove (
        VARIANT * Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT * Index,
        /*[out,retval]*/ struct AddIn * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct AddIn * * Add ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT * Index ) = 0;
};

struct __declspec(uuid("91493463-5a91-11cf-8700-00aa0060263b"))
PresEvents : IUnknown
{};

struct __declspec(uuid("91493444-5a91-11cf-8700-00aa0060263b"))
Presentation;
    // [ default ] interface _Presentation
    // [ default, source ] interface PresEvents

struct __declspec(uuid("91493462-5a91-11cf-8700-00aa0060263b"))
Presentations : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _PresentationPtr Item (
        const _variant_t & Index );
    _PresentationPtr Add (
        enum Office::MsoTriState WithWindow );
    _PresentationPtr OpenOld (
        _bstr_t FileName,
        enum Office::MsoTriState ReadOnly,
        enum Office::MsoTriState Untitled,
        enum Office::MsoTriState WithWindow );
    _PresentationPtr Open (
        _bstr_t FileName,
        enum Office::MsoTriState ReadOnly,
        enum Office::MsoTriState Untitled,
        enum Office::MsoTriState WithWindow );
    HRESULT CheckOut (
        _bstr_t FileName );
    VARIANT_BOOL CanCheckOut (
        _bstr_t FileName );
    _PresentationPtr Open2007 (
        _bstr_t FileName,
        enum Office::MsoTriState ReadOnly,
        enum Office::MsoTriState Untitled,
        enum Office::MsoTriState WithWindow,
        enum Office::MsoTriState OpenAndRepair );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _Presentation * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum Office::MsoTriState WithWindow,
        /*[out,retval]*/ struct _Presentation * * Add ) = 0;
      virtual HRESULT __stdcall raw_OpenOld (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum Office::MsoTriState ReadOnly,
        /*[in]*/ enum Office::MsoTriState Untitled,
        /*[in]*/ enum Office::MsoTriState WithWindow,
        /*[out,retval]*/ struct _Presentation * * OpenOld ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum Office::MsoTriState ReadOnly,
        /*[in]*/ enum Office::MsoTriState Untitled,
        /*[in]*/ enum Office::MsoTriState WithWindow,
        /*[out,retval]*/ struct _Presentation * * Open ) = 0;
      virtual HRESULT __stdcall raw_CheckOut (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_CanCheckOut (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * CanCheckOut ) = 0;
      virtual HRESULT __stdcall raw_Open2007 (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum Office::MsoTriState ReadOnly,
        /*[in]*/ enum Office::MsoTriState Untitled,
        /*[in]*/ enum Office::MsoTriState WithWindow,
        /*[in]*/ enum Office::MsoTriState OpenAndRepair,
        /*[out,retval]*/ struct _Presentation * * Open2007 ) = 0;
};

struct __declspec(uuid("91493465-5a91-11cf-8700-00aa0060263b"))
Hyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum Office::MsoHyperlinkType Type;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetSubAddress,put=PutSubAddress))
    _bstr_t SubAddress;
    __declspec(property(get=GetEmailSubject,put=PutEmailSubject))
    _bstr_t EmailSubject;
    __declspec(property(get=GetScreenTip,put=PutScreenTip))
    _bstr_t ScreenTip;
    __declspec(property(get=GetTextToDisplay,put=PutTextToDisplay))
    _bstr_t TextToDisplay;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoHyperlinkType GetType ( );
    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t Address );
    _bstr_t GetSubAddress ( );
    void PutSubAddress (
        _bstr_t SubAddress );
    HRESULT AddToFavorites ( );
    _bstr_t GetEmailSubject ( );
    void PutEmailSubject (
        _bstr_t EmailSubject );
    _bstr_t GetScreenTip ( );
    void PutScreenTip (
        _bstr_t ScreenTip );
    _bstr_t GetTextToDisplay ( );
    void PutTextToDisplay (
        _bstr_t TextToDisplay );
    enum Office::MsoTriState GetShowAndReturn ( );
    void PutShowAndReturn (
        enum Office::MsoTriState ShowAndReturn );
    HRESULT Follow ( );
    HRESULT CreateNewDocument (
        _bstr_t FileName,
        enum Office::MsoTriState EditNow,
        enum Office::MsoTriState Overwrite );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoHyperlinkType * Type ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ BSTR * Address ) = 0;
      virtual HRESULT __stdcall put_Address (
        /*[in]*/ BSTR Address ) = 0;
      virtual HRESULT __stdcall get_SubAddress (
        /*[out,retval]*/ BSTR * SubAddress ) = 0;
      virtual HRESULT __stdcall put_SubAddress (
        /*[in]*/ BSTR SubAddress ) = 0;
      virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
      virtual HRESULT __stdcall get_EmailSubject (
        /*[out,retval]*/ BSTR * EmailSubject ) = 0;
      virtual HRESULT __stdcall put_EmailSubject (
        /*[in]*/ BSTR EmailSubject ) = 0;
      virtual HRESULT __stdcall get_ScreenTip (
        /*[out,retval]*/ BSTR * ScreenTip ) = 0;
      virtual HRESULT __stdcall put_ScreenTip (
        /*[in]*/ BSTR ScreenTip ) = 0;
      virtual HRESULT __stdcall get_TextToDisplay (
        /*[out,retval]*/ BSTR * TextToDisplay ) = 0;
      virtual HRESULT __stdcall put_TextToDisplay (
        /*[in]*/ BSTR TextToDisplay ) = 0;
      virtual HRESULT __stdcall get_ShowAndReturn (
        /*[out,retval]*/ enum Office::MsoTriState * ShowAndReturn ) = 0;
      virtual HRESULT __stdcall put_ShowAndReturn (
        /*[in]*/ enum Office::MsoTriState ShowAndReturn ) = 0;
      virtual HRESULT __stdcall raw_Follow ( ) = 0;
      virtual HRESULT __stdcall raw_CreateNewDocument (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum Office::MsoTriState EditNow,
        /*[in]*/ enum Office::MsoTriState Overwrite ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("91493464-5a91-11cf-8700-00aa0060263b"))
Hyperlinks : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HyperlinkPtr Item (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Hyperlink * * Item ) = 0;
};

struct __declspec(uuid("91493466-5a91-11cf-8700-00aa0060263b"))
PageSetup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFirstSlideNumber,put=PutFirstSlideNumber))
    int FirstSlideNumber;
    __declspec(property(get=GetSlideHeight,put=PutSlideHeight))
    float SlideHeight;
    __declspec(property(get=GetSlideWidth,put=PutSlideWidth))
    float SlideWidth;
    __declspec(property(get=GetSlideSize,put=PutSlideSize))
    enum PpSlideSizeType SlideSize;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    int GetFirstSlideNumber ( );
    void PutFirstSlideNumber (
        int FirstSlideNumber );
    float GetSlideHeight ( );
    void PutSlideHeight (
        float SlideHeight );
    float GetSlideWidth ( );
    void PutSlideWidth (
        float SlideWidth );
    enum PpSlideSizeType GetSlideSize ( );
    void PutSlideSize (
        enum PpSlideSizeType SlideSize );
    enum Office::MsoOrientation GetNotesOrientation ( );
    void PutNotesOrientation (
        enum Office::MsoOrientation NotesOrientation );
    enum Office::MsoOrientation GetSlideOrientation ( );
    void PutSlideOrientation (
        enum Office::MsoOrientation SlideOrientation );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_FirstSlideNumber (
        /*[out,retval]*/ int * FirstSlideNumber ) = 0;
      virtual HRESULT __stdcall put_FirstSlideNumber (
        /*[in]*/ int FirstSlideNumber ) = 0;
      virtual HRESULT __stdcall get_SlideHeight (
        /*[out,retval]*/ float * SlideHeight ) = 0;
      virtual HRESULT __stdcall put_SlideHeight (
        /*[in]*/ float SlideHeight ) = 0;
      virtual HRESULT __stdcall get_SlideWidth (
        /*[out,retval]*/ float * SlideWidth ) = 0;
      virtual HRESULT __stdcall put_SlideWidth (
        /*[in]*/ float SlideWidth ) = 0;
      virtual HRESULT __stdcall get_SlideSize (
        /*[out,retval]*/ enum PpSlideSizeType * SlideSize ) = 0;
      virtual HRESULT __stdcall put_SlideSize (
        /*[in]*/ enum PpSlideSizeType SlideSize ) = 0;
      virtual HRESULT __stdcall get_NotesOrientation (
        /*[out,retval]*/ enum Office::MsoOrientation * NotesOrientation ) = 0;
      virtual HRESULT __stdcall put_NotesOrientation (
        /*[in]*/ enum Office::MsoOrientation NotesOrientation ) = 0;
      virtual HRESULT __stdcall get_SlideOrientation (
        /*[out,retval]*/ enum Office::MsoOrientation * SlideOrientation ) = 0;
      virtual HRESULT __stdcall put_SlideOrientation (
        /*[in]*/ enum Office::MsoOrientation SlideOrientation ) = 0;
};

struct __declspec(uuid("91493468-5a91-11cf-8700-00aa0060263b"))
ExtraColors : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    Office::MsoRGBType Item (
        int Index );
    HRESULT Add (
        Office::MsoRGBType Type );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ Office::MsoRGBType * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ Office::MsoRGBType Type ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("9149346d-5a91-11cf-8700-00aa0060263b"))
SldEvents : IUnknown
{};

struct __declspec(uuid("91493445-5a91-11cf-8700-00aa0060263b"))
Slide;
    // [ default ] interface _Slide
    // [ default, source ] interface SldEvents

struct __declspec(uuid("91493470-5a91-11cf-8700-00aa0060263b"))
RGBColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    Office::MsoRGBType Get__RGB ( );
    void Put__RGB (
        Office::MsoRGBType __RGB );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get___RGB (
        /*[out,retval]*/ Office::MsoRGBType * __RGB ) = 0;
      virtual HRESULT __stdcall put___RGB (
        /*[in]*/ Office::MsoRGBType __RGB ) = 0;
};

struct __declspec(uuid("9149346f-5a91-11cf-8700-00aa0060263b"))
ColorScheme : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    RGBColorPtr Colors (
        enum PpColorSchemeIndex SchemeColor );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Colors (
        /*[in]*/ enum PpColorSchemeIndex SchemeColor,
        /*[out,retval]*/ struct RGBColor * * Colors ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("9149346e-5a91-11cf-8700-00aa0060263b"))
ColorSchemes : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorSchemePtr Item (
        int Index );
    ColorSchemePtr Add (
        struct ColorScheme * Scheme );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct ColorScheme * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct ColorScheme * Scheme,
        /*[out,retval]*/ struct ColorScheme * * Add ) = 0;
};

struct __declspec(uuid("91493472-5a91-11cf-8700-00aa0060263b"))
SoundEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetType,put=PutType))
    enum PpSoundEffectType Type;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    enum PpSoundEffectType GetType ( );
    void PutType (
        enum PpSoundEffectType Type );
    HRESULT ImportFromFile (
        _bstr_t FileName );
    HRESULT Play ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpSoundEffectType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum PpSoundEffectType Type ) = 0;
      virtual HRESULT __stdcall raw_ImportFromFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Play ( ) = 0;
};

struct __declspec(uuid("91493471-5a91-11cf-8700-00aa0060263b"))
SlideShowTransition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAdvanceTime,put=PutAdvanceTime))
    float AdvanceTime;
    __declspec(property(get=GetEntryEffect,put=PutEntryEffect))
    enum PpEntryEffect EntryEffect;
    __declspec(property(get=GetSoundEffect))
    SoundEffectPtr SoundEffect;
    __declspec(property(get=GetSpeed,put=PutSpeed))
    enum PpTransitionSpeed Speed;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoTriState GetAdvanceOnClick ( );
    void PutAdvanceOnClick (
        enum Office::MsoTriState AdvanceOnClick );
    enum Office::MsoTriState GetAdvanceOnTime ( );
    void PutAdvanceOnTime (
        enum Office::MsoTriState AdvanceOnTime );
    float GetAdvanceTime ( );
    void PutAdvanceTime (
        float AdvanceTime );
    enum PpEntryEffect GetEntryEffect ( );
    void PutEntryEffect (
        enum PpEntryEffect EntryEffect );
    enum Office::MsoTriState GetHidden ( );
    void PutHidden (
        enum Office::MsoTriState Hidden );
    enum Office::MsoTriState GetLoopSoundUntilNext ( );
    void PutLoopSoundUntilNext (
        enum Office::MsoTriState LoopSoundUntilNext );
    SoundEffectPtr GetSoundEffect ( );
    enum PpTransitionSpeed GetSpeed ( );
    void PutSpeed (
        enum PpTransitionSpeed Speed );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_AdvanceOnClick (
        /*[out,retval]*/ enum Office::MsoTriState * AdvanceOnClick ) = 0;
      virtual HRESULT __stdcall put_AdvanceOnClick (
        /*[in]*/ enum Office::MsoTriState AdvanceOnClick ) = 0;
      virtual HRESULT __stdcall get_AdvanceOnTime (
        /*[out,retval]*/ enum Office::MsoTriState * AdvanceOnTime ) = 0;
      virtual HRESULT __stdcall put_AdvanceOnTime (
        /*[in]*/ enum Office::MsoTriState AdvanceOnTime ) = 0;
      virtual HRESULT __stdcall get_AdvanceTime (
        /*[out,retval]*/ float * AdvanceTime ) = 0;
      virtual HRESULT __stdcall put_AdvanceTime (
        /*[in]*/ float AdvanceTime ) = 0;
      virtual HRESULT __stdcall get_EntryEffect (
        /*[out,retval]*/ enum PpEntryEffect * EntryEffect ) = 0;
      virtual HRESULT __stdcall put_EntryEffect (
        /*[in]*/ enum PpEntryEffect EntryEffect ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ enum Office::MsoTriState * Hidden ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ enum Office::MsoTriState Hidden ) = 0;
      virtual HRESULT __stdcall get_LoopSoundUntilNext (
        /*[out,retval]*/ enum Office::MsoTriState * LoopSoundUntilNext ) = 0;
      virtual HRESULT __stdcall put_LoopSoundUntilNext (
        /*[in]*/ enum Office::MsoTriState LoopSoundUntilNext ) = 0;
      virtual HRESULT __stdcall get_SoundEffect (
        /*[out,retval]*/ struct SoundEffect * * SoundEffect ) = 0;
      virtual HRESULT __stdcall get_Speed (
        /*[out,retval]*/ enum PpTransitionSpeed * Speed ) = 0;
      virtual HRESULT __stdcall put_Speed (
        /*[in]*/ enum PpTransitionSpeed Speed ) = 0;
};

struct __declspec(uuid("91493473-5a91-11cf-8700-00aa0060263b"))
SoundFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum PpSoundFormatType Type;
    __declspec(property(get=GetSourceFullName))
    _bstr_t SourceFullName;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Play ( );
    HRESULT Import (
        _bstr_t FileName );
    enum PpSoundFormatType Export (
        _bstr_t FileName );
    enum PpSoundFormatType GetType ( );
    _bstr_t GetSourceFullName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ enum PpSoundFormatType * Export ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpSoundFormatType * Type ) = 0;
      virtual HRESULT __stdcall get_SourceFullName (
        /*[out,retval]*/ BSTR * SourceFullName ) = 0;
};

struct __declspec(uuid("91493477-5a91-11cf-8700-00aa0060263b"))
PlaceholderFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum PpPlaceholderType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetContainedType))
    enum Office::MsoShapeType ContainedType;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpPlaceholderType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    enum Office::MsoShapeType GetContainedType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpPlaceholderType * Type ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_ContainedType (
        /*[out,retval]*/ enum Office::MsoShapeType * ContainedType ) = 0;
};

struct __declspec(uuid("9149347c-5a91-11cf-8700-00aa0060263b"))
Adjustments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    float Item[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    float GetItem (
        int Index );
    void PutItem (
        int Index,
        float Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ float * Val ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ int Index,
        /*[in]*/ float Val ) = 0;
};

struct __declspec(uuid("9149347d-5a91-11cf-8700-00aa0060263b"))
PictureFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT IncrementBrightness (
        float Increment );
    HRESULT IncrementContrast (
        float Increment );
    float GetBrightness ( );
    void PutBrightness (
        float Brightness );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType ColorType );
    float GetContrast ( );
    void PutContrast (
        float Contrast );
    float GetCropBottom ( );
    void PutCropBottom (
        float CropBottom );
    float GetCropLeft ( );
    void PutCropLeft (
        float CropLeft );
    float GetCropRight ( );
    void PutCropRight (
        float CropRight );
    float GetCropTop ( );
    void PutCropTop (
        float CropTop );
    Office::MsoRGBType GetTransparencyColor ( );
    void PutTransparencyColor (
        Office::MsoRGBType TransparencyColor );
    enum Office::MsoTriState GetTransparentBackground ( );
    void PutTransparentBackground (
        enum Office::MsoTriState TransparentBackground );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementBrightness (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementContrast (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_Brightness (
        /*[out,retval]*/ float * Brightness ) = 0;
      virtual HRESULT __stdcall put_Brightness (
        /*[in]*/ float Brightness ) = 0;
      virtual HRESULT __stdcall get_ColorType (
        /*[out,retval]*/ enum Office::MsoPictureColorType * ColorType ) = 0;
      virtual HRESULT __stdcall put_ColorType (
        /*[in]*/ enum Office::MsoPictureColorType ColorType ) = 0;
      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ float * Contrast ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ float Contrast ) = 0;
      virtual HRESULT __stdcall get_CropBottom (
        /*[out,retval]*/ float * CropBottom ) = 0;
      virtual HRESULT __stdcall put_CropBottom (
        /*[in]*/ float CropBottom ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ float * CropLeft ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ float CropLeft ) = 0;
      virtual HRESULT __stdcall get_CropRight (
        /*[out,retval]*/ float * CropRight ) = 0;
      virtual HRESULT __stdcall put_CropRight (
        /*[in]*/ float CropRight ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ float * CropTop ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ float CropTop ) = 0;
      virtual HRESULT __stdcall get_TransparencyColor (
        /*[out,retval]*/ Office::MsoRGBType * TransparencyColor ) = 0;
      virtual HRESULT __stdcall put_TransparencyColor (
        /*[in]*/ Office::MsoRGBType TransparencyColor ) = 0;
      virtual HRESULT __stdcall get_TransparentBackground (
        /*[out,retval]*/ enum Office::MsoTriState * TransparentBackground ) = 0;
      virtual HRESULT __stdcall put_TransparentBackground (
        /*[in]*/ enum Office::MsoTriState TransparentBackground ) = 0;
};

struct __declspec(uuid("9149347e-5a91-11cf-8700-00aa0060263b"))
FillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    int GradientVariant;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;
    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetGradientStops))
    Office::GradientStopsPtr GradientStops;
    __declspec(property(get=GetTextureOffsetX,put=PutTextureOffsetX))
    float TextureOffsetX;
    __declspec(property(get=GetTextureOffsetY,put=PutTextureOffsetY))
    float TextureOffsetY;
    __declspec(property(get=GetTextureHorizontalScale,put=PutTextureHorizontalScale))
    float TextureHorizontalScale;
    __declspec(property(get=GetTextureVerticalScale,put=PutTextureVerticalScale))
    float TextureVerticalScale;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Background ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        float Degree );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant );
    HRESULT UserPicture (
        _bstr_t PictureFile );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    int GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    Office::GradientStopsPtr GetGradientStops ( );
    float GetTextureOffsetX ( );
    void PutTextureOffsetX (
        float TextureOffsetX );
    float GetTextureOffsetY ( );
    void PutTextureOffsetY (
        float TextureOffsetY );
    enum Office::MsoTextureAlignment GetTextureAlignment ( );
    void PutTextureAlignment (
        enum Office::MsoTextureAlignment TextureAlignment );
    float GetTextureHorizontalScale ( );
    void PutTextureHorizontalScale (
        float HorizontalScale );
    float GetTextureVerticalScale ( );
    void PutTextureVerticalScale (
        float VerticalScale );
    enum Office::MsoTriState GetTextureTile ( );
    void PutTextureTile (
        enum Office::MsoTriState TextureTile );
    enum Office::MsoTriState GetRotateWithObject ( );
    void PutRotateWithObject (
        enum Office::MsoTriState RotateWithObject );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Background ( ) = 0;
      virtual HRESULT __stdcall raw_OneColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant,
        /*[in]*/ float Degree ) = 0;
      virtual HRESULT __stdcall raw_Patterned (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall raw_PresetGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant,
        /*[in]*/ enum Office::MsoPresetGradientType PresetGradientType ) = 0;
      virtual HRESULT __stdcall raw_PresetTextured (
        /*[in]*/ enum Office::MsoPresetTexture PresetTexture ) = 0;
      virtual HRESULT __stdcall raw_Solid ( ) = 0;
      virtual HRESULT __stdcall raw_TwoColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant ) = 0;
      virtual HRESULT __stdcall raw_UserPicture (
        /*[in]*/ BSTR PictureFile ) = 0;
      virtual HRESULT __stdcall raw_UserTextured (
        /*[in]*/ BSTR TextureFile ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_GradientColorType (
        /*[out,retval]*/ enum Office::MsoGradientColorType * GradientColorType ) = 0;
      virtual HRESULT __stdcall get_GradientDegree (
        /*[out,retval]*/ float * GradientDegree ) = 0;
      virtual HRESULT __stdcall get_GradientStyle (
        /*[out,retval]*/ enum Office::MsoGradientStyle * GradientStyle ) = 0;
      virtual HRESULT __stdcall get_GradientVariant (
        /*[out,retval]*/ int * GradientVariant ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * Pattern ) = 0;
      virtual HRESULT __stdcall get_PresetGradientType (
        /*[out,retval]*/ enum Office::MsoPresetGradientType * PresetGradientType ) = 0;
      virtual HRESULT __stdcall get_PresetTexture (
        /*[out,retval]*/ enum Office::MsoPresetTexture * PresetTexture ) = 0;
      virtual HRESULT __stdcall get_TextureName (
        /*[out,retval]*/ BSTR * TextureName ) = 0;
      virtual HRESULT __stdcall get_TextureType (
        /*[out,retval]*/ enum Office::MsoTextureType * TextureType ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoFillType * Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_GradientStops (
        /*[out,retval]*/ struct Office::GradientStops * * GradientStops ) = 0;
      virtual HRESULT __stdcall get_TextureOffsetX (
        /*[out,retval]*/ float * TextureOffsetX ) = 0;
      virtual HRESULT __stdcall put_TextureOffsetX (
        /*[in]*/ float TextureOffsetX ) = 0;
      virtual HRESULT __stdcall get_TextureOffsetY (
        /*[out,retval]*/ float * TextureOffsetY ) = 0;
      virtual HRESULT __stdcall put_TextureOffsetY (
        /*[in]*/ float TextureOffsetY ) = 0;
      virtual HRESULT __stdcall get_TextureAlignment (
        /*[out,retval]*/ enum Office::MsoTextureAlignment * TextureAlignment ) = 0;
      virtual HRESULT __stdcall put_TextureAlignment (
        /*[in]*/ enum Office::MsoTextureAlignment TextureAlignment ) = 0;
      virtual HRESULT __stdcall get_TextureHorizontalScale (
        /*[out,retval]*/ float * HorizontalScale ) = 0;
      virtual HRESULT __stdcall put_TextureHorizontalScale (
        /*[in]*/ float HorizontalScale ) = 0;
      virtual HRESULT __stdcall get_TextureVerticalScale (
        /*[out,retval]*/ float * VerticalScale ) = 0;
      virtual HRESULT __stdcall put_TextureVerticalScale (
        /*[in]*/ float VerticalScale ) = 0;
      virtual HRESULT __stdcall get_TextureTile (
        /*[out,retval]*/ enum Office::MsoTriState * TextureTile ) = 0;
      virtual HRESULT __stdcall put_TextureTile (
        /*[in]*/ enum Office::MsoTriState TextureTile ) = 0;
      virtual HRESULT __stdcall get_RotateWithObject (
        /*[out,retval]*/ enum Office::MsoTriState * RotateWithObject ) = 0;
      virtual HRESULT __stdcall put_RotateWithObject (
        /*[in]*/ enum Office::MsoTriState RotateWithObject ) = 0;
};

struct __declspec(uuid("9149347f-5a91-11cf-8700-00aa0060263b"))
LineFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetWeight,put=PutWeight))
    float Weight;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    enum Office::MsoArrowheadLength GetBeginArrowheadLength ( );
    void PutBeginArrowheadLength (
        enum Office::MsoArrowheadLength BeginArrowheadLength );
    enum Office::MsoArrowheadStyle GetBeginArrowheadStyle ( );
    void PutBeginArrowheadStyle (
        enum Office::MsoArrowheadStyle BeginArrowheadStyle );
    enum Office::MsoArrowheadWidth GetBeginArrowheadWidth ( );
    void PutBeginArrowheadWidth (
        enum Office::MsoArrowheadWidth BeginArrowheadWidth );
    enum Office::MsoLineDashStyle GetDashStyle ( );
    void PutDashStyle (
        enum Office::MsoLineDashStyle DashStyle );
    enum Office::MsoArrowheadLength GetEndArrowheadLength ( );
    void PutEndArrowheadLength (
        enum Office::MsoArrowheadLength EndArrowheadLength );
    enum Office::MsoArrowheadStyle GetEndArrowheadStyle ( );
    void PutEndArrowheadStyle (
        enum Office::MsoArrowheadStyle EndArrowheadStyle );
    enum Office::MsoArrowheadWidth GetEndArrowheadWidth ( );
    void PutEndArrowheadWidth (
        enum Office::MsoArrowheadWidth EndArrowheadWidth );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoPatternType GetPattern ( );
    void PutPattern (
        enum Office::MsoPatternType Pattern );
    enum Office::MsoLineStyle GetStyle ( );
    void PutStyle (
        enum Office::MsoLineStyle Style );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    float GetWeight ( );
    void PutWeight (
        float Weight );
    enum Office::MsoTriState GetInsetPen ( );
    void PutInsetPen (
        enum Office::MsoTriState InsetPen );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadLength (
        /*[out,retval]*/ enum Office::MsoArrowheadLength * BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadLength (
        /*[in]*/ enum Office::MsoArrowheadLength BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadStyle (
        /*[out,retval]*/ enum Office::MsoArrowheadStyle * BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadStyle (
        /*[in]*/ enum Office::MsoArrowheadStyle BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadWidth (
        /*[out,retval]*/ enum Office::MsoArrowheadWidth * BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadWidth (
        /*[in]*/ enum Office::MsoArrowheadWidth BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_DashStyle (
        /*[out,retval]*/ enum Office::MsoLineDashStyle * DashStyle ) = 0;
      virtual HRESULT __stdcall put_DashStyle (
        /*[in]*/ enum Office::MsoLineDashStyle DashStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadLength (
        /*[out,retval]*/ enum Office::MsoArrowheadLength * EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadLength (
        /*[in]*/ enum Office::MsoArrowheadLength EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadStyle (
        /*[out,retval]*/ enum Office::MsoArrowheadStyle * EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadStyle (
        /*[in]*/ enum Office::MsoArrowheadStyle EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadWidth (
        /*[out,retval]*/ enum Office::MsoArrowheadWidth * EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadWidth (
        /*[in]*/ enum Office::MsoArrowheadWidth EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * Pattern ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum Office::MsoLineStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum Office::MsoLineStyle Style ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ float * Weight ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ float Weight ) = 0;
      virtual HRESULT __stdcall get_InsetPen (
        /*[out,retval]*/ enum Office::MsoTriState * InsetPen ) = 0;
      virtual HRESULT __stdcall put_InsetPen (
        /*[in]*/ enum Office::MsoTriState InsetPen ) = 0;
};

struct __declspec(uuid("91493480-5a91-11cf-8700-00aa0060263b"))
ShadowFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    float OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    float OffsetY;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetBlur,put=PutBlur))
    float Blur;
    __declspec(property(get=GetSize,put=PutSize))
    float Size;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT IncrementOffsetX (
        float Increment );
    HRESULT IncrementOffsetY (
        float Increment );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoTriState GetObscured ( );
    void PutObscured (
        enum Office::MsoTriState Obscured );
    float GetOffsetX ( );
    void PutOffsetX (
        float OffsetX );
    float GetOffsetY ( );
    void PutOffsetY (
        float OffsetY );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoShadowType GetType ( );
    void PutType (
        enum Office::MsoShadowType Type );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    enum Office::MsoShadowStyle GetStyle ( );
    void PutStyle (
        enum Office::MsoShadowStyle ShadowStyle );
    float GetBlur ( );
    void PutBlur (
        float Blur );
    float GetSize ( );
    void PutSize (
        float Size );
    enum Office::MsoTriState GetRotateWithShape ( );
    void PutRotateWithShape (
        enum Office::MsoTriState RotateWithShape );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Obscured (
        /*[out,retval]*/ enum Office::MsoTriState * Obscured ) = 0;
      virtual HRESULT __stdcall put_Obscured (
        /*[in]*/ enum Office::MsoTriState Obscured ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ float * OffsetX ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ float OffsetX ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ float * OffsetY ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ float OffsetY ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShadowType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoShadowType Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum Office::MsoShadowStyle * ShadowStyle ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum Office::MsoShadowStyle ShadowStyle ) = 0;
      virtual HRESULT __stdcall get_Blur (
        /*[out,retval]*/ float * Blur ) = 0;
      virtual HRESULT __stdcall put_Blur (
        /*[in]*/ float Blur ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ float * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ float Size ) = 0;
      virtual HRESULT __stdcall get_RotateWithShape (
        /*[out,retval]*/ enum Office::MsoTriState * RotateWithShape ) = 0;
      virtual HRESULT __stdcall put_RotateWithShape (
        /*[in]*/ enum Office::MsoTriState RotateWithShape ) = 0;
};

struct __declspec(uuid("91493482-5a91-11cf-8700-00aa0060263b"))
TextEffectFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    float FontSize;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTracking,put=PutTracking))
    float Tracking;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT ToggleVerticalText ( );
    enum Office::MsoTextEffectAlignment GetAlignment ( );
    void PutAlignment (
        enum Office::MsoTextEffectAlignment Alignment );
    enum Office::MsoTriState GetFontBold ( );
    void PutFontBold (
        enum Office::MsoTriState FontBold );
    enum Office::MsoTriState GetFontItalic ( );
    void PutFontItalic (
        enum Office::MsoTriState FontItalic );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t FontName );
    float GetFontSize ( );
    void PutFontSize (
        float FontSize );
    enum Office::MsoTriState GetKernedPairs ( );
    void PutKernedPairs (
        enum Office::MsoTriState KernedPairs );
    enum Office::MsoTriState GetNormalizedHeight ( );
    void PutNormalizedHeight (
        enum Office::MsoTriState NormalizedHeight );
    enum Office::MsoPresetTextEffectShape GetPresetShape ( );
    void PutPresetShape (
        enum Office::MsoPresetTextEffectShape PresetShape );
    enum Office::MsoPresetTextEffect GetPresetTextEffect ( );
    void PutPresetTextEffect (
        enum Office::MsoPresetTextEffect Preset );
    enum Office::MsoTriState GetRotatedChars ( );
    void PutRotatedChars (
        enum Office::MsoTriState RotatedChars );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    float GetTracking ( );
    void PutTracking (
        float Tracking );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_ToggleVerticalText ( ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum Office::MsoTextEffectAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum Office::MsoTextEffectAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ enum Office::MsoTriState * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ enum Office::MsoTriState FontBold ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ enum Office::MsoTriState * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ enum Office::MsoTriState FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ float * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ float FontSize ) = 0;
      virtual HRESULT __stdcall get_KernedPairs (
        /*[out,retval]*/ enum Office::MsoTriState * KernedPairs ) = 0;
      virtual HRESULT __stdcall put_KernedPairs (
        /*[in]*/ enum Office::MsoTriState KernedPairs ) = 0;
      virtual HRESULT __stdcall get_NormalizedHeight (
        /*[out,retval]*/ enum Office::MsoTriState * NormalizedHeight ) = 0;
      virtual HRESULT __stdcall put_NormalizedHeight (
        /*[in]*/ enum Office::MsoTriState NormalizedHeight ) = 0;
      virtual HRESULT __stdcall get_PresetShape (
        /*[out,retval]*/ enum Office::MsoPresetTextEffectShape * PresetShape ) = 0;
      virtual HRESULT __stdcall put_PresetShape (
        /*[in]*/ enum Office::MsoPresetTextEffectShape PresetShape ) = 0;
      virtual HRESULT __stdcall get_PresetTextEffect (
        /*[out,retval]*/ enum Office::MsoPresetTextEffect * Preset ) = 0;
      virtual HRESULT __stdcall put_PresetTextEffect (
        /*[in]*/ enum Office::MsoPresetTextEffect Preset ) = 0;
      virtual HRESULT __stdcall get_RotatedChars (
        /*[out,retval]*/ enum Office::MsoTriState * RotatedChars ) = 0;
      virtual HRESULT __stdcall put_RotatedChars (
        /*[in]*/ enum Office::MsoTriState RotatedChars ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Tracking (
        /*[out,retval]*/ float * Tracking ) = 0;
      virtual HRESULT __stdcall put_Tracking (
        /*[in]*/ float Tracking ) = 0;
};

struct __declspec(uuid("91493483-5a91-11cf-8700-00aa0060263b"))
ThreeDFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPresetCamera))
    enum Office::MsoPresetCamera PresetCamera;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRotationZ,put=PutRotationZ))
    float RotationZ;
    __declspec(property(get=GetContourWidth,put=PutContourWidth))
    float ContourWidth;
    __declspec(property(get=GetContourColor))
    ColorFormatPtr ContourColor;
    __declspec(property(get=GetFieldOfView,put=PutFieldOfView))
    float FieldOfView;
    __declspec(property(get=GetLightAngle,put=PutLightAngle))
    float LightAngle;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetDepth,put=PutDepth))
    float Depth;
    __declspec(property(get=GetExtrusionColor))
    ColorFormatPtr ExtrusionColor;
    __declspec(property(get=GetPresetExtrusionDirection))
    enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection;
    __declspec(property(get=GetPresetThreeDFormat))
    enum Office::MsoPresetThreeDFormat PresetThreeDFormat;
    __declspec(property(get=GetRotationX,put=PutRotationX))
    float RotationX;
    __declspec(property(get=GetRotationY,put=PutRotationY))
    float RotationY;
    __declspec(property(get=GetZ,put=PutZ))
    float Z;
    __declspec(property(get=GetBevelTopInset,put=PutBevelTopInset))
    float BevelTopInset;
    __declspec(property(get=GetBevelTopDepth,put=PutBevelTopDepth))
    float BevelTopDepth;
    __declspec(property(get=GetBevelBottomInset,put=PutBevelBottomInset))
    float BevelBottomInset;
    __declspec(property(get=GetBevelBottomDepth,put=PutBevelBottomDepth))
    float BevelBottomDepth;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT IncrementRotationX (
        float Increment );
    HRESULT IncrementRotationY (
        float Increment );
    HRESULT ResetRotation ( );
    HRESULT SetThreeDFormat (
        enum Office::MsoPresetThreeDFormat PresetThreeDFormat );
    HRESULT SetExtrusionDirection (
        enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection );
    float GetDepth ( );
    void PutDepth (
        float Depth );
    ColorFormatPtr GetExtrusionColor ( );
    enum Office::MsoExtrusionColorType GetExtrusionColorType ( );
    void PutExtrusionColorType (
        enum Office::MsoExtrusionColorType ExtrusionColorType );
    enum Office::MsoTriState GetPerspective ( );
    void PutPerspective (
        enum Office::MsoTriState Perspective );
    enum Office::MsoPresetExtrusionDirection GetPresetExtrusionDirection ( );
    enum Office::MsoPresetLightingDirection GetPresetLightingDirection ( );
    void PutPresetLightingDirection (
        enum Office::MsoPresetLightingDirection PresetLightingDirection );
    enum Office::MsoPresetLightingSoftness GetPresetLightingSoftness ( );
    void PutPresetLightingSoftness (
        enum Office::MsoPresetLightingSoftness PresetLightingSoftness );
    enum Office::MsoPresetMaterial GetPresetMaterial ( );
    void PutPresetMaterial (
        enum Office::MsoPresetMaterial PresetMaterial );
    enum Office::MsoPresetThreeDFormat GetPresetThreeDFormat ( );
    float GetRotationX ( );
    void PutRotationX (
        float RotationX );
    float GetRotationY ( );
    void PutRotationY (
        float RotationY );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    HRESULT SetPresetCamera (
        enum Office::MsoPresetCamera PresetCamera );
    HRESULT IncrementRotationZ (
        float Increment );
    HRESULT IncrementRotationHorizontal (
        float Increment );
    HRESULT IncrementRotationVertical (
        float Increment );
    enum Office::MsoLightRigType GetPresetLighting ( );
    void PutPresetLighting (
        enum Office::MsoLightRigType PresetLightRigType );
    float GetZ ( );
    void PutZ (
        float Z );
    enum Office::MsoBevelType GetBevelTopType ( );
    void PutBevelTopType (
        enum Office::MsoBevelType BevelTopType );
    float GetBevelTopInset ( );
    void PutBevelTopInset (
        float BevelTopInset );
    float GetBevelTopDepth ( );
    void PutBevelTopDepth (
        float BevelTopDepth );
    enum Office::MsoBevelType GetBevelBottomType ( );
    void PutBevelBottomType (
        enum Office::MsoBevelType BevelBottomType );
    float GetBevelBottomInset ( );
    void PutBevelBottomInset (
        float BevelBottomInset );
    float GetBevelBottomDepth ( );
    void PutBevelBottomDepth (
        float BevelBottomDepth );
    enum Office::MsoPresetCamera GetPresetCamera ( );
    float GetRotationZ ( );
    void PutRotationZ (
        float RotationZ );
    float GetContourWidth ( );
    void PutContourWidth (
        float Width );
    ColorFormatPtr GetContourColor ( );
    float GetFieldOfView ( );
    void PutFieldOfView (
        float FOV );
    enum Office::MsoTriState GetProjectText ( );
    void PutProjectText (
        enum Office::MsoTriState ProjectText );
    float GetLightAngle ( );
    void PutLightAngle (
        float LightAngle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_ResetRotation ( ) = 0;
      virtual HRESULT __stdcall raw_SetThreeDFormat (
        /*[in]*/ enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall raw_SetExtrusionDirection (
        /*[in]*/ enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ float * Depth ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ float Depth ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColor (
        /*[out,retval]*/ struct ColorFormat * * ExtrusionColor ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColorType (
        /*[out,retval]*/ enum Office::MsoExtrusionColorType * ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall put_ExtrusionColorType (
        /*[in]*/ enum Office::MsoExtrusionColorType ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ enum Office::MsoTriState * Perspective ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ enum Office::MsoTriState Perspective ) = 0;
      virtual HRESULT __stdcall get_PresetExtrusionDirection (
        /*[out,retval]*/ enum Office::MsoPresetExtrusionDirection * PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingDirection (
        /*[out,retval]*/ enum Office::MsoPresetLightingDirection * PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall put_PresetLightingDirection (
        /*[in]*/ enum Office::MsoPresetLightingDirection PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingSoftness (
        /*[out,retval]*/ enum Office::MsoPresetLightingSoftness * PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall put_PresetLightingSoftness (
        /*[in]*/ enum Office::MsoPresetLightingSoftness PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall get_PresetMaterial (
        /*[out,retval]*/ enum Office::MsoPresetMaterial * PresetMaterial ) = 0;
      virtual HRESULT __stdcall put_PresetMaterial (
        /*[in]*/ enum Office::MsoPresetMaterial PresetMaterial ) = 0;
      virtual HRESULT __stdcall get_PresetThreeDFormat (
        /*[out,retval]*/ enum Office::MsoPresetThreeDFormat * PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall get_RotationX (
        /*[out,retval]*/ float * RotationX ) = 0;
      virtual HRESULT __stdcall put_RotationX (
        /*[in]*/ float RotationX ) = 0;
      virtual HRESULT __stdcall get_RotationY (
        /*[out,retval]*/ float * RotationY ) = 0;
      virtual HRESULT __stdcall put_RotationY (
        /*[in]*/ float RotationY ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall raw_SetPresetCamera (
        /*[in]*/ enum Office::MsoPresetCamera PresetCamera ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationZ (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationHorizontal (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationVertical (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_PresetLighting (
        /*[out,retval]*/ enum Office::MsoLightRigType * PresetLightRigType ) = 0;
      virtual HRESULT __stdcall put_PresetLighting (
        /*[in]*/ enum Office::MsoLightRigType PresetLightRigType ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ float * Z ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ float Z ) = 0;
      virtual HRESULT __stdcall get_BevelTopType (
        /*[out,retval]*/ enum Office::MsoBevelType * BevelTopType ) = 0;
      virtual HRESULT __stdcall put_BevelTopType (
        /*[in]*/ enum Office::MsoBevelType BevelTopType ) = 0;
      virtual HRESULT __stdcall get_BevelTopInset (
        /*[out,retval]*/ float * BevelTopInset ) = 0;
      virtual HRESULT __stdcall put_BevelTopInset (
        /*[in]*/ float BevelTopInset ) = 0;
      virtual HRESULT __stdcall get_BevelTopDepth (
        /*[out,retval]*/ float * BevelTopDepth ) = 0;
      virtual HRESULT __stdcall put_BevelTopDepth (
        /*[in]*/ float BevelTopDepth ) = 0;
      virtual HRESULT __stdcall get_BevelBottomType (
        /*[out,retval]*/ enum Office::MsoBevelType * BevelBottomType ) = 0;
      virtual HRESULT __stdcall put_BevelBottomType (
        /*[in]*/ enum Office::MsoBevelType BevelBottomType ) = 0;
      virtual HRESULT __stdcall get_BevelBottomInset (
        /*[out,retval]*/ float * BevelBottomInset ) = 0;
      virtual HRESULT __stdcall put_BevelBottomInset (
        /*[in]*/ float BevelBottomInset ) = 0;
      virtual HRESULT __stdcall get_BevelBottomDepth (
        /*[out,retval]*/ float * BevelBottomDepth ) = 0;
      virtual HRESULT __stdcall put_BevelBottomDepth (
        /*[in]*/ float BevelBottomDepth ) = 0;
      virtual HRESULT __stdcall get_PresetCamera (
        /*[out,retval]*/ enum Office::MsoPresetCamera * PresetCamera ) = 0;
      virtual HRESULT __stdcall get_RotationZ (
        /*[out,retval]*/ float * RotationZ ) = 0;
      virtual HRESULT __stdcall put_RotationZ (
        /*[in]*/ float RotationZ ) = 0;
      virtual HRESULT __stdcall get_ContourWidth (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_ContourWidth (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ContourColor (
        /*[out,retval]*/ struct ColorFormat * * ContourColor ) = 0;
      virtual HRESULT __stdcall get_FieldOfView (
        /*[out,retval]*/ float * FOV ) = 0;
      virtual HRESULT __stdcall put_FieldOfView (
        /*[in]*/ float FOV ) = 0;
      virtual HRESULT __stdcall get_ProjectText (
        /*[out,retval]*/ enum Office::MsoTriState * ProjectText ) = 0;
      virtual HRESULT __stdcall put_ProjectText (
        /*[in]*/ enum Office::MsoTriState ProjectText ) = 0;
      virtual HRESULT __stdcall get_LightAngle (
        /*[out,retval]*/ float * LightAngle ) = 0;
      virtual HRESULT __stdcall put_LightAngle (
        /*[in]*/ float LightAngle ) = 0;
};

struct __declspec(uuid("91493485-5a91-11cf-8700-00aa0060263b"))
CalloutFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoLength))
    enum Office::MsoTriState AutoLength;
    __declspec(property(get=GetDrop))
    float Drop;
    __declspec(property(get=GetDropType))
    enum Office::MsoCalloutDropType DropType;
    __declspec(property(get=GetGap,put=PutGap))
    float Gap;
    __declspec(property(get=GetLength))
    float Length;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AutomaticLength ( );
    HRESULT CustomDrop (
        float Drop );
    HRESULT CustomLength (
        float Length );
    HRESULT PresetDrop (
        enum Office::MsoCalloutDropType DropType );
    enum Office::MsoTriState GetAccent ( );
    void PutAccent (
        enum Office::MsoTriState Accent );
    enum Office::MsoCalloutAngleType GetAngle ( );
    void PutAngle (
        enum Office::MsoCalloutAngleType Angle );
    enum Office::MsoTriState GetAutoAttach ( );
    void PutAutoAttach (
        enum Office::MsoTriState AutoAttach );
    enum Office::MsoTriState GetAutoLength ( );
    enum Office::MsoTriState GetBorder ( );
    void PutBorder (
        enum Office::MsoTriState Border );
    float GetDrop ( );
    enum Office::MsoCalloutDropType GetDropType ( );
    float GetGap ( );
    void PutGap (
        float Gap );
    float GetLength ( );
    enum Office::MsoCalloutType GetType ( );
    void PutType (
        enum Office::MsoCalloutType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AutomaticLength ( ) = 0;
      virtual HRESULT __stdcall raw_CustomDrop (
        /*[in]*/ float Drop ) = 0;
      virtual HRESULT __stdcall raw_CustomLength (
        /*[in]*/ float Length ) = 0;
      virtual HRESULT __stdcall raw_PresetDrop (
        /*[in]*/ enum Office::MsoCalloutDropType DropType ) = 0;
      virtual HRESULT __stdcall get_Accent (
        /*[out,retval]*/ enum Office::MsoTriState * Accent ) = 0;
      virtual HRESULT __stdcall put_Accent (
        /*[in]*/ enum Office::MsoTriState Accent ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ enum Office::MsoCalloutAngleType * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ enum Office::MsoCalloutAngleType Angle ) = 0;
      virtual HRESULT __stdcall get_AutoAttach (
        /*[out,retval]*/ enum Office::MsoTriState * AutoAttach ) = 0;
      virtual HRESULT __stdcall put_AutoAttach (
        /*[in]*/ enum Office::MsoTriState AutoAttach ) = 0;
      virtual HRESULT __stdcall get_AutoLength (
        /*[out,retval]*/ enum Office::MsoTriState * AutoLength ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ enum Office::MsoTriState * Border ) = 0;
      virtual HRESULT __stdcall put_Border (
        /*[in]*/ enum Office::MsoTriState Border ) = 0;
      virtual HRESULT __stdcall get_Drop (
        /*[out,retval]*/ float * Drop ) = 0;
      virtual HRESULT __stdcall get_DropType (
        /*[out,retval]*/ enum Office::MsoCalloutDropType * DropType ) = 0;
      virtual HRESULT __stdcall get_Gap (
        /*[out,retval]*/ float * Gap ) = 0;
      virtual HRESULT __stdcall put_Gap (
        /*[in]*/ float Gap ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ float * Length ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoCalloutType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoCalloutType Type ) = 0;
};

struct __declspec(uuid("91493487-5a91-11cf-8700-00aa0060263b"))
ShapeNode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEditingType))
    enum Office::MsoEditingType EditingType;
    __declspec(property(get=GetPoints))
    _variant_t Points;
    __declspec(property(get=GetSegmentType))
    enum Office::MsoSegmentType SegmentType;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoEditingType GetEditingType ( );
    _variant_t GetPoints ( );
    enum Office::MsoSegmentType GetSegmentType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_EditingType (
        /*[out,retval]*/ enum Office::MsoEditingType * EditingType ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ VARIANT * Points ) = 0;
      virtual HRESULT __stdcall get_SegmentType (
        /*[out,retval]*/ enum Office::MsoSegmentType * SegmentType ) = 0;
};

struct __declspec(uuid("91493486-5a91-11cf-8700-00aa0060263b"))
ShapeNodes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapeNodePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete (
        int Index );
    HRESULT Insert (
        int Index,
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    HRESULT SetEditingType (
        int Index,
        enum Office::MsoEditingType EditingType );
    HRESULT SetPosition (
        int Index,
        float X1,
        float Y1 );
    HRESULT SetSegmentType (
        int Index,
        enum Office::MsoSegmentType SegmentType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeNode * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoSegmentType SegmentType,
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ float X2,
        /*[in]*/ float Y2,
        /*[in]*/ float X3,
        /*[in]*/ float Y3 ) = 0;
      virtual HRESULT __stdcall raw_SetEditingType (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoEditingType EditingType ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ int Index,
        /*[in]*/ float X1,
        /*[in]*/ float Y1 ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentType (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoSegmentType SegmentType ) = 0;
};

struct __declspec(uuid("91493489-5a91-11cf-8700-00aa0060263b"))
LinkFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSourceFullName,put=PutSourceFullName))
    _bstr_t SourceFullName;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    enum PpUpdateOption AutoUpdate;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSourceFullName ( );
    void PutSourceFullName (
        _bstr_t SourceFullName );
    enum PpUpdateOption GetAutoUpdate ( );
    void PutAutoUpdate (
        enum PpUpdateOption AutoUpdate );
    HRESULT Update ( );
    HRESULT BreakLink ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_SourceFullName (
        /*[out,retval]*/ BSTR * SourceFullName ) = 0;
      virtual HRESULT __stdcall put_SourceFullName (
        /*[in]*/ BSTR SourceFullName ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ enum PpUpdateOption * AutoUpdate ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ enum PpUpdateOption AutoUpdate ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall raw_BreakLink ( ) = 0;
};

struct __declspec(uuid("9149348a-5a91-11cf-8700-00aa0060263b"))
ObjectVerbs : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t Item (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * Item ) = 0;
};

struct __declspec(uuid("91493488-5a91-11cf-8700-00aa0060263b"))
OLEFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetObjectVerbs))
    ObjectVerbsPtr ObjectVerbs;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetFollowColors,put=PutFollowColors))
    enum PpFollowColors FollowColors;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ObjectVerbsPtr GetObjectVerbs ( );
    IDispatchPtr GetObject ( );
    _bstr_t GetProgID ( );
    enum PpFollowColors GetFollowColors ( );
    void PutFollowColors (
        enum PpFollowColors FollowColors );
    HRESULT DoVerb (
        int Index );
    HRESULT Activate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ObjectVerbs (
        /*[out,retval]*/ struct ObjectVerbs * * ObjectVerbs ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * ProgID ) = 0;
      virtual HRESULT __stdcall get_FollowColors (
        /*[out,retval]*/ enum PpFollowColors * FollowColors ) = 0;
      virtual HRESULT __stdcall put_FollowColors (
        /*[in]*/ enum PpFollowColors FollowColors ) = 0;
      virtual HRESULT __stdcall raw_DoVerb (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
};

struct __declspec(uuid("9149348d-5a91-11cf-8700-00aa0060263b"))
ActionSetting : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAction,put=PutAction))
    enum PpActionType Action;
    __declspec(property(get=GetActionVerb,put=PutActionVerb))
    _bstr_t ActionVerb;
    __declspec(property(get=GetRun,put=PutRun))
    _bstr_t Run;
    __declspec(property(get=GetSlideShowName,put=PutSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetSoundEffect))
    SoundEffectPtr SoundEffect;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpActionType GetAction ( );
    void PutAction (
        enum PpActionType Action );
    _bstr_t GetActionVerb ( );
    void PutActionVerb (
        _bstr_t ActionVerb );
    enum Office::MsoTriState GetAnimateAction ( );
    void PutAnimateAction (
        enum Office::MsoTriState AnimateAction );
    _bstr_t GetRun ( );
    void PutRun (
        _bstr_t Run );
    _bstr_t GetSlideShowName ( );
    void PutSlideShowName (
        _bstr_t SlideShowName );
    HyperlinkPtr GetHyperlink ( );
    SoundEffectPtr GetSoundEffect ( );
    enum Office::MsoTriState GetShowAndReturn ( );
    void PutShowAndReturn (
        enum Office::MsoTriState ShowAndReturn );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Action (
        /*[out,retval]*/ enum PpActionType * Action ) = 0;
      virtual HRESULT __stdcall put_Action (
        /*[in]*/ enum PpActionType Action ) = 0;
      virtual HRESULT __stdcall get_ActionVerb (
        /*[out,retval]*/ BSTR * ActionVerb ) = 0;
      virtual HRESULT __stdcall put_ActionVerb (
        /*[in]*/ BSTR ActionVerb ) = 0;
      virtual HRESULT __stdcall get_AnimateAction (
        /*[out,retval]*/ enum Office::MsoTriState * AnimateAction ) = 0;
      virtual HRESULT __stdcall put_AnimateAction (
        /*[in]*/ enum Office::MsoTriState AnimateAction ) = 0;
      virtual HRESULT __stdcall get_Run (
        /*[out,retval]*/ BSTR * Run ) = 0;
      virtual HRESULT __stdcall put_Run (
        /*[in]*/ BSTR Run ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall put_SlideShowName (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall get_Hyperlink (
        /*[out,retval]*/ struct Hyperlink * * Hyperlink ) = 0;
      virtual HRESULT __stdcall get_SoundEffect (
        /*[out,retval]*/ struct SoundEffect * * SoundEffect ) = 0;
      virtual HRESULT __stdcall get_ShowAndReturn (
        /*[out,retval]*/ enum Office::MsoTriState * ShowAndReturn ) = 0;
      virtual HRESULT __stdcall put_ShowAndReturn (
        /*[in]*/ enum Office::MsoTriState ShowAndReturn ) = 0;
};

struct __declspec(uuid("9149348c-5a91-11cf-8700-00aa0060263b"))
ActionSettings : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ActionSettingPtr Item (
        enum PpMouseActivation Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum PpMouseActivation Index,
        /*[out,retval]*/ struct ActionSetting * * Item ) = 0;
};

struct __declspec(uuid("9149348e-5a91-11cf-8700-00aa0060263b"))
PlaySettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActionVerb,put=PutActionVerb))
    _bstr_t ActionVerb;
    __declspec(property(get=GetStopAfterSlides,put=PutStopAfterSlides))
    int StopAfterSlides;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetActionVerb ( );
    void PutActionVerb (
        _bstr_t ActionVerb );
    enum Office::MsoTriState GetHideWhileNotPlaying ( );
    void PutHideWhileNotPlaying (
        enum Office::MsoTriState HideWhileNotPlaying );
    enum Office::MsoTriState GetLoopUntilStopped ( );
    void PutLoopUntilStopped (
        enum Office::MsoTriState LoopUntilStopped );
    enum Office::MsoTriState GetPlayOnEntry ( );
    void PutPlayOnEntry (
        enum Office::MsoTriState PlayOnEntry );
    enum Office::MsoTriState GetRewindMovie ( );
    void PutRewindMovie (
        enum Office::MsoTriState RewindMovie );
    enum Office::MsoTriState GetPauseAnimation ( );
    void PutPauseAnimation (
        enum Office::MsoTriState PauseAnimation );
    int GetStopAfterSlides ( );
    void PutStopAfterSlides (
        int StopAfterSlides );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ActionVerb (
        /*[out,retval]*/ BSTR * ActionVerb ) = 0;
      virtual HRESULT __stdcall put_ActionVerb (
        /*[in]*/ BSTR ActionVerb ) = 0;
      virtual HRESULT __stdcall get_HideWhileNotPlaying (
        /*[out,retval]*/ enum Office::MsoTriState * HideWhileNotPlaying ) = 0;
      virtual HRESULT __stdcall put_HideWhileNotPlaying (
        /*[in]*/ enum Office::MsoTriState HideWhileNotPlaying ) = 0;
      virtual HRESULT __stdcall get_LoopUntilStopped (
        /*[out,retval]*/ enum Office::MsoTriState * LoopUntilStopped ) = 0;
      virtual HRESULT __stdcall put_LoopUntilStopped (
        /*[in]*/ enum Office::MsoTriState LoopUntilStopped ) = 0;
      virtual HRESULT __stdcall get_PlayOnEntry (
        /*[out,retval]*/ enum Office::MsoTriState * PlayOnEntry ) = 0;
      virtual HRESULT __stdcall put_PlayOnEntry (
        /*[in]*/ enum Office::MsoTriState PlayOnEntry ) = 0;
      virtual HRESULT __stdcall get_RewindMovie (
        /*[out,retval]*/ enum Office::MsoTriState * RewindMovie ) = 0;
      virtual HRESULT __stdcall put_RewindMovie (
        /*[in]*/ enum Office::MsoTriState RewindMovie ) = 0;
      virtual HRESULT __stdcall get_PauseAnimation (
        /*[out,retval]*/ enum Office::MsoTriState * PauseAnimation ) = 0;
      virtual HRESULT __stdcall put_PauseAnimation (
        /*[in]*/ enum Office::MsoTriState PauseAnimation ) = 0;
      virtual HRESULT __stdcall get_StopAfterSlides (
        /*[out,retval]*/ int * StopAfterSlides ) = 0;
      virtual HRESULT __stdcall put_StopAfterSlides (
        /*[in]*/ int StopAfterSlides ) = 0;
};

struct __declspec(uuid("9149348b-5a91-11cf-8700-00aa0060263b"))
AnimationSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChartUnitEffect,put=PutChartUnitEffect))
    enum PpChartUnitEffect ChartUnitEffect;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDimColor))
    ColorFormatPtr DimColor;
    __declspec(property(get=GetSoundEffect))
    SoundEffectPtr SoundEffect;
    __declspec(property(get=GetEntryEffect,put=PutEntryEffect))
    enum PpEntryEffect EntryEffect;
    __declspec(property(get=GetAfterEffect,put=PutAfterEffect))
    enum PpAfterEffect AfterEffect;
    __declspec(property(get=GetAnimationOrder,put=PutAnimationOrder))
    int AnimationOrder;
    __declspec(property(get=GetAdvanceMode,put=PutAdvanceMode))
    enum PpAdvanceMode AdvanceMode;
    __declspec(property(get=GetAdvanceTime,put=PutAdvanceTime))
    float AdvanceTime;
    __declspec(property(get=GetPlaySettings))
    PlaySettingsPtr PlaySettings;
    __declspec(property(get=GetTextLevelEffect,put=PutTextLevelEffect))
    enum PpTextLevelEffect TextLevelEffect;
    __declspec(property(get=GetTextUnitEffect,put=PutTextUnitEffect))
    enum PpTextUnitEffect TextUnitEffect;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetDimColor ( );
    SoundEffectPtr GetSoundEffect ( );
    enum PpEntryEffect GetEntryEffect ( );
    void PutEntryEffect (
        enum PpEntryEffect EntryEffect );
    enum PpAfterEffect GetAfterEffect ( );
    void PutAfterEffect (
        enum PpAfterEffect AfterEffect );
    int GetAnimationOrder ( );
    void PutAnimationOrder (
        int AnimationOrder );
    enum PpAdvanceMode GetAdvanceMode ( );
    void PutAdvanceMode (
        enum PpAdvanceMode AdvanceMode );
    float GetAdvanceTime ( );
    void PutAdvanceTime (
        float AdvanceTime );
    PlaySettingsPtr GetPlaySettings ( );
    enum PpTextLevelEffect GetTextLevelEffect ( );
    void PutTextLevelEffect (
        enum PpTextLevelEffect TextLevelEffect );
    enum PpTextUnitEffect GetTextUnitEffect ( );
    void PutTextUnitEffect (
        enum PpTextUnitEffect TextUnitEffect );
    enum Office::MsoTriState GetAnimate ( );
    void PutAnimate (
        enum Office::MsoTriState Animate );
    enum Office::MsoTriState GetAnimateBackground ( );
    void PutAnimateBackground (
        enum Office::MsoTriState AnimateBackground );
    enum Office::MsoTriState GetAnimateTextInReverse ( );
    void PutAnimateTextInReverse (
        enum Office::MsoTriState AnimateTextInReverse );
    enum PpChartUnitEffect GetChartUnitEffect ( );
    void PutChartUnitEffect (
        enum PpChartUnitEffect ChartUnitEffect );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_DimColor (
        /*[out,retval]*/ struct ColorFormat * * DimColor ) = 0;
      virtual HRESULT __stdcall get_SoundEffect (
        /*[out,retval]*/ struct SoundEffect * * SoundEffect ) = 0;
      virtual HRESULT __stdcall get_EntryEffect (
        /*[out,retval]*/ enum PpEntryEffect * EntryEffect ) = 0;
      virtual HRESULT __stdcall put_EntryEffect (
        /*[in]*/ enum PpEntryEffect EntryEffect ) = 0;
      virtual HRESULT __stdcall get_AfterEffect (
        /*[out,retval]*/ enum PpAfterEffect * AfterEffect ) = 0;
      virtual HRESULT __stdcall put_AfterEffect (
        /*[in]*/ enum PpAfterEffect AfterEffect ) = 0;
      virtual HRESULT __stdcall get_AnimationOrder (
        /*[out,retval]*/ int * AnimationOrder ) = 0;
      virtual HRESULT __stdcall put_AnimationOrder (
        /*[in]*/ int AnimationOrder ) = 0;
      virtual HRESULT __stdcall get_AdvanceMode (
        /*[out,retval]*/ enum PpAdvanceMode * AdvanceMode ) = 0;
      virtual HRESULT __stdcall put_AdvanceMode (
        /*[in]*/ enum PpAdvanceMode AdvanceMode ) = 0;
      virtual HRESULT __stdcall get_AdvanceTime (
        /*[out,retval]*/ float * AdvanceTime ) = 0;
      virtual HRESULT __stdcall put_AdvanceTime (
        /*[in]*/ float AdvanceTime ) = 0;
      virtual HRESULT __stdcall get_PlaySettings (
        /*[out,retval]*/ struct PlaySettings * * PlaySettings ) = 0;
      virtual HRESULT __stdcall get_TextLevelEffect (
        /*[out,retval]*/ enum PpTextLevelEffect * TextLevelEffect ) = 0;
      virtual HRESULT __stdcall put_TextLevelEffect (
        /*[in]*/ enum PpTextLevelEffect TextLevelEffect ) = 0;
      virtual HRESULT __stdcall get_TextUnitEffect (
        /*[out,retval]*/ enum PpTextUnitEffect * TextUnitEffect ) = 0;
      virtual HRESULT __stdcall put_TextUnitEffect (
        /*[in]*/ enum PpTextUnitEffect TextUnitEffect ) = 0;
      virtual HRESULT __stdcall get_Animate (
        /*[out,retval]*/ enum Office::MsoTriState * Animate ) = 0;
      virtual HRESULT __stdcall put_Animate (
        /*[in]*/ enum Office::MsoTriState Animate ) = 0;
      virtual HRESULT __stdcall get_AnimateBackground (
        /*[out,retval]*/ enum Office::MsoTriState * AnimateBackground ) = 0;
      virtual HRESULT __stdcall put_AnimateBackground (
        /*[in]*/ enum Office::MsoTriState AnimateBackground ) = 0;
      virtual HRESULT __stdcall get_AnimateTextInReverse (
        /*[out,retval]*/ enum Office::MsoTriState * AnimateTextInReverse ) = 0;
      virtual HRESULT __stdcall put_AnimateTextInReverse (
        /*[in]*/ enum Office::MsoTriState AnimateTextInReverse ) = 0;
      virtual HRESULT __stdcall get_ChartUnitEffect (
        /*[out,retval]*/ enum PpChartUnitEffect * ChartUnitEffect ) = 0;
      virtual HRESULT __stdcall put_ChartUnitEffect (
        /*[in]*/ enum PpChartUnitEffect ChartUnitEffect ) = 0;
};

struct __declspec(uuid("91493492-5a91-11cf-8700-00aa0060263b"))
RulerLevel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFirstMargin,put=PutFirstMargin))
    float FirstMargin;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    float LeftMargin;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    float GetFirstMargin ( );
    void PutFirstMargin (
        float FirstMargin );
    float GetLeftMargin ( );
    void PutLeftMargin (
        float LeftMargin );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_FirstMargin (
        /*[out,retval]*/ float * FirstMargin ) = 0;
      virtual HRESULT __stdcall put_FirstMargin (
        /*[in]*/ float FirstMargin ) = 0;
      virtual HRESULT __stdcall get_LeftMargin (
        /*[out,retval]*/ float * LeftMargin ) = 0;
      virtual HRESULT __stdcall put_LeftMargin (
        /*[in]*/ float LeftMargin ) = 0;
};

struct __declspec(uuid("91493491-5a91-11cf-8700-00aa0060263b"))
RulerLevels : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    RulerLevelPtr Item (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct RulerLevel * * Item ) = 0;
};

struct __declspec(uuid("91493494-5a91-11cf-8700-00aa0060263b"))
TabStop : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType,put=PutType))
    enum PpTabStopType Type;
    __declspec(property(get=GetPosition,put=PutPosition))
    float Position;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpTabStopType GetType ( );
    void PutType (
        enum PpTabStopType Type );
    float GetPosition ( );
    void PutPosition (
        float Position );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpTabStopType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum PpTabStopType Type ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ float * Position ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ float Position ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("91493493-5a91-11cf-8700-00aa0060263b"))
TabStops : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDefaultSpacing,put=PutDefaultSpacing))
    float DefaultSpacing;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    TabStopPtr Item (
        int Index );
    float GetDefaultSpacing ( );
    void PutDefaultSpacing (
        float DefaultSpacing );
    TabStopPtr Add (
        enum PpTabStopType Type,
        float Position );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct TabStop * * Item ) = 0;
      virtual HRESULT __stdcall get_DefaultSpacing (
        /*[out,retval]*/ float * DefaultSpacing ) = 0;
      virtual HRESULT __stdcall put_DefaultSpacing (
        /*[in]*/ float DefaultSpacing ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum PpTabStopType Type,
        /*[in]*/ float Position,
        /*[out,retval]*/ struct TabStop * * Add ) = 0;
};

struct __declspec(uuid("91493490-5a91-11cf-8700-00aa0060263b"))
Ruler : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetTabStops))
    TabStopsPtr TabStops;
    __declspec(property(get=GetLevels))
    RulerLevelsPtr Levels;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    TabStopsPtr GetTabStops ( );
    RulerLevelsPtr GetLevels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_TabStops (
        /*[out,retval]*/ struct TabStops * * TabStops ) = 0;
      virtual HRESULT __stdcall get_Levels (
        /*[out,retval]*/ struct RulerLevels * * Levels ) = 0;
};

struct __declspec(uuid("91493495-5a91-11cf-8700-00aa0060263b"))
Font : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNameFarEast,put=PutNameFarEast))
    _bstr_t NameFarEast;
    __declspec(property(get=GetNameAscii,put=PutNameAscii))
    _bstr_t NameAscii;
    __declspec(property(get=GetNameOther,put=PutNameOther))
    _bstr_t NameOther;
    __declspec(property(get=GetNameComplexScript,put=PutNameComplexScript))
    _bstr_t NameComplexScript;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetColor))
    ColorFormatPtr Color;
    __declspec(property(get=GetBaselineOffset,put=PutBaselineOffset))
    float BaselineOffset;
    __declspec(property(get=GetEmbedded))
    enum Office::MsoTriState Embedded;
    __declspec(property(get=GetEmbeddable))
    enum Office::MsoTriState Embeddable;
    __declspec(property(get=GetSize,put=PutSize))
    float Size;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetColor ( );
    enum Office::MsoTriState GetBold ( );
    void PutBold (
        enum Office::MsoTriState Bold );
    enum Office::MsoTriState GetItalic ( );
    void PutItalic (
        enum Office::MsoTriState Italic );
    enum Office::MsoTriState GetShadow ( );
    void PutShadow (
        enum Office::MsoTriState Shadow );
    enum Office::MsoTriState GetEmboss ( );
    void PutEmboss (
        enum Office::MsoTriState Emboss );
    enum Office::MsoTriState GetUnderline ( );
    void PutUnderline (
        enum Office::MsoTriState Underline );
    enum Office::MsoTriState GetSubscript ( );
    void PutSubscript (
        enum Office::MsoTriState Subscript );
    enum Office::MsoTriState GetSuperscript ( );
    void PutSuperscript (
        enum Office::MsoTriState Superscript );
    float GetBaselineOffset ( );
    void PutBaselineOffset (
        float BaselineOffset );
    enum Office::MsoTriState GetEmbedded ( );
    enum Office::MsoTriState GetEmbeddable ( );
    float GetSize ( );
    void PutSize (
        float Size );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetNameFarEast ( );
    void PutNameFarEast (
        _bstr_t NameFarEast );
    _bstr_t GetNameAscii ( );
    void PutNameAscii (
        _bstr_t NameAscii );
    enum Office::MsoTriState GetAutoRotateNumbers ( );
    void PutAutoRotateNumbers (
        enum Office::MsoTriState AutoRotateNumbers );
    _bstr_t GetNameOther ( );
    void PutNameOther (
        _bstr_t NameOther );
    _bstr_t GetNameComplexScript ( );
    void PutNameComplexScript (
        _bstr_t NameComplexScript );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct ColorFormat * * Color ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ enum Office::MsoTriState * Bold ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ enum Office::MsoTriState Bold ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ enum Office::MsoTriState * Italic ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ enum Office::MsoTriState Italic ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ enum Office::MsoTriState * Shadow ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ enum Office::MsoTriState Shadow ) = 0;
      virtual HRESULT __stdcall get_Emboss (
        /*[out,retval]*/ enum Office::MsoTriState * Emboss ) = 0;
      virtual HRESULT __stdcall put_Emboss (
        /*[in]*/ enum Office::MsoTriState Emboss ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ enum Office::MsoTriState * Underline ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ enum Office::MsoTriState Underline ) = 0;
      virtual HRESULT __stdcall get_Subscript (
        /*[out,retval]*/ enum Office::MsoTriState * Subscript ) = 0;
      virtual HRESULT __stdcall put_Subscript (
        /*[in]*/ enum Office::MsoTriState Subscript ) = 0;
      virtual HRESULT __stdcall get_Superscript (
        /*[out,retval]*/ enum Office::MsoTriState * Superscript ) = 0;
      virtual HRESULT __stdcall put_Superscript (
        /*[in]*/ enum Office::MsoTriState Superscript ) = 0;
      virtual HRESULT __stdcall get_BaselineOffset (
        /*[out,retval]*/ float * BaselineOffset ) = 0;
      virtual HRESULT __stdcall put_BaselineOffset (
        /*[in]*/ float BaselineOffset ) = 0;
      virtual HRESULT __stdcall get_Embedded (
        /*[out,retval]*/ enum Office::MsoTriState * Embedded ) = 0;
      virtual HRESULT __stdcall get_Embeddable (
        /*[out,retval]*/ enum Office::MsoTriState * Embeddable ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ float * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ float Size ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_NameFarEast (
        /*[out,retval]*/ BSTR * NameFarEast ) = 0;
      virtual HRESULT __stdcall put_NameFarEast (
        /*[in]*/ BSTR NameFarEast ) = 0;
      virtual HRESULT __stdcall get_NameAscii (
        /*[out,retval]*/ BSTR * NameAscii ) = 0;
      virtual HRESULT __stdcall put_NameAscii (
        /*[in]*/ BSTR NameAscii ) = 0;
      virtual HRESULT __stdcall get_AutoRotateNumbers (
        /*[out,retval]*/ enum Office::MsoTriState * AutoRotateNumbers ) = 0;
      virtual HRESULT __stdcall put_AutoRotateNumbers (
        /*[in]*/ enum Office::MsoTriState AutoRotateNumbers ) = 0;
      virtual HRESULT __stdcall get_NameOther (
        /*[out,retval]*/ BSTR * NameOther ) = 0;
      virtual HRESULT __stdcall put_NameOther (
        /*[in]*/ BSTR NameOther ) = 0;
      virtual HRESULT __stdcall get_NameComplexScript (
        /*[out,retval]*/ BSTR * NameComplexScript ) = 0;
      virtual HRESULT __stdcall put_NameComplexScript (
        /*[in]*/ BSTR NameComplexScript ) = 0;
};

struct __declspec(uuid("91493467-5a91-11cf-8700-00aa0060263b"))
Fonts : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    FontPtr Item (
        const _variant_t & Index );
    HRESULT Replace (
        _bstr_t Original,
        _bstr_t Replacement );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Font * * Item ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR Original,
        /*[in]*/ BSTR Replacement ) = 0;
};

struct __declspec(uuid("9149349c-5a91-11cf-8700-00aa0060263b"))
HeaderFooter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFormat,put=PutFormat))
    enum PpDateTimeFormat Format;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    enum Office::MsoTriState GetUseFormat ( );
    void PutUseFormat (
        enum Office::MsoTriState UseFormat );
    enum PpDateTimeFormat GetFormat ( );
    void PutFormat (
        enum PpDateTimeFormat Format );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_UseFormat (
        /*[out,retval]*/ enum Office::MsoTriState * UseFormat ) = 0;
      virtual HRESULT __stdcall put_UseFormat (
        /*[in]*/ enum Office::MsoTriState UseFormat ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ enum PpDateTimeFormat * Format ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ enum PpDateTimeFormat Format ) = 0;
};

struct __declspec(uuid("91493474-5a91-11cf-8700-00aa0060263b"))
HeadersFooters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDateAndTime))
    HeaderFooterPtr DateAndTime;
    __declspec(property(get=GetSlideNumber))
    HeaderFooterPtr SlideNumber;
    __declspec(property(get=GetHeader))
    HeaderFooterPtr Header;
    __declspec(property(get=GetFooter))
    HeaderFooterPtr Footer;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HeaderFooterPtr GetDateAndTime ( );
    HeaderFooterPtr GetSlideNumber ( );
    HeaderFooterPtr GetHeader ( );
    HeaderFooterPtr GetFooter ( );
    enum Office::MsoTriState GetDisplayOnTitleSlide ( );
    void PutDisplayOnTitleSlide (
        enum Office::MsoTriState DisplayOnTitleSlide );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_DateAndTime (
        /*[out,retval]*/ struct HeaderFooter * * DateAndTime ) = 0;
      virtual HRESULT __stdcall get_SlideNumber (
        /*[out,retval]*/ struct HeaderFooter * * SlideNumber ) = 0;
      virtual HRESULT __stdcall get_Header (
        /*[out,retval]*/ struct HeaderFooter * * Header ) = 0;
      virtual HRESULT __stdcall get_Footer (
        /*[out,retval]*/ struct HeaderFooter * * Footer ) = 0;
      virtual HRESULT __stdcall get_DisplayOnTitleSlide (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayOnTitleSlide ) = 0;
      virtual HRESULT __stdcall put_DisplayOnTitleSlide (
        /*[in]*/ enum Office::MsoTriState DisplayOnTitleSlide ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("914934b9-5a91-11cf-8700-00aa0060263b"))
Tags : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t Item (
        _bstr_t Name );
    HRESULT Add (
        _bstr_t Name,
        _bstr_t Value );
    HRESULT Delete (
        _bstr_t Name );
    HRESULT AddBinary (
        _bstr_t Name,
        _bstr_t FilePath );
    long BinaryValue (
        _bstr_t Name );
    _bstr_t Name (
        int Index );
    _bstr_t Value (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_AddBinary (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_BinaryValue (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * BinaryValue ) = 0;
      virtual HRESULT __stdcall raw_Name (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_Value (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("914934be-5a91-11cf-8700-00aa0060263b"))
MouseTracker : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnTrack (
        float X,
        float Y );
    HRESULT EndTrack (
        float X,
        float Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnTrack (
        /*[in]*/ float X,
        /*[in]*/ float Y ) = 0;
      virtual HRESULT __stdcall raw_EndTrack (
        /*[in]*/ float X,
        /*[in]*/ float Y ) = 0;
};

struct __declspec(uuid("91493459-5a91-11cf-8700-00aa0060263b"))
SlideShowView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentShowPosition))
    int CurrentShowPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetZoom))
    int Zoom;
    __declspec(property(get=GetSlide))
    _SlidePtr Slide;
    __declspec(property(get=GetPointerType,put=PutPointerType))
    enum PpSlideShowPointerType PointerType;
    __declspec(property(get=GetState,put=PutState))
    enum PpSlideShowState State;
    __declspec(property(get=GetPresentationElapsedTime))
    float PresentationElapsedTime;
    __declspec(property(get=GetSlideElapsedTime,put=PutSlideElapsedTime))
    float SlideElapsedTime;
    __declspec(property(get=GetLastSlideViewed))
    _SlidePtr LastSlideViewed;
    __declspec(property(get=GetAdvanceMode))
    enum PpSlideShowAdvanceMode AdvanceMode;
    __declspec(property(get=GetPointerColor))
    ColorFormatPtr PointerColor;
    __declspec(property(get=GetIsNamedShow))
    enum Office::MsoTriState IsNamedShow;
    __declspec(property(get=GetSlideShowName))
    _bstr_t SlideShowName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    int GetZoom ( );
    _SlidePtr GetSlide ( );
    enum PpSlideShowPointerType GetPointerType ( );
    void PutPointerType (
        enum PpSlideShowPointerType PointerType );
    enum PpSlideShowState GetState ( );
    void PutState (
        enum PpSlideShowState State );
    enum Office::MsoTriState GetAcceleratorsEnabled ( );
    void PutAcceleratorsEnabled (
        enum Office::MsoTriState AcceleratorsEnabled );
    float GetPresentationElapsedTime ( );
    float GetSlideElapsedTime ( );
    void PutSlideElapsedTime (
        float SlideElapsedTime );
    _SlidePtr GetLastSlideViewed ( );
    enum PpSlideShowAdvanceMode GetAdvanceMode ( );
    ColorFormatPtr GetPointerColor ( );
    enum Office::MsoTriState GetIsNamedShow ( );
    _bstr_t GetSlideShowName ( );
    HRESULT DrawLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    HRESULT EraseDrawing ( );
    HRESULT First ( );
    HRESULT Last ( );
    HRESULT Next ( );
    HRESULT Previous ( );
    HRESULT GotoSlide (
        int Index,
        enum Office::MsoTriState ResetSlide );
    HRESULT GotoNamedShow (
        _bstr_t SlideShowName );
    HRESULT EndNamedShow ( );
    HRESULT ResetSlideTime ( );
    HRESULT Exit ( );
    HRESULT InstallTracker (
        struct MouseTracker * pTracker,
        enum Office::MsoTriState Presenter );
    int GetCurrentShowPosition ( );
    HRESULT GotoClick (
        int Index );
    int GetClickIndex ( );
    int GetClickCount ( );
    VARIANT_BOOL FirstAnimationIsAutomatic ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ int * Zoom ) = 0;
      virtual HRESULT __stdcall get_Slide (
        /*[out,retval]*/ struct _Slide * * Slide ) = 0;
      virtual HRESULT __stdcall get_PointerType (
        /*[out,retval]*/ enum PpSlideShowPointerType * PointerType ) = 0;
      virtual HRESULT __stdcall put_PointerType (
        /*[in]*/ enum PpSlideShowPointerType PointerType ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum PpSlideShowState * State ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum PpSlideShowState State ) = 0;
      virtual HRESULT __stdcall get_AcceleratorsEnabled (
        /*[out,retval]*/ enum Office::MsoTriState * AcceleratorsEnabled ) = 0;
      virtual HRESULT __stdcall put_AcceleratorsEnabled (
        /*[in]*/ enum Office::MsoTriState AcceleratorsEnabled ) = 0;
      virtual HRESULT __stdcall get_PresentationElapsedTime (
        /*[out,retval]*/ float * PresentationElapsedTime ) = 0;
      virtual HRESULT __stdcall get_SlideElapsedTime (
        /*[out,retval]*/ float * SlideElapsedTime ) = 0;
      virtual HRESULT __stdcall put_SlideElapsedTime (
        /*[in]*/ float SlideElapsedTime ) = 0;
      virtual HRESULT __stdcall get_LastSlideViewed (
        /*[out,retval]*/ struct _Slide * * LastSlideViewed ) = 0;
      virtual HRESULT __stdcall get_AdvanceMode (
        /*[out,retval]*/ enum PpSlideShowAdvanceMode * AdvanceMode ) = 0;
      virtual HRESULT __stdcall get_PointerColor (
        /*[out,retval]*/ struct ColorFormat * * PointerColor ) = 0;
      virtual HRESULT __stdcall get_IsNamedShow (
        /*[out,retval]*/ enum Office::MsoTriState * IsNamedShow ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall raw_DrawLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY ) = 0;
      virtual HRESULT __stdcall raw_EraseDrawing ( ) = 0;
      virtual HRESULT __stdcall raw_First ( ) = 0;
      virtual HRESULT __stdcall raw_Last ( ) = 0;
      virtual HRESULT __stdcall raw_Next ( ) = 0;
      virtual HRESULT __stdcall raw_Previous ( ) = 0;
      virtual HRESULT __stdcall raw_GotoSlide (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoTriState ResetSlide ) = 0;
      virtual HRESULT __stdcall raw_GotoNamedShow (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall raw_EndNamedShow ( ) = 0;
      virtual HRESULT __stdcall raw_ResetSlideTime ( ) = 0;
      virtual HRESULT __stdcall raw_Exit ( ) = 0;
      virtual HRESULT __stdcall raw_InstallTracker (
        /*[in]*/ struct MouseTracker * pTracker,
        /*[in]*/ enum Office::MsoTriState Presenter ) = 0;
      virtual HRESULT __stdcall get_CurrentShowPosition (
        /*[out,retval]*/ int * CurrentShowPosition ) = 0;
      virtual HRESULT __stdcall raw_GotoClick (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_GetClickIndex (
        /*[out,retval]*/ int * GetClickIndex ) = 0;
      virtual HRESULT __stdcall raw_GetClickCount (
        /*[out,retval]*/ int * GetClickCount ) = 0;
      virtual HRESULT __stdcall raw_FirstAnimationIsAutomatic (
        /*[out,retval]*/ VARIANT_BOOL * FirstAnimationIsAutomatic ) = 0;
};

struct __declspec(uuid("91493453-5a91-11cf-8700-00aa0060263b"))
SlideShowWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetView))
    SlideShowViewPtr View;
    __declspec(property(get=GetPresentation))
    _PresentationPtr Presentation;
    __declspec(property(get=GetIsFullScreen))
    enum Office::MsoTriState IsFullScreen;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetActive))
    enum Office::MsoTriState Active;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SlideShowViewPtr GetView ( );
    _PresentationPtr GetPresentation ( );
    enum Office::MsoTriState GetIsFullScreen ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetWidth ( );
    void PutWidth (
        float Width );
    float GetHeight ( );
    void PutHeight (
        float Height );
    long GetHWND ( );
    enum Office::MsoTriState GetActive ( );
    HRESULT Activate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_View (
        /*[out,retval]*/ struct SlideShowView * * View ) = 0;
      virtual HRESULT __stdcall get_Presentation (
        /*[out,retval]*/ struct _Presentation * * Presentation ) = 0;
      virtual HRESULT __stdcall get_IsFullScreen (
        /*[out,retval]*/ enum Office::MsoTriState * IsFullScreen ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ long * HWND ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ enum Office::MsoTriState * Active ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
};

struct __declspec(uuid("91493456-5a91-11cf-8700-00aa0060263b"))
SlideShowWindows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SlideShowWindowPtr Item (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct SlideShowWindow * * Item ) = 0;
};

struct __declspec(uuid("9149345a-5a91-11cf-8700-00aa0060263b"))
SlideShowSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPointerColor))
    ColorFormatPtr PointerColor;
    __declspec(property(get=GetNamedSlideShows))
    NamedSlideShowsPtr NamedSlideShows;
    __declspec(property(get=GetStartingSlide,put=PutStartingSlide))
    int StartingSlide;
    __declspec(property(get=GetEndingSlide,put=PutEndingSlide))
    int EndingSlide;
    __declspec(property(get=GetAdvanceMode,put=PutAdvanceMode))
    enum PpSlideShowAdvanceMode AdvanceMode;
    __declspec(property(get=GetShowType,put=PutShowType))
    enum PpSlideShowType ShowType;
    __declspec(property(get=GetSlideShowName,put=PutSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetRangeType,put=PutRangeType))
    enum PpSlideShowRangeType RangeType;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetPointerColor ( );
    NamedSlideShowsPtr GetNamedSlideShows ( );
    int GetStartingSlide ( );
    void PutStartingSlide (
        int StartingSlide );
    int GetEndingSlide ( );
    void PutEndingSlide (
        int EndingSlide );
    enum PpSlideShowAdvanceMode GetAdvanceMode ( );
    void PutAdvanceMode (
        enum PpSlideShowAdvanceMode AdvanceMode );
    SlideShowWindowPtr Run ( );
    enum Office::MsoTriState GetLoopUntilStopped ( );
    void PutLoopUntilStopped (
        enum Office::MsoTriState LoopUntilStopped );
    enum PpSlideShowType GetShowType ( );
    void PutShowType (
        enum PpSlideShowType ShowType );
    enum Office::MsoTriState GetShowWithNarration ( );
    void PutShowWithNarration (
        enum Office::MsoTriState ShowWithNarration );
    enum Office::MsoTriState GetShowWithAnimation ( );
    void PutShowWithAnimation (
        enum Office::MsoTriState ShowWithAnimation );
    _bstr_t GetSlideShowName ( );
    void PutSlideShowName (
        _bstr_t SlideShowName );
    enum PpSlideShowRangeType GetRangeType ( );
    void PutRangeType (
        enum PpSlideShowRangeType RangeType );
    enum Office::MsoTriState GetShowScrollbar ( );
    void PutShowScrollbar (
        enum Office::MsoTriState ShowScrollbar );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_PointerColor (
        /*[out,retval]*/ struct ColorFormat * * PointerColor ) = 0;
      virtual HRESULT __stdcall get_NamedSlideShows (
        /*[out,retval]*/ struct NamedSlideShows * * NamedSlideShows ) = 0;
      virtual HRESULT __stdcall get_StartingSlide (
        /*[out,retval]*/ int * StartingSlide ) = 0;
      virtual HRESULT __stdcall put_StartingSlide (
        /*[in]*/ int StartingSlide ) = 0;
      virtual HRESULT __stdcall get_EndingSlide (
        /*[out,retval]*/ int * EndingSlide ) = 0;
      virtual HRESULT __stdcall put_EndingSlide (
        /*[in]*/ int EndingSlide ) = 0;
      virtual HRESULT __stdcall get_AdvanceMode (
        /*[out,retval]*/ enum PpSlideShowAdvanceMode * AdvanceMode ) = 0;
      virtual HRESULT __stdcall put_AdvanceMode (
        /*[in]*/ enum PpSlideShowAdvanceMode AdvanceMode ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[out,retval]*/ struct SlideShowWindow * * Run ) = 0;
      virtual HRESULT __stdcall get_LoopUntilStopped (
        /*[out,retval]*/ enum Office::MsoTriState * LoopUntilStopped ) = 0;
      virtual HRESULT __stdcall put_LoopUntilStopped (
        /*[in]*/ enum Office::MsoTriState LoopUntilStopped ) = 0;
      virtual HRESULT __stdcall get_ShowType (
        /*[out,retval]*/ enum PpSlideShowType * ShowType ) = 0;
      virtual HRESULT __stdcall put_ShowType (
        /*[in]*/ enum PpSlideShowType ShowType ) = 0;
      virtual HRESULT __stdcall get_ShowWithNarration (
        /*[out,retval]*/ enum Office::MsoTriState * ShowWithNarration ) = 0;
      virtual HRESULT __stdcall put_ShowWithNarration (
        /*[in]*/ enum Office::MsoTriState ShowWithNarration ) = 0;
      virtual HRESULT __stdcall get_ShowWithAnimation (
        /*[out,retval]*/ enum Office::MsoTriState * ShowWithAnimation ) = 0;
      virtual HRESULT __stdcall put_ShowWithAnimation (
        /*[in]*/ enum Office::MsoTriState ShowWithAnimation ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall put_SlideShowName (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall get_RangeType (
        /*[out,retval]*/ enum PpSlideShowRangeType * RangeType ) = 0;
      virtual HRESULT __stdcall put_RangeType (
        /*[in]*/ enum PpSlideShowRangeType RangeType ) = 0;
      virtual HRESULT __stdcall get_ShowScrollbar (
        /*[out,retval]*/ enum Office::MsoTriState * ShowScrollbar ) = 0;
      virtual HRESULT __stdcall put_ShowScrollbar (
        /*[in]*/ enum Office::MsoTriState ShowScrollbar ) = 0;
};

struct __declspec(uuid("914934bf-5a91-11cf-8700-00aa0060263b"))
MouseDownHandler : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnMouseDown (
        IUnknown * activeWin );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnMouseDown (
        /*[in]*/ IUnknown * activeWin ) = 0;
};

struct __declspec(uuid("914934c0-5a91-11cf-8700-00aa0060263b"))
OCXExtender : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=GetAltHTML,put=PutAltHTML))
    _bstr_t AltHTML;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetHeight ( );
    void PutHeight (
        float Height );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetAltHTML ( );
    void PutAltHTML (
        _bstr_t AltHTML );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ int * ZOrderPosition ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_AltHTML (
        /*[out,retval]*/ BSTR * AltHTML ) = 0;
      virtual HRESULT __stdcall put_AltHTML (
        /*[in]*/ BSTR AltHTML ) = 0;
};

struct __declspec(uuid("914934c1-5a91-11cf-8700-00aa0060263b"))
OCXExtenderEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GotFocus ( );
    HRESULT LostFocus ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GotFocus ( ) = 0;
      virtual HRESULT __stdcall raw_LostFocus ( ) = 0;
};

struct __declspec(uuid("91493446-5a91-11cf-8700-00aa0060263b"))
OLEControl;
    // [ default ] interface OCXExtender
    // [ default, source ] interface OCXExtenderEvents

enum PpBorderType
{
    ppBorderTop = 1,
    ppBorderLeft = 2,
    ppBorderBottom = 3,
    ppBorderRight = 4,
    ppBorderDiagonalDown = 5,
    ppBorderDiagonalUp = 6
};

enum PpHTMLVersion
{
    ppHTMLv3 = 1,
    ppHTMLv4 = 2,
    ppHTMLDual = 3,
    ppHTMLAutodetect = 4
};

enum PpPublishSourceType
{
    ppPublishAll = 1,
    ppPublishSlideRange = 2,
    ppPublishNamedSlideShow = 3
};

enum PpBulletType
{
    ppBulletMixed = -2,
    ppBulletNone = 0,
    ppBulletUnnumbered = 1,
    ppBulletNumbered = 2,
    ppBulletPicture = 3
};

enum PpNumberedBulletStyle
{
    ppBulletStyleMixed = -2,
    ppBulletAlphaLCPeriod = 0,
    ppBulletAlphaUCPeriod = 1,
    ppBulletArabicParenRight = 2,
    ppBulletArabicPeriod = 3,
    ppBulletRomanLCParenBoth = 4,
    ppBulletRomanLCParenRight = 5,
    ppBulletRomanLCPeriod = 6,
    ppBulletRomanUCPeriod = 7,
    ppBulletAlphaLCParenBoth = 8,
    ppBulletAlphaLCParenRight = 9,
    ppBulletAlphaUCParenBoth = 10,
    ppBulletAlphaUCParenRight = 11,
    ppBulletArabicParenBoth = 12,
    ppBulletArabicPlain = 13,
    ppBulletRomanUCParenBoth = 14,
    ppBulletRomanUCParenRight = 15,
    ppBulletSimpChinPlain = 16,
    ppBulletSimpChinPeriod = 17,
    ppBulletCircleNumDBPlain = 18,
    ppBulletCircleNumWDWhitePlain = 19,
    ppBulletCircleNumWDBlackPlain = 20,
    ppBulletTradChinPlain = 21,
    ppBulletTradChinPeriod = 22,
    ppBulletArabicAlphaDash = 23,
    ppBulletArabicAbjadDash = 24,
    ppBulletHebrewAlphaDash = 25,
    ppBulletKanjiKoreanPlain = 26,
    ppBulletKanjiKoreanPeriod = 27,
    ppBulletArabicDBPlain = 28,
    ppBulletArabicDBPeriod = 29,
    ppBulletThaiAlphaPeriod = 30,
    ppBulletThaiAlphaParenRight = 31,
    ppBulletThaiAlphaParenBoth = 32,
    ppBulletThaiNumPeriod = 33,
    ppBulletThaiNumParenRight = 34,
    ppBulletThaiNumParenBoth = 35,
    ppBulletHindiAlphaPeriod = 36,
    ppBulletHindiNumPeriod = 37,
    ppBulletKanjiSimpChinDBPeriod = 38,
    ppBulletHindiNumParenRight = 39,
    ppBulletHindiAlpha1Period = 40
};

struct __declspec(uuid("91493497-5a91-11cf-8700-00aa0060263b"))
BulletFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCharacter,put=PutCharacter))
    int Character;
    __declspec(property(get=GetRelativeSize,put=PutRelativeSize))
    float RelativeSize;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetType,put=PutType))
    enum PpBulletType Type;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum PpNumberedBulletStyle Style;
    __declspec(property(get=GetStartValue,put=PutStartValue))
    int StartValue;
    __declspec(property(get=GetNumber))
    int Number;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    int GetCharacter ( );
    void PutCharacter (
        int Character );
    float GetRelativeSize ( );
    void PutRelativeSize (
        float RelativeSize );
    enum Office::MsoTriState GetUseTextColor ( );
    void PutUseTextColor (
        enum Office::MsoTriState UseTextColor );
    enum Office::MsoTriState GetUseTextFont ( );
    void PutUseTextFont (
        enum Office::MsoTriState UseTextFont );
    FontPtr GetFont ( );
    enum PpBulletType GetType ( );
    void PutType (
        enum PpBulletType Type );
    enum PpNumberedBulletStyle GetStyle ( );
    void PutStyle (
        enum PpNumberedBulletStyle Style );
    int GetStartValue ( );
    void PutStartValue (
        int StartValue );
    HRESULT Picture (
        _bstr_t Picture );
    int GetNumber ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Character (
        /*[out,retval]*/ int * Character ) = 0;
      virtual HRESULT __stdcall put_Character (
        /*[in]*/ int Character ) = 0;
      virtual HRESULT __stdcall get_RelativeSize (
        /*[out,retval]*/ float * RelativeSize ) = 0;
      virtual HRESULT __stdcall put_RelativeSize (
        /*[in]*/ float RelativeSize ) = 0;
      virtual HRESULT __stdcall get_UseTextColor (
        /*[out,retval]*/ enum Office::MsoTriState * UseTextColor ) = 0;
      virtual HRESULT __stdcall put_UseTextColor (
        /*[in]*/ enum Office::MsoTriState UseTextColor ) = 0;
      virtual HRESULT __stdcall get_UseTextFont (
        /*[out,retval]*/ enum Office::MsoTriState * UseTextFont ) = 0;
      virtual HRESULT __stdcall put_UseTextFont (
        /*[in]*/ enum Office::MsoTriState UseTextFont ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpBulletType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum PpBulletType Type ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum PpNumberedBulletStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum PpNumberedBulletStyle Style ) = 0;
      virtual HRESULT __stdcall get_StartValue (
        /*[out,retval]*/ int * StartValue ) = 0;
      virtual HRESULT __stdcall put_StartValue (
        /*[in]*/ int StartValue ) = 0;
      virtual HRESULT __stdcall raw_Picture (
        /*[in]*/ BSTR Picture ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ int * Number ) = 0;
};

struct __declspec(uuid("91493496-5a91-11cf-8700-00aa0060263b"))
ParagraphFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum PpParagraphAlignment Alignment;
    __declspec(property(get=GetBullet))
    BulletFormatPtr Bullet;
    __declspec(property(get=GetSpaceBefore,put=PutSpaceBefore))
    float SpaceBefore;
    __declspec(property(get=GetSpaceAfter,put=PutSpaceAfter))
    float SpaceAfter;
    __declspec(property(get=GetSpaceWithin,put=PutSpaceWithin))
    float SpaceWithin;
    __declspec(property(get=GetBaseLineAlignment,put=PutBaseLineAlignment))
    enum PpBaselineAlignment BaseLineAlignment;
    __declspec(property(get=GetTextDirection,put=PutTextDirection))
    enum PpDirection TextDirection;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpParagraphAlignment GetAlignment ( );
    void PutAlignment (
        enum PpParagraphAlignment Alignment );
    BulletFormatPtr GetBullet ( );
    enum Office::MsoTriState GetLineRuleBefore ( );
    void PutLineRuleBefore (
        enum Office::MsoTriState LineRuleBefore );
    enum Office::MsoTriState GetLineRuleAfter ( );
    void PutLineRuleAfter (
        enum Office::MsoTriState LineRuleAfter );
    enum Office::MsoTriState GetLineRuleWithin ( );
    void PutLineRuleWithin (
        enum Office::MsoTriState LineRuleWithin );
    float GetSpaceBefore ( );
    void PutSpaceBefore (
        float SpaceBefore );
    float GetSpaceAfter ( );
    void PutSpaceAfter (
        float SpaceAfter );
    float GetSpaceWithin ( );
    void PutSpaceWithin (
        float SpaceWithin );
    enum PpBaselineAlignment GetBaseLineAlignment ( );
    void PutBaseLineAlignment (
        enum PpBaselineAlignment BaseLineAlignment );
    enum Office::MsoTriState GetFarEastLineBreakControl ( );
    void PutFarEastLineBreakControl (
        enum Office::MsoTriState FarEastLineBreakControl );
    enum Office::MsoTriState GetWordWrap ( );
    void PutWordWrap (
        enum Office::MsoTriState WordWrap );
    enum Office::MsoTriState GetHangingPunctuation ( );
    void PutHangingPunctuation (
        enum Office::MsoTriState HangingPunctuation );
    enum PpDirection GetTextDirection ( );
    void PutTextDirection (
        enum PpDirection TextDirection );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum PpParagraphAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum PpParagraphAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_Bullet (
        /*[out,retval]*/ struct BulletFormat * * Bullet ) = 0;
      virtual HRESULT __stdcall get_LineRuleBefore (
        /*[out,retval]*/ enum Office::MsoTriState * LineRuleBefore ) = 0;
      virtual HRESULT __stdcall put_LineRuleBefore (
        /*[in]*/ enum Office::MsoTriState LineRuleBefore ) = 0;
      virtual HRESULT __stdcall get_LineRuleAfter (
        /*[out,retval]*/ enum Office::MsoTriState * LineRuleAfter ) = 0;
      virtual HRESULT __stdcall put_LineRuleAfter (
        /*[in]*/ enum Office::MsoTriState LineRuleAfter ) = 0;
      virtual HRESULT __stdcall get_LineRuleWithin (
        /*[out,retval]*/ enum Office::MsoTriState * LineRuleWithin ) = 0;
      virtual HRESULT __stdcall put_LineRuleWithin (
        /*[in]*/ enum Office::MsoTriState LineRuleWithin ) = 0;
      virtual HRESULT __stdcall get_SpaceBefore (
        /*[out,retval]*/ float * SpaceBefore ) = 0;
      virtual HRESULT __stdcall put_SpaceBefore (
        /*[in]*/ float SpaceBefore ) = 0;
      virtual HRESULT __stdcall get_SpaceAfter (
        /*[out,retval]*/ float * SpaceAfter ) = 0;
      virtual HRESULT __stdcall put_SpaceAfter (
        /*[in]*/ float SpaceAfter ) = 0;
      virtual HRESULT __stdcall get_SpaceWithin (
        /*[out,retval]*/ float * SpaceWithin ) = 0;
      virtual HRESULT __stdcall put_SpaceWithin (
        /*[in]*/ float SpaceWithin ) = 0;
      virtual HRESULT __stdcall get_BaseLineAlignment (
        /*[out,retval]*/ enum PpBaselineAlignment * BaseLineAlignment ) = 0;
      virtual HRESULT __stdcall put_BaseLineAlignment (
        /*[in]*/ enum PpBaselineAlignment BaseLineAlignment ) = 0;
      virtual HRESULT __stdcall get_FarEastLineBreakControl (
        /*[out,retval]*/ enum Office::MsoTriState * FarEastLineBreakControl ) = 0;
      virtual HRESULT __stdcall put_FarEastLineBreakControl (
        /*[in]*/ enum Office::MsoTriState FarEastLineBreakControl ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ enum Office::MsoTriState * WordWrap ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ enum Office::MsoTriState WordWrap ) = 0;
      virtual HRESULT __stdcall get_HangingPunctuation (
        /*[out,retval]*/ enum Office::MsoTriState * HangingPunctuation ) = 0;
      virtual HRESULT __stdcall put_HangingPunctuation (
        /*[in]*/ enum Office::MsoTriState HangingPunctuation ) = 0;
      virtual HRESULT __stdcall get_TextDirection (
        /*[out,retval]*/ enum PpDirection * TextDirection ) = 0;
      virtual HRESULT __stdcall put_TextDirection (
        /*[in]*/ enum PpDirection TextDirection ) = 0;
};

struct __declspec(uuid("9149349b-5a91-11cf-8700-00aa0060263b"))
TextStyleLevel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetParagraphFormat))
    ParagraphFormatPtr ParagraphFormat;
    __declspec(property(get=GetFont))
    FontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ParagraphFormatPtr GetParagraphFormat ( );
    FontPtr GetFont ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ParagraphFormat (
        /*[out,retval]*/ struct ParagraphFormat * * ParagraphFormat ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
};

struct __declspec(uuid("9149349a-5a91-11cf-8700-00aa0060263b"))
TextStyleLevels : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    TextStyleLevelPtr Item (
        int Level );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Level,
        /*[out,retval]*/ struct TextStyleLevel * * Item ) = 0;
};

enum PpShapeFormat
{
    ppShapeFormatGIF = 0,
    ppShapeFormatJPG = 1,
    ppShapeFormatPNG = 2,
    ppShapeFormatBMP = 3,
    ppShapeFormatWMF = 4,
    ppShapeFormatEMF = 5
};

enum PpExportMode
{
    ppRelativeToSlide = 1,
    ppClipRelativeToSlide = 2,
    ppScaleToFit = 3,
    ppScaleXY = 4
};

struct __declspec(uuid("914934ca-5a91-11cf-8700-00aa0060263b"))
Borders : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    LineFormatPtr Item (
        enum PpBorderType BorderType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum PpBorderType BorderType,
        /*[out,retval]*/ struct LineFormat * * Item ) = 0;
};

struct __declspec(uuid("914934cc-5a91-11cf-8700-00aa0060263b"))
Pane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive))
    enum Office::MsoTriState Active;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetViewType))
    enum PpViewType ViewType;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    enum Office::MsoTriState GetActive ( );
    _ApplicationPtr GetApplication ( );
    enum PpViewType GetViewType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ enum Office::MsoTriState * Active ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ enum PpViewType * ViewType ) = 0;
};

struct __declspec(uuid("914934cb-5a91-11cf-8700-00aa0060263b"))
Panes : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    PanePtr Item (
        int Index );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Pane * * Item ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("914934cd-5a91-11cf-8700-00aa0060263b"))
DefaultWebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHTMLVersion,put=PutHTMLVersion))
    enum PpHTMLVersion HTMLVersion;
    __declspec(property(get=GetFrameColors,put=PutFrameColors))
    enum PpFrameColors FrameColors;
    __declspec(property(get=GetFonts))
    Office::WebPageFontsPtr Fonts;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;

    //
    // Wrapper methods for error-handling
    //

    enum Office::MsoTriState GetIncludeNavigation ( );
    void PutIncludeNavigation (
        enum Office::MsoTriState IncludeNavigation );
    enum PpFrameColors GetFrameColors ( );
    void PutFrameColors (
        enum PpFrameColors FrameColors );
    enum Office::MsoTriState GetResizeGraphics ( );
    void PutResizeGraphics (
        enum Office::MsoTriState ResizeGraphics );
    enum Office::MsoTriState GetShowSlideAnimation ( );
    void PutShowSlideAnimation (
        enum Office::MsoTriState ShowSlideAnimation );
    enum Office::MsoTriState GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        enum Office::MsoTriState OrganizeInFolder );
    enum Office::MsoTriState GetUseLongFileNames ( );
    void PutUseLongFileNames (
        enum Office::MsoTriState UseLongFileNames );
    enum Office::MsoTriState GetRelyOnVML ( );
    void PutRelyOnVML (
        enum Office::MsoTriState RelyOnVML );
    enum Office::MsoTriState GetAllowPNG ( );
    void PutAllowPNG (
        enum Office::MsoTriState AllowPNG );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize ScreenSize );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding Encoding );
    enum Office::MsoTriState GetUpdateLinksOnSave ( );
    void PutUpdateLinksOnSave (
        enum Office::MsoTriState UpdateLinksOnSave );
    enum Office::MsoTriState GetCheckIfOfficeIsHTMLEditor ( );
    void PutCheckIfOfficeIsHTMLEditor (
        enum Office::MsoTriState CheckIfOfficeIsHTMLEditor );
    enum Office::MsoTriState GetAlwaysSaveInDefaultEncoding ( );
    void PutAlwaysSaveInDefaultEncoding (
        enum Office::MsoTriState AlwaysSaveInDefaultEncoding );
    Office::WebPageFontsPtr GetFonts ( );
    _bstr_t GetFolderSuffix ( );
    enum Office::MsoTargetBrowser GetTargetBrowser ( );
    void PutTargetBrowser (
        enum Office::MsoTargetBrowser TargetBrowser );
    enum Office::MsoTriState GetSaveNewWebPagesAsWebArchives ( );
    void PutSaveNewWebPagesAsWebArchives (
        enum Office::MsoTriState SaveNewWebPagesAsWebArchives );
    enum PpHTMLVersion GetHTMLVersion ( );
    void PutHTMLVersion (
        enum PpHTMLVersion HTMLVersion );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncludeNavigation (
        /*[out,retval]*/ enum Office::MsoTriState * IncludeNavigation ) = 0;
      virtual HRESULT __stdcall put_IncludeNavigation (
        /*[in]*/ enum Office::MsoTriState IncludeNavigation ) = 0;
      virtual HRESULT __stdcall get_FrameColors (
        /*[out,retval]*/ enum PpFrameColors * FrameColors ) = 0;
      virtual HRESULT __stdcall put_FrameColors (
        /*[in]*/ enum PpFrameColors FrameColors ) = 0;
      virtual HRESULT __stdcall get_ResizeGraphics (
        /*[out,retval]*/ enum Office::MsoTriState * ResizeGraphics ) = 0;
      virtual HRESULT __stdcall put_ResizeGraphics (
        /*[in]*/ enum Office::MsoTriState ResizeGraphics ) = 0;
      virtual HRESULT __stdcall get_ShowSlideAnimation (
        /*[out,retval]*/ enum Office::MsoTriState * ShowSlideAnimation ) = 0;
      virtual HRESULT __stdcall put_ShowSlideAnimation (
        /*[in]*/ enum Office::MsoTriState ShowSlideAnimation ) = 0;
      virtual HRESULT __stdcall get_OrganizeInFolder (
        /*[out,retval]*/ enum Office::MsoTriState * OrganizeInFolder ) = 0;
      virtual HRESULT __stdcall put_OrganizeInFolder (
        /*[in]*/ enum Office::MsoTriState OrganizeInFolder ) = 0;
      virtual HRESULT __stdcall get_UseLongFileNames (
        /*[out,retval]*/ enum Office::MsoTriState * UseLongFileNames ) = 0;
      virtual HRESULT __stdcall put_UseLongFileNames (
        /*[in]*/ enum Office::MsoTriState UseLongFileNames ) = 0;
      virtual HRESULT __stdcall get_RelyOnVML (
        /*[out,retval]*/ enum Office::MsoTriState * RelyOnVML ) = 0;
      virtual HRESULT __stdcall put_RelyOnVML (
        /*[in]*/ enum Office::MsoTriState RelyOnVML ) = 0;
      virtual HRESULT __stdcall get_AllowPNG (
        /*[out,retval]*/ enum Office::MsoTriState * AllowPNG ) = 0;
      virtual HRESULT __stdcall put_AllowPNG (
        /*[in]*/ enum Office::MsoTriState AllowPNG ) = 0;
      virtual HRESULT __stdcall get_ScreenSize (
        /*[out,retval]*/ enum Office::MsoScreenSize * ScreenSize ) = 0;
      virtual HRESULT __stdcall put_ScreenSize (
        /*[in]*/ enum Office::MsoScreenSize ScreenSize ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ enum Office::MsoEncoding * Encoding ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ enum Office::MsoEncoding Encoding ) = 0;
      virtual HRESULT __stdcall get_UpdateLinksOnSave (
        /*[out,retval]*/ enum Office::MsoTriState * UpdateLinksOnSave ) = 0;
      virtual HRESULT __stdcall put_UpdateLinksOnSave (
        /*[in]*/ enum Office::MsoTriState UpdateLinksOnSave ) = 0;
      virtual HRESULT __stdcall get_CheckIfOfficeIsHTMLEditor (
        /*[out,retval]*/ enum Office::MsoTriState * CheckIfOfficeIsHTMLEditor ) = 0;
      virtual HRESULT __stdcall put_CheckIfOfficeIsHTMLEditor (
        /*[in]*/ enum Office::MsoTriState CheckIfOfficeIsHTMLEditor ) = 0;
      virtual HRESULT __stdcall get_AlwaysSaveInDefaultEncoding (
        /*[out,retval]*/ enum Office::MsoTriState * AlwaysSaveInDefaultEncoding ) = 0;
      virtual HRESULT __stdcall put_AlwaysSaveInDefaultEncoding (
        /*[in]*/ enum Office::MsoTriState AlwaysSaveInDefaultEncoding ) = 0;
      virtual HRESULT __stdcall get_Fonts (
        /*[out,retval]*/ struct Office::WebPageFonts * * Fonts ) = 0;
      virtual HRESULT __stdcall get_FolderSuffix (
        /*[out,retval]*/ BSTR * FolderSuffix ) = 0;
      virtual HRESULT __stdcall get_TargetBrowser (
        /*[out,retval]*/ enum Office::MsoTargetBrowser * TargetBrowser ) = 0;
      virtual HRESULT __stdcall put_TargetBrowser (
        /*[in]*/ enum Office::MsoTargetBrowser TargetBrowser ) = 0;
      virtual HRESULT __stdcall get_SaveNewWebPagesAsWebArchives (
        /*[out,retval]*/ enum Office::MsoTriState * SaveNewWebPagesAsWebArchives ) = 0;
      virtual HRESULT __stdcall put_SaveNewWebPagesAsWebArchives (
        /*[in]*/ enum Office::MsoTriState SaveNewWebPagesAsWebArchives ) = 0;
      virtual HRESULT __stdcall get_HTMLVersion (
        /*[out,retval]*/ enum PpHTMLVersion * HTMLVersion ) = 0;
      virtual HRESULT __stdcall put_HTMLVersion (
        /*[in]*/ enum PpHTMLVersion HTMLVersion ) = 0;
};

struct __declspec(uuid("914934ce-5a91-11cf-8700-00aa0060263b"))
WebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFrameColors,put=PutFrameColors))
    enum PpFrameColors FrameColors;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;
    __declspec(property(get=GetHTMLVersion,put=PutHTMLVersion))
    enum PpHTMLVersion HTMLVersion;

    //
    // Wrapper methods for error-handling
    //

    enum Office::MsoTriState GetIncludeNavigation ( );
    void PutIncludeNavigation (
        enum Office::MsoTriState IncludeNavigation );
    enum PpFrameColors GetFrameColors ( );
    void PutFrameColors (
        enum PpFrameColors FrameColors );
    enum Office::MsoTriState GetResizeGraphics ( );
    void PutResizeGraphics (
        enum Office::MsoTriState ResizeGraphics );
    enum Office::MsoTriState GetShowSlideAnimation ( );
    void PutShowSlideAnimation (
        enum Office::MsoTriState ShowSlideAnimation );
    enum Office::MsoTriState GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        enum Office::MsoTriState OrganizeInFolder );
    enum Office::MsoTriState GetUseLongFileNames ( );
    void PutUseLongFileNames (
        enum Office::MsoTriState UseLongFileNames );
    enum Office::MsoTriState GetRelyOnVML ( );
    void PutRelyOnVML (
        enum Office::MsoTriState RelyOnVML );
    enum Office::MsoTriState GetAllowPNG ( );
    void PutAllowPNG (
        enum Office::MsoTriState AllowPNG );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize ScreenSize );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding Encoding );
    _bstr_t GetFolderSuffix ( );
    HRESULT UseDefaultFolderSuffix ( );
    enum Office::MsoTargetBrowser GetTargetBrowser ( );
    void PutTargetBrowser (
        enum Office::MsoTargetBrowser TargetBrowser );
    enum PpHTMLVersion GetHTMLVersion ( );
    void PutHTMLVersion (
        enum PpHTMLVersion HTMLVersion );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncludeNavigation (
        /*[out,retval]*/ enum Office::MsoTriState * IncludeNavigation ) = 0;
      virtual HRESULT __stdcall put_IncludeNavigation (
        /*[in]*/ enum Office::MsoTriState IncludeNavigation ) = 0;
      virtual HRESULT __stdcall get_FrameColors (
        /*[out,retval]*/ enum PpFrameColors * FrameColors ) = 0;
      virtual HRESULT __stdcall put_FrameColors (
        /*[in]*/ enum PpFrameColors FrameColors ) = 0;
      virtual HRESULT __stdcall get_ResizeGraphics (
        /*[out,retval]*/ enum Office::MsoTriState * ResizeGraphics ) = 0;
      virtual HRESULT __stdcall put_ResizeGraphics (
        /*[in]*/ enum Office::MsoTriState ResizeGraphics ) = 0;
      virtual HRESULT __stdcall get_ShowSlideAnimation (
        /*[out,retval]*/ enum Office::MsoTriState * ShowSlideAnimation ) = 0;
      virtual HRESULT __stdcall put_ShowSlideAnimation (
        /*[in]*/ enum Office::MsoTriState ShowSlideAnimation ) = 0;
      virtual HRESULT __stdcall get_OrganizeInFolder (
        /*[out,retval]*/ enum Office::MsoTriState * OrganizeInFolder ) = 0;
      virtual HRESULT __stdcall put_OrganizeInFolder (
        /*[in]*/ enum Office::MsoTriState OrganizeInFolder ) = 0;
      virtual HRESULT __stdcall get_UseLongFileNames (
        /*[out,retval]*/ enum Office::MsoTriState * UseLongFileNames ) = 0;
      virtual HRESULT __stdcall put_UseLongFileNames (
        /*[in]*/ enum Office::MsoTriState UseLongFileNames ) = 0;
      virtual HRESULT __stdcall get_RelyOnVML (
        /*[out,retval]*/ enum Office::MsoTriState * RelyOnVML ) = 0;
      virtual HRESULT __stdcall put_RelyOnVML (
        /*[in]*/ enum Office::MsoTriState RelyOnVML ) = 0;
      virtual HRESULT __stdcall get_AllowPNG (
        /*[out,retval]*/ enum Office::MsoTriState * AllowPNG ) = 0;
      virtual HRESULT __stdcall put_AllowPNG (
        /*[in]*/ enum Office::MsoTriState AllowPNG ) = 0;
      virtual HRESULT __stdcall get_ScreenSize (
        /*[out,retval]*/ enum Office::MsoScreenSize * ScreenSize ) = 0;
      virtual HRESULT __stdcall put_ScreenSize (
        /*[in]*/ enum Office::MsoScreenSize ScreenSize ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ enum Office::MsoEncoding * Encoding ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ enum Office::MsoEncoding Encoding ) = 0;
      virtual HRESULT __stdcall get_FolderSuffix (
        /*[out,retval]*/ BSTR * FolderSuffix ) = 0;
      virtual HRESULT __stdcall raw_UseDefaultFolderSuffix ( ) = 0;
      virtual HRESULT __stdcall get_TargetBrowser (
        /*[out,retval]*/ enum Office::MsoTargetBrowser * TargetBrowser ) = 0;
      virtual HRESULT __stdcall put_TargetBrowser (
        /*[in]*/ enum Office::MsoTargetBrowser TargetBrowser ) = 0;
      virtual HRESULT __stdcall get_HTMLVersion (
        /*[out,retval]*/ enum PpHTMLVersion * HTMLVersion ) = 0;
      virtual HRESULT __stdcall put_HTMLVersion (
        /*[in]*/ enum PpHTMLVersion HTMLVersion ) = 0;
};

struct __declspec(uuid("914934d0-5a91-11cf-8700-00aa0060263b"))
PublishObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHTMLVersion,put=PutHTMLVersion))
    enum PpHTMLVersion HTMLVersion;
    __declspec(property(get=GetSourceType,put=PutSourceType))
    enum PpPublishSourceType SourceType;
    __declspec(property(get=GetRangeStart,put=PutRangeStart))
    int RangeStart;
    __declspec(property(get=GetRangeEnd,put=PutRangeEnd))
    int RangeEnd;
    __declspec(property(get=GetSlideShowName,put=PutSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpHTMLVersion GetHTMLVersion ( );
    void PutHTMLVersion (
        enum PpHTMLVersion HTMLVersion );
    enum PpPublishSourceType GetSourceType ( );
    void PutSourceType (
        enum PpPublishSourceType SourceType );
    int GetRangeStart ( );
    void PutRangeStart (
        int RangeStart );
    int GetRangeEnd ( );
    void PutRangeEnd (
        int RangeEnd );
    _bstr_t GetSlideShowName ( );
    void PutSlideShowName (
        _bstr_t SlideShowName );
    enum Office::MsoTriState GetSpeakerNotes ( );
    void PutSpeakerNotes (
        enum Office::MsoTriState SpeakerNotes );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t FileName );
    HRESULT Publish ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_HTMLVersion (
        /*[out,retval]*/ enum PpHTMLVersion * HTMLVersion ) = 0;
      virtual HRESULT __stdcall put_HTMLVersion (
        /*[in]*/ enum PpHTMLVersion HTMLVersion ) = 0;
      virtual HRESULT __stdcall get_SourceType (
        /*[out,retval]*/ enum PpPublishSourceType * SourceType ) = 0;
      virtual HRESULT __stdcall put_SourceType (
        /*[in]*/ enum PpPublishSourceType SourceType ) = 0;
      virtual HRESULT __stdcall get_RangeStart (
        /*[out,retval]*/ int * RangeStart ) = 0;
      virtual HRESULT __stdcall put_RangeStart (
        /*[in]*/ int RangeStart ) = 0;
      virtual HRESULT __stdcall get_RangeEnd (
        /*[out,retval]*/ int * RangeEnd ) = 0;
      virtual HRESULT __stdcall put_RangeEnd (
        /*[in]*/ int RangeEnd ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall put_SlideShowName (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall get_SpeakerNotes (
        /*[out,retval]*/ enum Office::MsoTriState * SpeakerNotes ) = 0;
      virtual HRESULT __stdcall put_SpeakerNotes (
        /*[in]*/ enum Office::MsoTriState SpeakerNotes ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * FileName ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Publish ( ) = 0;
};

struct __declspec(uuid("914934cf-5a91-11cf-8700-00aa0060263b"))
PublishObjects : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    PublishObjectPtr Item (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct PublishObject * * Item ) = 0;
};

struct __declspec(uuid("914934d2-5a91-11cf-8700-00aa0060263b"))
MasterEvents : IUnknown
{};

struct __declspec(uuid("91493447-5a91-11cf-8700-00aa0060263b"))
Master;
    // [ default ] interface _Master
    // [ default, source ] interface MasterEvents

enum PpPasteDataType
{
    ppPasteDefault = 0,
    ppPasteBitmap = 1,
    ppPasteEnhancedMetafile = 2,
    ppPasteMetafilePicture = 3,
    ppPasteGIF = 4,
    ppPasteJPG = 5,
    ppPastePNG = 6,
    ppPasteText = 7,
    ppPasteHTML = 8,
    ppPasteRTF = 9,
    ppPasteOLEObject = 10,
    ppPasteShape = 11
};

struct __declspec(uuid("91493458-5a91-11cf-8700-00aa0060263b"))
View : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum PpViewType Type;
    __declspec(property(get=GetZoom,put=PutZoom))
    int Zoom;
    __declspec(property(get=GetSlide,put=PutSlide))
    IDispatchPtr Slide;
    __declspec(property(get=GetPrintOptions))
    PrintOptionsPtr PrintOptions;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpViewType GetType ( );
    int GetZoom ( );
    void PutZoom (
        int Zoom );
    HRESULT Paste ( );
    IDispatchPtr GetSlide ( );
    void PutSlide (
        IDispatch * Slide );
    HRESULT GotoSlide (
        int Index );
    enum Office::MsoTriState GetDisplaySlideMiniature ( );
    void PutDisplaySlideMiniature (
        enum Office::MsoTriState DisplaySlideMiniature );
    enum Office::MsoTriState GetZoomToFit ( );
    void PutZoomToFit (
        enum Office::MsoTriState ZoomToFit );
    HRESULT PasteSpecial (
        enum PpPasteDataType DataType,
        enum Office::MsoTriState DisplayAsIcon,
        _bstr_t IconFileName,
        int IconIndex,
        _bstr_t IconLabel,
        enum Office::MsoTriState Link );
    PrintOptionsPtr GetPrintOptions ( );
    HRESULT PrintOut (
        int From,
        int To,
        _bstr_t PrintToFile,
        int Copies,
        enum Office::MsoTriState Collate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpViewType * Type ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ int * Zoom ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ int Zoom ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall get_Slide (
        /*[out,retval]*/ IDispatch * * Slide ) = 0;
      virtual HRESULT __stdcall put_Slide (
        /*[in]*/ IDispatch * Slide ) = 0;
      virtual HRESULT __stdcall raw_GotoSlide (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall get_DisplaySlideMiniature (
        /*[out,retval]*/ enum Office::MsoTriState * DisplaySlideMiniature ) = 0;
      virtual HRESULT __stdcall put_DisplaySlideMiniature (
        /*[in]*/ enum Office::MsoTriState DisplaySlideMiniature ) = 0;
      virtual HRESULT __stdcall get_ZoomToFit (
        /*[out,retval]*/ enum Office::MsoTriState * ZoomToFit ) = 0;
      virtual HRESULT __stdcall put_ZoomToFit (
        /*[in]*/ enum Office::MsoTriState ZoomToFit ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ enum PpPasteDataType DataType,
        /*[in]*/ enum Office::MsoTriState DisplayAsIcon,
        /*[in]*/ BSTR IconFileName,
        /*[in]*/ int IconIndex,
        /*[in]*/ BSTR IconLabel,
        /*[in]*/ enum Office::MsoTriState Link ) = 0;
      virtual HRESULT __stdcall get_PrintOptions (
        /*[out,retval]*/ struct PrintOptions * * PrintOptions ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ int From,
        /*[in]*/ int To,
        /*[in]*/ BSTR PrintToFile,
        /*[in]*/ int Copies,
        /*[in]*/ enum Office::MsoTriState Collate ) = 0;
};

struct __declspec(uuid("9149348f-5a91-11cf-8700-00aa0060263b"))
TextRange : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetParagraphFormat))
    ParagraphFormatPtr ParagraphFormat;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    int IndentLevel;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActionSettings))
    ActionSettingsPtr ActionSettings;
    __declspec(property(get=GetStart))
    long Start;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=GetBoundLeft))
    float BoundLeft;
    __declspec(property(get=GetBoundTop))
    float BoundTop;
    __declspec(property(get=GetBoundWidth))
    float BoundWidth;
    __declspec(property(get=GetBoundHeight))
    float BoundHeight;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ActionSettingsPtr GetActionSettings ( );
    long GetStart ( );
    long GetLength ( );
    float GetBoundLeft ( );
    float GetBoundTop ( );
    float GetBoundWidth ( );
    float GetBoundHeight ( );
    TextRangePtr Paragraphs (
        int Start,
        int Length );
    TextRangePtr Sentences (
        int Start,
        int Length );
    TextRangePtr Words (
        int Start,
        int Length );
    TextRangePtr Characters (
        int Start,
        int Length );
    TextRangePtr Lines (
        int Start,
        int Length );
    TextRangePtr Runs (
        int Start,
        int Length );
    TextRangePtr TrimText ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    TextRangePtr InsertAfter (
        _bstr_t NewText );
    TextRangePtr InsertBefore (
        _bstr_t NewText );
    TextRangePtr InsertDateTime (
        enum PpDateTimeFormat DateTimeFormat,
        enum Office::MsoTriState InsertAsField );
    TextRangePtr InsertSlideNumber ( );
    TextRangePtr InsertSymbol (
        _bstr_t FontName,
        int CharNumber,
        enum Office::MsoTriState Unicode );
    FontPtr GetFont ( );
    ParagraphFormatPtr GetParagraphFormat ( );
    int GetIndentLevel ( );
    void PutIndentLevel (
        int IndentLevel );
    HRESULT Select ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Delete ( );
    TextRangePtr Paste ( );
    HRESULT ChangeCase (
        enum PpChangeCase Type );
    HRESULT AddPeriods ( );
    HRESULT RemovePeriods ( );
    TextRangePtr Find (
        _bstr_t FindWhat,
        int After,
        enum Office::MsoTriState MatchCase,
        enum Office::MsoTriState WholeWords );
    TextRangePtr Replace (
        _bstr_t FindWhat,
        _bstr_t ReplaceWhat,
        int After,
        enum Office::MsoTriState MatchCase,
        enum Office::MsoTriState WholeWords );
    HRESULT RotatedBounds (
        float * X1,
        float * Y1,
        float * X2,
        float * Y2,
        float * X3,
        float * Y3,
        float * x4,
        float * y4 );
    enum Office::MsoLanguageID GetLanguageID ( );
    void PutLanguageID (
        enum Office::MsoLanguageID LanguageID );
    HRESULT RtlRun ( );
    HRESULT LtrRun ( );
    TextRangePtr PasteSpecial (
        enum PpPasteDataType DataType,
        enum Office::MsoTriState DisplayAsIcon,
        _bstr_t IconFileName,
        int IconIndex,
        _bstr_t IconLabel,
        enum Office::MsoTriState Link );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ActionSettings (
        /*[out,retval]*/ struct ActionSettings * * ActionSettings ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ long * Start ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * Length ) = 0;
      virtual HRESULT __stdcall get_BoundLeft (
        /*[out,retval]*/ float * BoundLeft ) = 0;
      virtual HRESULT __stdcall get_BoundTop (
        /*[out,retval]*/ float * BoundTop ) = 0;
      virtual HRESULT __stdcall get_BoundWidth (
        /*[out,retval]*/ float * BoundWidth ) = 0;
      virtual HRESULT __stdcall get_BoundHeight (
        /*[out,retval]*/ float * BoundHeight ) = 0;
      virtual HRESULT __stdcall raw_Paragraphs (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Paragraphs ) = 0;
      virtual HRESULT __stdcall raw_Sentences (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Sentences ) = 0;
      virtual HRESULT __stdcall raw_Words (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Words ) = 0;
      virtual HRESULT __stdcall raw_Characters (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Characters ) = 0;
      virtual HRESULT __stdcall raw_Lines (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Lines ) = 0;
      virtual HRESULT __stdcall raw_Runs (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Runs ) = 0;
      virtual HRESULT __stdcall raw_TrimText (
        /*[out,retval]*/ struct TextRange * * TrimText ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_InsertAfter (
        /*[in]*/ BSTR NewText,
        /*[out,retval]*/ struct TextRange * * After ) = 0;
      virtual HRESULT __stdcall raw_InsertBefore (
        /*[in]*/ BSTR NewText,
        /*[out,retval]*/ struct TextRange * * Before ) = 0;
      virtual HRESULT __stdcall raw_InsertDateTime (
        /*[in]*/ enum PpDateTimeFormat DateTimeFormat,
        /*[in]*/ enum Office::MsoTriState InsertAsField,
        /*[out,retval]*/ struct TextRange * * DateTime ) = 0;
      virtual HRESULT __stdcall raw_InsertSlideNumber (
        /*[out,retval]*/ struct TextRange * * SlideNumber ) = 0;
      virtual HRESULT __stdcall raw_InsertSymbol (
        /*[in]*/ BSTR FontName,
        /*[in]*/ int CharNumber,
        /*[in]*/ enum Office::MsoTriState Unicode,
        /*[out,retval]*/ struct TextRange * * Symbol ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall get_ParagraphFormat (
        /*[out,retval]*/ struct ParagraphFormat * * ParagraphFormat ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ int * IndentLevel ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ int IndentLevel ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ struct TextRange * * Paste ) = 0;
      virtual HRESULT __stdcall raw_ChangeCase (
        /*[in]*/ enum PpChangeCase Type ) = 0;
      virtual HRESULT __stdcall raw_AddPeriods ( ) = 0;
      virtual HRESULT __stdcall raw_RemovePeriods ( ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR FindWhat,
        /*[in]*/ int After,
        /*[in]*/ enum Office::MsoTriState MatchCase,
        /*[in]*/ enum Office::MsoTriState WholeWords,
        /*[out,retval]*/ struct TextRange * * Find ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR FindWhat,
        /*[in]*/ BSTR ReplaceWhat,
        /*[in]*/ int After,
        /*[in]*/ enum Office::MsoTriState MatchCase,
        /*[in]*/ enum Office::MsoTriState WholeWords,
        /*[out,retval]*/ struct TextRange * * Replace ) = 0;
      virtual HRESULT __stdcall raw_RotatedBounds (
        /*[out]*/ float * X1,
        /*[out]*/ float * Y1,
        /*[out]*/ float * X2,
        /*[out]*/ float * Y2,
        /*[out]*/ float * X3,
        /*[out]*/ float * Y3,
        /*[out]*/ float * x4,
        /*[out]*/ float * y4 ) = 0;
      virtual HRESULT __stdcall get_LanguageID (
        /*[out,retval]*/ enum Office::MsoLanguageID * LanguageID ) = 0;
      virtual HRESULT __stdcall put_LanguageID (
        /*[in]*/ enum Office::MsoLanguageID LanguageID ) = 0;
      virtual HRESULT __stdcall raw_RtlRun ( ) = 0;
      virtual HRESULT __stdcall raw_LtrRun ( ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ enum PpPasteDataType DataType,
        /*[in]*/ enum Office::MsoTriState DisplayAsIcon,
        /*[in]*/ BSTR IconFileName,
        /*[in]*/ int IconIndex,
        /*[in]*/ BSTR IconLabel,
        /*[in]*/ enum Office::MsoTriState Link,
        /*[out,retval]*/ struct TextRange * * PasteSpecial ) = 0;
};

struct __declspec(uuid("91493484-5a91-11cf-8700-00aa0060263b"))
TextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetHasText))
    enum Office::MsoTriState HasText;
    __declspec(property(get=GetTextRange))
    TextRangePtr TextRange;
    __declspec(property(get=GetRuler))
    RulerPtr Ruler;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    enum PpAutoSize AutoSize;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float MarginBottom );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float MarginLeft );
    float GetMarginRight ( );
    void PutMarginRight (
        float MarginRight );
    float GetMarginTop ( );
    void PutMarginTop (
        float MarginTop );
    enum Office::MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum Office::MsoTextOrientation Orientation );
    enum Office::MsoTriState GetHasText ( );
    TextRangePtr GetTextRange ( );
    RulerPtr GetRuler ( );
    enum Office::MsoHorizontalAnchor GetHorizontalAnchor ( );
    void PutHorizontalAnchor (
        enum Office::MsoHorizontalAnchor HorizontalAnchor );
    enum Office::MsoVerticalAnchor GetVerticalAnchor ( );
    void PutVerticalAnchor (
        enum Office::MsoVerticalAnchor VerticalAnchor );
    enum PpAutoSize GetAutoSize ( );
    void PutAutoSize (
        enum PpAutoSize AutoSize );
    enum Office::MsoTriState GetWordWrap ( );
    void PutWordWrap (
        enum Office::MsoTriState WordWrap );
    HRESULT DeleteText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ float * MarginBottom ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ float MarginBottom ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ float * MarginLeft ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ float MarginLeft ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ float * MarginRight ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ float MarginRight ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ float * MarginTop ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ float MarginTop ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum Office::MsoTextOrientation * Orientation ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum Office::MsoTextOrientation Orientation ) = 0;
      virtual HRESULT __stdcall get_HasText (
        /*[out,retval]*/ enum Office::MsoTriState * HasText ) = 0;
      virtual HRESULT __stdcall get_TextRange (
        /*[out,retval]*/ struct TextRange * * TextRange ) = 0;
      virtual HRESULT __stdcall get_Ruler (
        /*[out,retval]*/ struct Ruler * * Ruler ) = 0;
      virtual HRESULT __stdcall get_HorizontalAnchor (
        /*[out,retval]*/ enum Office::MsoHorizontalAnchor * HorizontalAnchor ) = 0;
      virtual HRESULT __stdcall put_HorizontalAnchor (
        /*[in]*/ enum Office::MsoHorizontalAnchor HorizontalAnchor ) = 0;
      virtual HRESULT __stdcall get_VerticalAnchor (
        /*[out,retval]*/ enum Office::MsoVerticalAnchor * VerticalAnchor ) = 0;
      virtual HRESULT __stdcall put_VerticalAnchor (
        /*[in]*/ enum Office::MsoVerticalAnchor VerticalAnchor ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ enum PpAutoSize * AutoSize ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ enum PpAutoSize AutoSize ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ enum Office::MsoTriState * WordWrap ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ enum Office::MsoTriState WordWrap ) = 0;
      virtual HRESULT __stdcall raw_DeleteText ( ) = 0;
};

struct __declspec(uuid("91493499-5a91-11cf-8700-00aa0060263b"))
TextStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRuler))
    RulerPtr Ruler;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetLevels))
    TextStyleLevelsPtr Levels;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    RulerPtr GetRuler ( );
    TextFramePtr GetTextFrame ( );
    TextStyleLevelsPtr GetLevels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Ruler (
        /*[out,retval]*/ struct Ruler * * Ruler ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * TextFrame ) = 0;
      virtual HRESULT __stdcall get_Levels (
        /*[out,retval]*/ struct TextStyleLevels * * Levels ) = 0;
};

struct __declspec(uuid("91493498-5a91-11cf-8700-00aa0060263b"))
TextStyles : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    TextStylePtr Item (
        enum PpTextStyleType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum PpTextStyleType Type,
        /*[out,retval]*/ struct TextStyle * * Item ) = 0;
};

struct __declspec(uuid("914934d3-5a91-11cf-8700-00aa0060263b"))
_PowerRex : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnAsfEncoderEvent (
        const _variant_t & erorCode,
        const _variant_t & bstrErrorDesc );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnAsfEncoderEvent (
        /*[in]*/ VARIANT erorCode,
        /*[in]*/ VARIANT bstrErrorDesc ) = 0;
};

struct __declspec(uuid("91493448-5a91-11cf-8700-00aa0060263b"))
PowerRex;
    // [ default ] interface _PowerRex

struct __declspec(uuid("914934d5-5a91-11cf-8700-00aa0060263b"))
Comment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;
    __declspec(property(get=GetAuthorInitials))
    _bstr_t AuthorInitials;
    __declspec(property(get=GetText))
    _bstr_t Text;
    __declspec(property(get=GetDateTime))
    DATE DateTime;
    __declspec(property(get=GetAuthorIndex))
    int AuthorIndex;
    __declspec(property(get=GetLeft))
    float Left;
    __declspec(property(get=GetTop))
    float Top;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    _bstr_t GetAuthorInitials ( );
    _bstr_t GetText ( );
    DATE GetDateTime ( );
    int GetAuthorIndex ( );
    float GetLeft ( );
    float GetTop ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * Author ) = 0;
      virtual HRESULT __stdcall get_AuthorInitials (
        /*[out,retval]*/ BSTR * AuthorInitials ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall get_DateTime (
        /*[out,retval]*/ DATE * DateTime ) = 0;
      virtual HRESULT __stdcall get_AuthorIndex (
        /*[out,retval]*/ int * AuthorIndex ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("914934d4-5a91-11cf-8700-00aa0060263b"))
Comments : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CommentPtr Item (
        int Index );
    CommentPtr Add (
        float Left,
        float Top,
        _bstr_t Author,
        _bstr_t AuthorInitials,
        _bstr_t Text );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Comment * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ BSTR Author,
        /*[in]*/ BSTR AuthorInitials,
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ struct Comment * * Add ) = 0;
};

enum MsoAnimEffect
{
    msoAnimEffectCustom = 0,
    msoAnimEffectAppear = 1,
    msoAnimEffectFly = 2,
    msoAnimEffectBlinds = 3,
    msoAnimEffectBox = 4,
    msoAnimEffectCheckerboard = 5,
    msoAnimEffectCircle = 6,
    msoAnimEffectCrawl = 7,
    msoAnimEffectDiamond = 8,
    msoAnimEffectDissolve = 9,
    msoAnimEffectFade = 10,
    msoAnimEffectFlashOnce = 11,
    msoAnimEffectPeek = 12,
    msoAnimEffectPlus = 13,
    msoAnimEffectRandomBars = 14,
    msoAnimEffectSpiral = 15,
    msoAnimEffectSplit = 16,
    msoAnimEffectStretch = 17,
    msoAnimEffectStrips = 18,
    msoAnimEffectSwivel = 19,
    msoAnimEffectWedge = 20,
    msoAnimEffectWheel = 21,
    msoAnimEffectWipe = 22,
    msoAnimEffectZoom = 23,
    msoAnimEffectRandomEffects = 24,
    msoAnimEffectBoomerang = 25,
    msoAnimEffectBounce = 26,
    msoAnimEffectColorReveal = 27,
    msoAnimEffectCredits = 28,
    msoAnimEffectEaseIn = 29,
    msoAnimEffectFloat = 30,
    msoAnimEffectGrowAndTurn = 31,
    msoAnimEffectLightSpeed = 32,
    msoAnimEffectPinwheel = 33,
    msoAnimEffectRiseUp = 34,
    msoAnimEffectSwish = 35,
    msoAnimEffectThinLine = 36,
    msoAnimEffectUnfold = 37,
    msoAnimEffectWhip = 38,
    msoAnimEffectAscend = 39,
    msoAnimEffectCenterRevolve = 40,
    msoAnimEffectFadedSwivel = 41,
    msoAnimEffectDescend = 42,
    msoAnimEffectSling = 43,
    msoAnimEffectSpinner = 44,
    msoAnimEffectStretchy = 45,
    msoAnimEffectZip = 46,
    msoAnimEffectArcUp = 47,
    msoAnimEffectFadedZoom = 48,
    msoAnimEffectGlide = 49,
    msoAnimEffectExpand = 50,
    msoAnimEffectFlip = 51,
    msoAnimEffectShimmer = 52,
    msoAnimEffectFold = 53,
    msoAnimEffectChangeFillColor = 54,
    msoAnimEffectChangeFont = 55,
    msoAnimEffectChangeFontColor = 56,
    msoAnimEffectChangeFontSize = 57,
    msoAnimEffectChangeFontStyle = 58,
    msoAnimEffectGrowShrink = 59,
    msoAnimEffectChangeLineColor = 60,
    msoAnimEffectSpin = 61,
    msoAnimEffectTransparency = 62,
    msoAnimEffectBoldFlash = 63,
    msoAnimEffectBlast = 64,
    msoAnimEffectBoldReveal = 65,
    msoAnimEffectBrushOnColor = 66,
    msoAnimEffectBrushOnUnderline = 67,
    msoAnimEffectColorBlend = 68,
    msoAnimEffectColorWave = 69,
    msoAnimEffectComplementaryColor = 70,
    msoAnimEffectComplementaryColor2 = 71,
    msoAnimEffectContrastingColor = 72,
    msoAnimEffectDarken = 73,
    msoAnimEffectDesaturate = 74,
    msoAnimEffectFlashBulb = 75,
    msoAnimEffectFlicker = 76,
    msoAnimEffectGrowWithColor = 77,
    msoAnimEffectLighten = 78,
    msoAnimEffectStyleEmphasis = 79,
    msoAnimEffectTeeter = 80,
    msoAnimEffectVerticalGrow = 81,
    msoAnimEffectWave = 82,
    msoAnimEffectMediaPlay = 83,
    msoAnimEffectMediaPause = 84,
    msoAnimEffectMediaStop = 85,
    msoAnimEffectPathCircle = 86,
    msoAnimEffectPathRightTriangle = 87,
    msoAnimEffectPathDiamond = 88,
    msoAnimEffectPathHexagon = 89,
    msoAnimEffectPath5PointStar = 90,
    msoAnimEffectPathCrescentMoon = 91,
    msoAnimEffectPathSquare = 92,
    msoAnimEffectPathTrapezoid = 93,
    msoAnimEffectPathHeart = 94,
    msoAnimEffectPathOctagon = 95,
    msoAnimEffectPath6PointStar = 96,
    msoAnimEffectPathFootball = 97,
    msoAnimEffectPathEqualTriangle = 98,
    msoAnimEffectPathParallelogram = 99,
    msoAnimEffectPathPentagon = 100,
    msoAnimEffectPath4PointStar = 101,
    msoAnimEffectPath8PointStar = 102,
    msoAnimEffectPathTeardrop = 103,
    msoAnimEffectPathPointyStar = 104,
    msoAnimEffectPathCurvedSquare = 105,
    msoAnimEffectPathCurvedX = 106,
    msoAnimEffectPathVerticalFigure8 = 107,
    msoAnimEffectPathCurvyStar = 108,
    msoAnimEffectPathLoopdeLoop = 109,
    msoAnimEffectPathBuzzsaw = 110,
    msoAnimEffectPathHorizontalFigure8 = 111,
    msoAnimEffectPathPeanut = 112,
    msoAnimEffectPathFigure8Four = 113,
    msoAnimEffectPathNeutron = 114,
    msoAnimEffectPathSwoosh = 115,
    msoAnimEffectPathBean = 116,
    msoAnimEffectPathPlus = 117,
    msoAnimEffectPathInvertedTriangle = 118,
    msoAnimEffectPathInvertedSquare = 119,
    msoAnimEffectPathLeft = 120,
    msoAnimEffectPathTurnRight = 121,
    msoAnimEffectPathArcDown = 122,
    msoAnimEffectPathZigzag = 123,
    msoAnimEffectPathSCurve2 = 124,
    msoAnimEffectPathSineWave = 125,
    msoAnimEffectPathBounceLeft = 126,
    msoAnimEffectPathDown = 127,
    msoAnimEffectPathTurnUp = 128,
    msoAnimEffectPathArcUp = 129,
    msoAnimEffectPathHeartbeat = 130,
    msoAnimEffectPathSpiralRight = 131,
    msoAnimEffectPathWave = 132,
    msoAnimEffectPathCurvyLeft = 133,
    msoAnimEffectPathDiagonalDownRight = 134,
    msoAnimEffectPathTurnDown = 135,
    msoAnimEffectPathArcLeft = 136,
    msoAnimEffectPathFunnel = 137,
    msoAnimEffectPathSpring = 138,
    msoAnimEffectPathBounceRight = 139,
    msoAnimEffectPathSpiralLeft = 140,
    msoAnimEffectPathDiagonalUpRight = 141,
    msoAnimEffectPathTurnUpRight = 142,
    msoAnimEffectPathArcRight = 143,
    msoAnimEffectPathSCurve1 = 144,
    msoAnimEffectPathDecayingWave = 145,
    msoAnimEffectPathCurvyRight = 146,
    msoAnimEffectPathStairsDown = 147,
    msoAnimEffectPathUp = 148,
    msoAnimEffectPathRight = 149
};

enum MsoAnimateByLevel
{
    msoAnimateLevelMixed = -1,
    msoAnimateLevelNone = 0,
    msoAnimateTextByAllLevels = 1,
    msoAnimateTextByFirstLevel = 2,
    msoAnimateTextBySecondLevel = 3,
    msoAnimateTextByThirdLevel = 4,
    msoAnimateTextByFourthLevel = 5,
    msoAnimateTextByFifthLevel = 6,
    msoAnimateChartAllAtOnce = 7,
    msoAnimateChartByCategory = 8,
    msoAnimateChartByCategoryElements = 9,
    msoAnimateChartBySeries = 10,
    msoAnimateChartBySeriesElements = 11,
    msoAnimateDiagramAllAtOnce = 12,
    msoAnimateDiagramDepthByNode = 13,
    msoAnimateDiagramDepthByBranch = 14,
    msoAnimateDiagramBreadthByNode = 15,
    msoAnimateDiagramBreadthByLevel = 16,
    msoAnimateDiagramClockwise = 17,
    msoAnimateDiagramClockwiseIn = 18,
    msoAnimateDiagramClockwiseOut = 19,
    msoAnimateDiagramCounterClockwise = 20,
    msoAnimateDiagramCounterClockwiseIn = 21,
    msoAnimateDiagramCounterClockwiseOut = 22,
    msoAnimateDiagramInByRing = 23,
    msoAnimateDiagramOutByRing = 24,
    msoAnimateDiagramUp = 25,
    msoAnimateDiagramDown = 26
};

enum MsoAnimTriggerType
{
    msoAnimTriggerMixed = -1,
    msoAnimTriggerNone = 0,
    msoAnimTriggerOnPageClick = 1,
    msoAnimTriggerWithPrevious = 2,
    msoAnimTriggerAfterPrevious = 3,
    msoAnimTriggerOnShapeClick = 4
};

enum MsoAnimAfterEffect
{
    msoAnimAfterEffectMixed = -1,
    msoAnimAfterEffectNone = 0,
    msoAnimAfterEffectDim = 1,
    msoAnimAfterEffectHide = 2,
    msoAnimAfterEffectHideOnNextClick = 3
};

enum MsoAnimTextUnitEffect
{
    msoAnimTextUnitEffectMixed = -1,
    msoAnimTextUnitEffectByParagraph = 0,
    msoAnimTextUnitEffectByCharacter = 1,
    msoAnimTextUnitEffectByWord = 2
};

enum MsoAnimEffectRestart
{
    msoAnimEffectRestartAlways = 1,
    msoAnimEffectRestartWhenOff = 2,
    msoAnimEffectRestartNever = 3
};

enum MsoAnimEffectAfter
{
    msoAnimEffectAfterFreeze = 1,
    msoAnimEffectAfterRemove = 2,
    msoAnimEffectAfterHold = 3,
    msoAnimEffectAfterTransition = 4
};

enum MsoAnimDirection
{
    msoAnimDirectionNone = 0,
    msoAnimDirectionUp = 1,
    msoAnimDirectionRight = 2,
    msoAnimDirectionDown = 3,
    msoAnimDirectionLeft = 4,
    msoAnimDirectionOrdinalMask = 5,
    msoAnimDirectionUpLeft = 6,
    msoAnimDirectionUpRight = 7,
    msoAnimDirectionDownRight = 8,
    msoAnimDirectionDownLeft = 9,
    msoAnimDirectionTop = 10,
    msoAnimDirectionBottom = 11,
    msoAnimDirectionTopLeft = 12,
    msoAnimDirectionTopRight = 13,
    msoAnimDirectionBottomRight = 14,
    msoAnimDirectionBottomLeft = 15,
    msoAnimDirectionHorizontal = 16,
    msoAnimDirectionVertical = 17,
    msoAnimDirectionAcross = 18,
    msoAnimDirectionIn = 19,
    msoAnimDirectionOut = 20,
    msoAnimDirectionClockwise = 21,
    msoAnimDirectionCounterclockwise = 22,
    msoAnimDirectionHorizontalIn = 23,
    msoAnimDirectionHorizontalOut = 24,
    msoAnimDirectionVerticalIn = 25,
    msoAnimDirectionVerticalOut = 26,
    msoAnimDirectionSlightly = 27,
    msoAnimDirectionCenter = 28,
    msoAnimDirectionInSlightly = 29,
    msoAnimDirectionInCenter = 30,
    msoAnimDirectionInBottom = 31,
    msoAnimDirectionOutSlightly = 32,
    msoAnimDirectionOutCenter = 33,
    msoAnimDirectionOutBottom = 34,
    msoAnimDirectionFontBold = 35,
    msoAnimDirectionFontItalic = 36,
    msoAnimDirectionFontUnderline = 37,
    msoAnimDirectionFontStrikethrough = 38,
    msoAnimDirectionFontShadow = 39,
    msoAnimDirectionFontAllCaps = 40,
    msoAnimDirectionInstant = 41,
    msoAnimDirectionGradual = 42,
    msoAnimDirectionCycleClockwise = 43,
    msoAnimDirectionCycleCounterclockwise = 44
};

struct __declspec(uuid("914934e1-5a91-11cf-8700-00aa0060263b"))
EffectParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum MsoAnimDirection Direction;
    __declspec(property(get=GetAmount,put=PutAmount))
    float Amount;
    __declspec(property(get=GetSize,put=PutSize))
    float Size;
    __declspec(property(get=GetColor2))
    ColorFormatPtr Color2;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimDirection GetDirection ( );
    void PutDirection (
        enum MsoAnimDirection Direction );
    float GetAmount ( );
    void PutAmount (
        float Amount );
    float GetSize ( );
    void PutSize (
        float Size );
    ColorFormatPtr GetColor2 ( );
    enum Office::MsoTriState GetRelative ( );
    void PutRelative (
        enum Office::MsoTriState Relative );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t FontName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum MsoAnimDirection * Direction ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum MsoAnimDirection Direction ) = 0;
      virtual HRESULT __stdcall get_Amount (
        /*[out,retval]*/ float * Amount ) = 0;
      virtual HRESULT __stdcall put_Amount (
        /*[in]*/ float Amount ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ float * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ float Size ) = 0;
      virtual HRESULT __stdcall get_Color2 (
        /*[out,retval]*/ struct ColorFormat * * Color2 ) = 0;
      virtual HRESULT __stdcall get_Relative (
        /*[out,retval]*/ enum Office::MsoTriState * Relative ) = 0;
      virtual HRESULT __stdcall put_Relative (
        /*[in]*/ enum Office::MsoTriState Relative ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
};

struct __declspec(uuid("914934e2-5a91-11cf-8700-00aa0060263b"))
EffectInformation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAfterEffect))
    enum MsoAnimAfterEffect AfterEffect;
    __declspec(property(get=GetAnimateBackground))
    enum Office::MsoTriState AnimateBackground;
    __declspec(property(get=GetAnimateTextInReverse))
    enum Office::MsoTriState AnimateTextInReverse;
    __declspec(property(get=GetBuildByLevelEffect))
    enum MsoAnimateByLevel BuildByLevelEffect;
    __declspec(property(get=GetDim))
    ColorFormatPtr Dim;
    __declspec(property(get=GetPlaySettings))
    PlaySettingsPtr PlaySettings;
    __declspec(property(get=GetSoundEffect))
    SoundEffectPtr SoundEffect;
    __declspec(property(get=GetTextUnitEffect))
    enum MsoAnimTextUnitEffect TextUnitEffect;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimAfterEffect GetAfterEffect ( );
    enum Office::MsoTriState GetAnimateBackground ( );
    enum Office::MsoTriState GetAnimateTextInReverse ( );
    enum MsoAnimateByLevel GetBuildByLevelEffect ( );
    ColorFormatPtr GetDim ( );
    PlaySettingsPtr GetPlaySettings ( );
    SoundEffectPtr GetSoundEffect ( );
    enum MsoAnimTextUnitEffect GetTextUnitEffect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_AfterEffect (
        /*[out,retval]*/ enum MsoAnimAfterEffect * AfterEffect ) = 0;
      virtual HRESULT __stdcall get_AnimateBackground (
        /*[out,retval]*/ enum Office::MsoTriState * AnimateBackground ) = 0;
      virtual HRESULT __stdcall get_AnimateTextInReverse (
        /*[out,retval]*/ enum Office::MsoTriState * AnimateTextInReverse ) = 0;
      virtual HRESULT __stdcall get_BuildByLevelEffect (
        /*[out,retval]*/ enum MsoAnimateByLevel * BuildByLevelEffect ) = 0;
      virtual HRESULT __stdcall get_Dim (
        /*[out,retval]*/ struct ColorFormat * * Dim ) = 0;
      virtual HRESULT __stdcall get_PlaySettings (
        /*[out,retval]*/ struct PlaySettings * * PlaySettings ) = 0;
      virtual HRESULT __stdcall get_SoundEffect (
        /*[out,retval]*/ struct SoundEffect * * SoundEffect ) = 0;
      virtual HRESULT __stdcall get_TextUnitEffect (
        /*[out,retval]*/ enum MsoAnimTextUnitEffect * TextUnitEffect ) = 0;
};

enum MsoAnimType
{
    msoAnimTypeMixed = -2,
    msoAnimTypeNone = 0,
    msoAnimTypeMotion = 1,
    msoAnimTypeColor = 2,
    msoAnimTypeScale = 3,
    msoAnimTypeRotation = 4,
    msoAnimTypeProperty = 5,
    msoAnimTypeCommand = 6,
    msoAnimTypeFilter = 7,
    msoAnimTypeSet = 8
};

enum MsoAnimAdditive
{
    msoAnimAdditiveAddBase = 1,
    msoAnimAdditiveAddSum = 2
};

enum MsoAnimAccumulate
{
    msoAnimAccumulateNone = 1,
    msoAnimAccumulateAlways = 2
};

struct __declspec(uuid("914934e5-5a91-11cf-8700-00aa0060263b"))
MotionEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetByX,put=PutByX))
    float ByX;
    __declspec(property(get=GetByY,put=PutByY))
    float ByY;
    __declspec(property(get=GetFromX,put=PutFromX))
    float FromX;
    __declspec(property(get=GetFromY,put=PutFromY))
    float FromY;
    __declspec(property(get=GetToX,put=PutToX))
    float ToX;
    __declspec(property(get=GetToY,put=PutToY))
    float ToY;
    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    float GetByX ( );
    void PutByX (
        float ByX );
    float GetByY ( );
    void PutByY (
        float ByY );
    float GetFromX ( );
    void PutFromX (
        float FromX );
    float GetFromY ( );
    void PutFromY (
        float FromY );
    float GetToX ( );
    void PutToX (
        float ToX );
    float GetToY ( );
    void PutToY (
        float ToY );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t Path );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ByX (
        /*[out,retval]*/ float * ByX ) = 0;
      virtual HRESULT __stdcall put_ByX (
        /*[in]*/ float ByX ) = 0;
      virtual HRESULT __stdcall get_ByY (
        /*[out,retval]*/ float * ByY ) = 0;
      virtual HRESULT __stdcall put_ByY (
        /*[in]*/ float ByY ) = 0;
      virtual HRESULT __stdcall get_FromX (
        /*[out,retval]*/ float * FromX ) = 0;
      virtual HRESULT __stdcall put_FromX (
        /*[in]*/ float FromX ) = 0;
      virtual HRESULT __stdcall get_FromY (
        /*[out,retval]*/ float * FromY ) = 0;
      virtual HRESULT __stdcall put_FromY (
        /*[in]*/ float FromY ) = 0;
      virtual HRESULT __stdcall get_ToX (
        /*[out,retval]*/ float * ToX ) = 0;
      virtual HRESULT __stdcall put_ToX (
        /*[in]*/ float ToX ) = 0;
      virtual HRESULT __stdcall get_ToY (
        /*[out,retval]*/ float * ToY ) = 0;
      virtual HRESULT __stdcall put_ToY (
        /*[in]*/ float ToY ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR Path ) = 0;
};

struct __declspec(uuid("914934e6-5a91-11cf-8700-00aa0060263b"))
ColorEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBy))
    ColorFormatPtr By;
    __declspec(property(get=GetFrom))
    ColorFormatPtr From;
    __declspec(property(get=GetTo))
    ColorFormatPtr To;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBy ( );
    ColorFormatPtr GetFrom ( );
    ColorFormatPtr GetTo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_By (
        /*[out,retval]*/ struct ColorFormat * * By ) = 0;
      virtual HRESULT __stdcall get_From (
        /*[out,retval]*/ struct ColorFormat * * From ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ struct ColorFormat * * To ) = 0;
};

struct __declspec(uuid("914934e7-5a91-11cf-8700-00aa0060263b"))
ScaleEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetByX,put=PutByX))
    float ByX;
    __declspec(property(get=GetByY,put=PutByY))
    float ByY;
    __declspec(property(get=GetFromX,put=PutFromX))
    float FromX;
    __declspec(property(get=GetFromY,put=PutFromY))
    float FromY;
    __declspec(property(get=GetToX,put=PutToX))
    float ToX;
    __declspec(property(get=GetToY,put=PutToY))
    float ToY;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    float GetByX ( );
    void PutByX (
        float ByX );
    float GetByY ( );
    void PutByY (
        float ByY );
    float GetFromX ( );
    void PutFromX (
        float FromX );
    float GetFromY ( );
    void PutFromY (
        float FromY );
    float GetToX ( );
    void PutToX (
        float ToX );
    float GetToY ( );
    void PutToY (
        float ToY );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ByX (
        /*[out,retval]*/ float * ByX ) = 0;
      virtual HRESULT __stdcall put_ByX (
        /*[in]*/ float ByX ) = 0;
      virtual HRESULT __stdcall get_ByY (
        /*[out,retval]*/ float * ByY ) = 0;
      virtual HRESULT __stdcall put_ByY (
        /*[in]*/ float ByY ) = 0;
      virtual HRESULT __stdcall get_FromX (
        /*[out,retval]*/ float * FromX ) = 0;
      virtual HRESULT __stdcall put_FromX (
        /*[in]*/ float FromX ) = 0;
      virtual HRESULT __stdcall get_FromY (
        /*[out,retval]*/ float * FromY ) = 0;
      virtual HRESULT __stdcall put_FromY (
        /*[in]*/ float FromY ) = 0;
      virtual HRESULT __stdcall get_ToX (
        /*[out,retval]*/ float * ToX ) = 0;
      virtual HRESULT __stdcall put_ToX (
        /*[in]*/ float ToX ) = 0;
      virtual HRESULT __stdcall get_ToY (
        /*[out,retval]*/ float * ToY ) = 0;
      virtual HRESULT __stdcall put_ToY (
        /*[in]*/ float ToY ) = 0;
};

struct __declspec(uuid("914934e8-5a91-11cf-8700-00aa0060263b"))
RotationEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBy,put=PutBy))
    float By;
    __declspec(property(get=GetFrom,put=PutFrom))
    float From;
    __declspec(property(get=GetTo,put=PutTo))
    float To;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    float GetBy ( );
    void PutBy (
        float By );
    float GetFrom ( );
    void PutFrom (
        float From );
    float GetTo ( );
    void PutTo (
        float To );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_By (
        /*[out,retval]*/ float * By ) = 0;
      virtual HRESULT __stdcall put_By (
        /*[in]*/ float By ) = 0;
      virtual HRESULT __stdcall get_From (
        /*[out,retval]*/ float * From ) = 0;
      virtual HRESULT __stdcall put_From (
        /*[in]*/ float From ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ float * To ) = 0;
      virtual HRESULT __stdcall put_To (
        /*[in]*/ float To ) = 0;
};

enum MsoAnimProperty
{
    msoAnimNone = 0,
    msoAnimX = 1,
    msoAnimY = 2,
    msoAnimWidth = 3,
    msoAnimHeight = 4,
    msoAnimOpacity = 5,
    msoAnimRotation = 6,
    msoAnimColor = 7,
    msoAnimVisibility = 8,
    msoAnimTextFontBold = 100,
    msoAnimTextFontColor = 101,
    msoAnimTextFontEmboss = 102,
    msoAnimTextFontItalic = 103,
    msoAnimTextFontName = 104,
    msoAnimTextFontShadow = 105,
    msoAnimTextFontSize = 106,
    msoAnimTextFontSubscript = 107,
    msoAnimTextFontSuperscript = 108,
    msoAnimTextFontUnderline = 109,
    msoAnimTextFontStrikeThrough = 110,
    msoAnimTextBulletCharacter = 111,
    msoAnimTextBulletFontName = 112,
    msoAnimTextBulletNumber = 113,
    msoAnimTextBulletColor = 114,
    msoAnimTextBulletRelativeSize = 115,
    msoAnimTextBulletStyle = 116,
    msoAnimTextBulletType = 117,
    msoAnimShapePictureContrast = 1000,
    msoAnimShapePictureBrightness = 1001,
    msoAnimShapePictureGamma = 1002,
    msoAnimShapePictureGrayscale = 1003,
    msoAnimShapeFillOn = 1004,
    msoAnimShapeFillColor = 1005,
    msoAnimShapeFillOpacity = 1006,
    msoAnimShapeFillBackColor = 1007,
    msoAnimShapeLineOn = 1008,
    msoAnimShapeLineColor = 1009,
    msoAnimShapeShadowOn = 1010,
    msoAnimShapeShadowType = 1011,
    msoAnimShapeShadowColor = 1012,
    msoAnimShapeShadowOpacity = 1013,
    msoAnimShapeShadowOffsetX = 1014,
    msoAnimShapeShadowOffsetY = 1015
};

struct __declspec(uuid("914934eb-5a91-11cf-8700-00aa0060263b"))
AnimationPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetTime,put=PutTime))
    float Time;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    float GetTime ( );
    void PutTime (
        float Time );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & Value );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t Formula );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ float * Time ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ float Time ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * Formula ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR Formula ) = 0;
};

struct __declspec(uuid("914934ea-5a91-11cf-8700-00aa0060263b"))
AnimationPoints : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    AnimationPointPtr Item (
        int Index );
    AnimationPointPtr Add (
        int Index );
    enum Office::MsoTriState GetSmooth ( );
    void PutSmooth (
        enum Office::MsoTriState Smooth );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct AnimationPoint * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct AnimationPoint * * Add ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ enum Office::MsoTriState * Smooth ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ enum Office::MsoTriState Smooth ) = 0;
};

struct __declspec(uuid("914934e9-5a91-11cf-8700-00aa0060263b"))
PropertyEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProperty,put=PutProperty))
    enum MsoAnimProperty Property;
    __declspec(property(get=GetPoints))
    AnimationPointsPtr Points;
    __declspec(property(get=GetFrom,put=PutFrom))
    _variant_t From;
    __declspec(property(get=GetTo,put=PutTo))
    _variant_t To;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimProperty GetProperty ( );
    void PutProperty (
        enum MsoAnimProperty Property );
    AnimationPointsPtr GetPoints ( );
    _variant_t GetFrom ( );
    void PutFrom (
        const _variant_t & From );
    _variant_t GetTo ( );
    void PutTo (
        const _variant_t & To );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Property (
        /*[out,retval]*/ enum MsoAnimProperty * Property ) = 0;
      virtual HRESULT __stdcall put_Property (
        /*[in]*/ enum MsoAnimProperty Property ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ struct AnimationPoints * * Points ) = 0;
      virtual HRESULT __stdcall get_From (
        /*[out,retval]*/ VARIANT * From ) = 0;
      virtual HRESULT __stdcall put_From (
        /*[in]*/ VARIANT From ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ VARIANT * To ) = 0;
      virtual HRESULT __stdcall put_To (
        /*[in]*/ VARIANT To ) = 0;
};

enum PpAlertLevel
{
    ppAlertsNone = 1,
    ppAlertsAll = 2
};

enum PpRevisionInfo
{
    ppRevisionInfoNone = 0,
    ppRevisionInfoBaseline = 1,
    ppRevisionInfoMerged = 2
};

struct __declspec(uuid("914934ed-5a91-11cf-8700-00aa0060263b"))
AutoCorrect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayAutoCorrectOptions,put=PutDisplayAutoCorrectOptions))
    VARIANT_BOOL DisplayAutoCorrectOptions;
    __declspec(property(get=GetDisplayAutoLayoutOptions,put=PutDisplayAutoLayoutOptions))
    VARIANT_BOOL DisplayAutoLayoutOptions;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetDisplayAutoCorrectOptions ( );
    void PutDisplayAutoCorrectOptions (
        VARIANT_BOOL DisplayAutoCorrectOptions );
    VARIANT_BOOL GetDisplayAutoLayoutOptions ( );
    void PutDisplayAutoLayoutOptions (
        VARIANT_BOOL DisplayAutoLayoutOptions );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisplayAutoCorrectOptions (
        /*[out,retval]*/ VARIANT_BOOL * DisplayAutoCorrectOptions ) = 0;
      virtual HRESULT __stdcall put_DisplayAutoCorrectOptions (
        /*[in]*/ VARIANT_BOOL DisplayAutoCorrectOptions ) = 0;
      virtual HRESULT __stdcall get_DisplayAutoLayoutOptions (
        /*[out,retval]*/ VARIANT_BOOL * DisplayAutoLayoutOptions ) = 0;
      virtual HRESULT __stdcall put_DisplayAutoLayoutOptions (
        /*[in]*/ VARIANT_BOOL DisplayAutoLayoutOptions ) = 0;
};

struct __declspec(uuid("914934ee-5a91-11cf-8700-00aa0060263b"))
Options : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    enum Office::MsoTriState GetDisplayPasteOptions ( );
    void PutDisplayPasteOptions (
        enum Office::MsoTriState DisplayPasteOptions );
    enum Office::MsoTriState GetDoNotPromptForConvert ( );
    void PutDoNotPromptForConvert (
        enum Office::MsoTriState DoNotPromptForConvert );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisplayPasteOptions (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayPasteOptions ) = 0;
      virtual HRESULT __stdcall put_DisplayPasteOptions (
        /*[in]*/ enum Office::MsoTriState DisplayPasteOptions ) = 0;
      virtual HRESULT __stdcall get_DoNotPromptForConvert (
        /*[out,retval]*/ enum Office::MsoTriState * DoNotPromptForConvert ) = 0;
      virtual HRESULT __stdcall put_DoNotPromptForConvert (
        /*[in]*/ enum Office::MsoTriState DoNotPromptForConvert ) = 0;
};

enum MsoAnimCommandType
{
    msoAnimCommandTypeEvent = 0,
    msoAnimCommandTypeCall = 1,
    msoAnimCommandTypeVerb = 2
};

struct __declspec(uuid("914934ef-5a91-11cf-8700-00aa0060263b"))
CommandEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType,put=PutType))
    enum MsoAnimCommandType Type;
    __declspec(property(get=GetCommand,put=PutCommand))
    _bstr_t Command;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimCommandType GetType ( );
    void PutType (
        enum MsoAnimCommandType Type );
    _bstr_t GetCommand ( );
    void PutCommand (
        _bstr_t Command );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoAnimCommandType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum MsoAnimCommandType Type ) = 0;
      virtual HRESULT __stdcall get_Command (
        /*[out,retval]*/ BSTR * Command ) = 0;
      virtual HRESULT __stdcall put_Command (
        /*[in]*/ BSTR Command ) = 0;
};

enum MsoAnimFilterEffectType
{
    msoAnimFilterEffectTypeNone = 0,
    msoAnimFilterEffectTypeBarn = 1,
    msoAnimFilterEffectTypeBlinds = 2,
    msoAnimFilterEffectTypeBox = 3,
    msoAnimFilterEffectTypeCheckerboard = 4,
    msoAnimFilterEffectTypeCircle = 5,
    msoAnimFilterEffectTypeDiamond = 6,
    msoAnimFilterEffectTypeDissolve = 7,
    msoAnimFilterEffectTypeFade = 8,
    msoAnimFilterEffectTypeImage = 9,
    msoAnimFilterEffectTypePixelate = 10,
    msoAnimFilterEffectTypePlus = 11,
    msoAnimFilterEffectTypeRandomBar = 12,
    msoAnimFilterEffectTypeSlide = 13,
    msoAnimFilterEffectTypeStretch = 14,
    msoAnimFilterEffectTypeStrips = 15,
    msoAnimFilterEffectTypeWedge = 16,
    msoAnimFilterEffectTypeWheel = 17,
    msoAnimFilterEffectTypeWipe = 18
};

enum MsoAnimFilterEffectSubtype
{
    msoAnimFilterEffectSubtypeNone = 0,
    msoAnimFilterEffectSubtypeInVertical = 1,
    msoAnimFilterEffectSubtypeOutVertical = 2,
    msoAnimFilterEffectSubtypeInHorizontal = 3,
    msoAnimFilterEffectSubtypeOutHorizontal = 4,
    msoAnimFilterEffectSubtypeHorizontal = 5,
    msoAnimFilterEffectSubtypeVertical = 6,
    msoAnimFilterEffectSubtypeIn = 7,
    msoAnimFilterEffectSubtypeOut = 8,
    msoAnimFilterEffectSubtypeAcross = 9,
    msoAnimFilterEffectSubtypeFromLeft = 10,
    msoAnimFilterEffectSubtypeFromRight = 11,
    msoAnimFilterEffectSubtypeFromTop = 12,
    msoAnimFilterEffectSubtypeFromBottom = 13,
    msoAnimFilterEffectSubtypeDownLeft = 14,
    msoAnimFilterEffectSubtypeUpLeft = 15,
    msoAnimFilterEffectSubtypeDownRight = 16,
    msoAnimFilterEffectSubtypeUpRight = 17,
    msoAnimFilterEffectSubtypeSpokes1 = 18,
    msoAnimFilterEffectSubtypeSpokes2 = 19,
    msoAnimFilterEffectSubtypeSpokes3 = 20,
    msoAnimFilterEffectSubtypeSpokes4 = 21,
    msoAnimFilterEffectSubtypeSpokes8 = 22,
    msoAnimFilterEffectSubtypeLeft = 23,
    msoAnimFilterEffectSubtypeRight = 24,
    msoAnimFilterEffectSubtypeDown = 25,
    msoAnimFilterEffectSubtypeUp = 26
};

struct __declspec(uuid("914934f0-5a91-11cf-8700-00aa0060263b"))
FilterEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType,put=PutType))
    enum MsoAnimFilterEffectType Type;
    __declspec(property(get=GetSubtype,put=PutSubtype))
    enum MsoAnimFilterEffectSubtype Subtype;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimFilterEffectType GetType ( );
    void PutType (
        enum MsoAnimFilterEffectType Type );
    enum MsoAnimFilterEffectSubtype GetSubtype ( );
    void PutSubtype (
        enum MsoAnimFilterEffectSubtype Subtype );
    enum Office::MsoTriState GetReveal ( );
    void PutReveal (
        enum Office::MsoTriState Reveal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoAnimFilterEffectType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum MsoAnimFilterEffectType Type ) = 0;
      virtual HRESULT __stdcall get_Subtype (
        /*[out,retval]*/ enum MsoAnimFilterEffectSubtype * Subtype ) = 0;
      virtual HRESULT __stdcall put_Subtype (
        /*[in]*/ enum MsoAnimFilterEffectSubtype Subtype ) = 0;
      virtual HRESULT __stdcall get_Reveal (
        /*[out,retval]*/ enum Office::MsoTriState * Reveal ) = 0;
      virtual HRESULT __stdcall put_Reveal (
        /*[in]*/ enum Office::MsoTriState Reveal ) = 0;
};

struct __declspec(uuid("914934f1-5a91-11cf-8700-00aa0060263b"))
SetEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProperty,put=PutProperty))
    enum MsoAnimProperty Property;
    __declspec(property(get=GetTo,put=PutTo))
    _variant_t To;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimProperty GetProperty ( );
    void PutProperty (
        enum MsoAnimProperty Property );
    _variant_t GetTo ( );
    void PutTo (
        const _variant_t & To );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Property (
        /*[out,retval]*/ enum MsoAnimProperty * Property ) = 0;
      virtual HRESULT __stdcall put_Property (
        /*[in]*/ enum MsoAnimProperty Property ) = 0;
      virtual HRESULT __stdcall get_To (
        /*[out,retval]*/ VARIANT * To ) = 0;
      virtual HRESULT __stdcall put_To (
        /*[in]*/ VARIANT To ) = 0;
};

enum PpRemoveDocInfoType
{
    ppRDIComments = 1,
    ppRDIRemovePersonalInformation = 4,
    ppRDIDocumentProperties = 8,
    ppRDIDocumentWorkspace = 10,
    ppRDIInkAnnotations = 11,
    ppRDIPublishPath = 13,
    ppRDIDocumentServerProperties = 14,
    ppRDIDocumentManagementPolicy = 15,
    ppRDIContentType = 16,
    ppRDISlideUpdateInformation = 17,
    ppRDIAll = 99
};

enum PpCheckInVersionType
{
    ppCheckInMinorVersion = 0,
    ppCheckInMajorVersion = 1,
    ppCheckInOverwriteVersion = 2
};

enum MsoClickState
{
    msoClickStateAfterAllAnimations = -2,
    msoClickStateBeforeAutomaticAnimations = -1
};

enum PpFixedFormatType
{
    ppFixedFormatTypeXPS = 1,
    ppFixedFormatTypePDF = 2
};

enum PpFixedFormatIntent
{
    ppFixedFormatIntentScreen = 1,
    ppFixedFormatIntentPrint = 2
};

struct __declspec(uuid("914934f5-5a91-11cf-8700-00aa0060263b"))
TableStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    _bstr_t Id;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * Id ) = 0;
};

struct __declspec(uuid("914934f6-5a91-11cf-8700-00aa0060263b"))
CustomerData : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    Office::_CustomXMLPartPtr Item (
        _bstr_t Id );
    Office::_CustomXMLPartPtr Add ( );
    HRESULT Delete (
        _bstr_t Id );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ BSTR Id,
        /*[out,retval]*/ struct Office::_CustomXMLPart * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct Office::_CustomXMLPart * * Add ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR Id ) = 0;
};

struct __declspec(uuid("914934f7-5a91-11cf-8700-00aa0060263b"))
Research : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Query (
        _bstr_t ServiceID,
        VARIANT * QueryString,
        VARIANT * QueryLanguage,
        VARIANT_BOOL UseSelection,
        VARIANT_BOOL LaunchQuery );
    HRESULT SetLanguagePair (
        VARIANT * Language1,
        VARIANT * Language2 );
    VARIANT_BOOL IsResearchService (
        _bstr_t ServiceID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Query (
        /*[in]*/ BSTR ServiceID,
        /*[in]*/ VARIANT * QueryString,
        /*[in]*/ VARIANT * QueryLanguage,
        /*[in]*/ VARIANT_BOOL UseSelection,
        /*[in]*/ VARIANT_BOOL LaunchQuery ) = 0;
      virtual HRESULT __stdcall raw_SetLanguagePair (
        /*[in]*/ VARIANT * Language1,
        /*[in]*/ VARIANT * Language2 ) = 0;
      virtual HRESULT __stdcall raw_IsResearchService (
        /*[in]*/ BSTR ServiceID,
        /*[out,retval]*/ VARIANT_BOOL * IsResearchService ) = 0;
};

struct __declspec(uuid("914934f8-5a91-11cf-8700-00aa0060263b"))
TableBackground : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetPicture))
    PictureFormatPtr Picture;
    __declspec(property(get=GetReflection))
    Office::ReflectionFormatPtr Reflection;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;

    //
    // Wrapper methods for error-handling
    //

    FillFormatPtr GetFill ( );
    PictureFormatPtr GetPicture ( );
    Office::ReflectionFormatPtr GetReflection ( );
    ShadowFormatPtr GetShadow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * Fill ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct PictureFormat * * Picture ) = 0;
      virtual HRESULT __stdcall get_Reflection (
        /*[out,retval]*/ struct Office::ReflectionFormat * * Reflection ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * Shadow ) = 0;
};

struct __declspec(uuid("914934f9-5a91-11cf-8700-00aa0060263b"))
TextFrame2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetHasText))
    enum Office::MsoTriState HasText;
    __declspec(property(get=GetTextRange))
    Office::TextRange2Ptr TextRange;
    __declspec(property(get=GetColumn))
    Office::TextColumn2Ptr Column;
    __declspec(property(get=GetRuler))
    Office::Ruler2Ptr Ruler;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float MarginBottom );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float MarginLeft );
    float GetMarginRight ( );
    void PutMarginRight (
        float MarginRight );
    float GetMarginTop ( );
    void PutMarginTop (
        float MarginTop );
    enum Office::MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum Office::MsoTextOrientation Orientation );
    enum Office::MsoHorizontalAnchor GetHorizontalAnchor ( );
    void PutHorizontalAnchor (
        enum Office::MsoHorizontalAnchor HorizontalAnchor );
    enum Office::MsoVerticalAnchor GetVerticalAnchor ( );
    void PutVerticalAnchor (
        enum Office::MsoVerticalAnchor VerticalAnchor );
    enum Office::MsoPathFormat GetPathFormat ( );
    void PutPathFormat (
        enum Office::MsoPathFormat PathFormat );
    enum Office::MsoWarpFormat GetWarpFormat ( );
    void PutWarpFormat (
        enum Office::MsoWarpFormat WarpFormat );
    enum Office::MsoPresetTextEffect GetWordArtFormat ( );
    void PutWordArtFormat (
        enum Office::MsoPresetTextEffect WordArtFormat );
    enum Office::MsoTriState GetWordWrap ( );
    void PutWordWrap (
        enum Office::MsoTriState WordWrap );
    enum Office::MsoAutoSize GetAutoSize ( );
    void PutAutoSize (
        enum Office::MsoAutoSize AutoSize );
    ThreeDFormatPtr GetThreeD ( );
    enum Office::MsoTriState GetHasText ( );
    Office::TextRange2Ptr GetTextRange ( );
    Office::TextColumn2Ptr GetColumn ( );
    Office::Ruler2Ptr GetRuler ( );
    HRESULT DeleteText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ float * MarginBottom ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ float MarginBottom ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ float * MarginLeft ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ float MarginLeft ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ float * MarginRight ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ float MarginRight ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ float * MarginTop ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ float MarginTop ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum Office::MsoTextOrientation * Orientation ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum Office::MsoTextOrientation Orientation ) = 0;
      virtual HRESULT __stdcall get_HorizontalAnchor (
        /*[out,retval]*/ enum Office::MsoHorizontalAnchor * HorizontalAnchor ) = 0;
      virtual HRESULT __stdcall put_HorizontalAnchor (
        /*[in]*/ enum Office::MsoHorizontalAnchor HorizontalAnchor ) = 0;
      virtual HRESULT __stdcall get_VerticalAnchor (
        /*[out,retval]*/ enum Office::MsoVerticalAnchor * VerticalAnchor ) = 0;
      virtual HRESULT __stdcall put_VerticalAnchor (
        /*[in]*/ enum Office::MsoVerticalAnchor VerticalAnchor ) = 0;
      virtual HRESULT __stdcall get_PathFormat (
        /*[out,retval]*/ enum Office::MsoPathFormat * PathFormat ) = 0;
      virtual HRESULT __stdcall put_PathFormat (
        /*[in]*/ enum Office::MsoPathFormat PathFormat ) = 0;
      virtual HRESULT __stdcall get_WarpFormat (
        /*[out,retval]*/ enum Office::MsoWarpFormat * WarpFormat ) = 0;
      virtual HRESULT __stdcall put_WarpFormat (
        /*[in]*/ enum Office::MsoWarpFormat WarpFormat ) = 0;
      virtual HRESULT __stdcall get_WordArtFormat (
        /*[out,retval]*/ enum Office::MsoPresetTextEffect * WordArtFormat ) = 0;
      virtual HRESULT __stdcall put_WordArtFormat (
        /*[in]*/ enum Office::MsoPresetTextEffect WordArtFormat ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ enum Office::MsoTriState * WordWrap ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ enum Office::MsoTriState WordWrap ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ enum Office::MsoAutoSize * AutoSize ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ enum Office::MsoAutoSize AutoSize ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * ThreeD ) = 0;
      virtual HRESULT __stdcall get_HasText (
        /*[out,retval]*/ enum Office::MsoTriState * pHasText ) = 0;
      virtual HRESULT __stdcall get_TextRange (
        /*[out,retval]*/ struct Office::TextRange2 * * Range ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[out,retval]*/ struct Office::TextColumn2 * * Column ) = 0;
      virtual HRESULT __stdcall get_Ruler (
        /*[out,retval]*/ struct Office::Ruler2 * * Ruler ) = 0;
      virtual HRESULT __stdcall raw_DeleteText ( ) = 0;
};

struct __declspec(uuid("91493442-5a91-11cf-8700-00aa0060263b"))
_Application : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoCorrect))
    AutoCorrectPtr AutoCorrect;
    __declspec(property(get=GetOptions))
    OptionsPtr Options;
    __declspec(property(get=GetDisplayDocumentInformationPanel,put=PutDisplayDocumentInformationPanel))
    VARIANT_BOOL DisplayDocumentInformationPanel;
    __declspec(property(get=GetAssistance))
    Office::IAssistancePtr Assistance;
    __declspec(property(get=GetActiveEncryptionSession))
    long ActiveEncryptionSession;
    __declspec(property(get=GetPresentations))
    PresentationsPtr Presentations;
    __declspec(property(get=GetWindows))
    DocumentWindowsPtr Windows;
    __declspec(property(get=GetDialogs))
    IUnknownPtr Dialogs;
    __declspec(property(get=GetActiveWindow))
    DocumentWindowPtr ActiveWindow;
    __declspec(property(get=GetActivePresentation))
    _PresentationPtr ActivePresentation;
    __declspec(property(get=GetSlideShowWindows))
    SlideShowWindowsPtr SlideShowWindows;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;
    __declspec(property(get=GetFileSearch))
    Office::FileSearchPtr FileSearch;
    __declspec(property(get=GetFileFind))
    Office::IFindPtr FileFind;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetOperatingSystem))
    _bstr_t OperatingSystem;
    __declspec(property(get=GetActivePrinter))
    _bstr_t ActivePrinter;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetVBE))
    VBIDE::VBEPtr VBE;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum PpWindowState WindowState;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetActive))
    enum Office::MsoTriState Active;
    __declspec(property(get=GetAnswerWizard))
    Office::AnswerWizardPtr AnswerWizard;
    __declspec(property(get=GetCOMAddIns))
    Office::COMAddInsPtr COMAddIns;
    __declspec(property(get=GetProductCode))
    _bstr_t ProductCode;
    __declspec(property(get=GetDefaultWebOptions))
    DefaultWebOptionsPtr DefaultWebOptions;
    __declspec(property(get=GetLanguageSettings))
    Office::LanguageSettingsPtr LanguageSettings;
    __declspec(property(get=GetMsoDebugOptions))
    Office::MsoDebugOptionsPtr MsoDebugOptions;
    __declspec(property(get=GetMarker))
    IUnknownPtr Marker;
    __declspec(property(get=GetFileDialog))
    Office::FileDialogPtr FileDialog[];
    __declspec(property(get=GetNewPresentation))
    Office::NewFilePtr NewPresentation;
    __declspec(property(get=GetDisplayAlerts,put=PutDisplayAlerts))
    enum PpAlertLevel DisplayAlerts;

    //
    // Wrapper methods for error-handling
    //

    PresentationsPtr GetPresentations ( );
    DocumentWindowsPtr GetWindows ( );
    IUnknownPtr GetDialogs ( );
    DocumentWindowPtr GetActiveWindow ( );
    _PresentationPtr GetActivePresentation ( );
    SlideShowWindowsPtr GetSlideShowWindows ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    _bstr_t GetPath ( );
    _bstr_t GetName ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Caption );
    Office::AssistantPtr GetAssistant ( );
    Office::FileSearchPtr GetFileSearch ( );
    Office::IFindPtr GetFileFind ( );
    _bstr_t GetBuild ( );
    _bstr_t GetVersion ( );
    _bstr_t GetOperatingSystem ( );
    _bstr_t GetActivePrinter ( );
    long GetCreator ( );
    AddInsPtr GetAddIns ( );
    VBIDE::VBEPtr GetVBE ( );
    HRESULT Help (
        _bstr_t HelpFile,
        int ContextID );
    HRESULT Quit ( );
    _variant_t Run (
        _bstr_t MacroName,
        SAFEARRAY * * safeArrayOfParams );
    IUnknownPtr PPFileDialog (
        enum PpFileDialogType Type );
    HRESULT LaunchSpelling (
        struct DocumentWindow * pWindow );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetWidth ( );
    void PutWidth (
        float Width );
    float GetHeight ( );
    void PutHeight (
        float Height );
    enum PpWindowState GetWindowState ( );
    void PutWindowState (
        enum PpWindowState WindowState );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    long GetHWND ( );
    enum Office::MsoTriState GetActive ( );
    HRESULT Activate ( );
    Office::AnswerWizardPtr GetAnswerWizard ( );
    Office::COMAddInsPtr GetCOMAddIns ( );
    _bstr_t GetProductCode ( );
    DefaultWebOptionsPtr GetDefaultWebOptions ( );
    Office::LanguageSettingsPtr GetLanguageSettings ( );
    Office::MsoDebugOptionsPtr GetMsoDebugOptions ( );
    enum Office::MsoTriState GetShowWindowsInTaskbar ( );
    void PutShowWindowsInTaskbar (
        enum Office::MsoTriState ShowWindowsInTaskbar );
    IUnknownPtr GetMarker ( );
    enum Office::MsoFeatureInstall GetFeatureInstall ( );
    void PutFeatureInstall (
        enum Office::MsoFeatureInstall FeatureInstall );
    VARIANT_BOOL GetOptionFlag (
        long Option,
        VARIANT_BOOL Persist );
    HRESULT SetOptionFlag (
        long Option,
        VARIANT_BOOL State,
        VARIANT_BOOL Persist );
    Office::FileDialogPtr GetFileDialog (
        enum Office::MsoFileDialogType Type );
    enum Office::MsoTriState GetDisplayGridLines ( );
    void PutDisplayGridLines (
        enum Office::MsoTriState DisplayGridLines );
    enum Office::MsoAutomationSecurity GetAutomationSecurity ( );
    void PutAutomationSecurity (
        enum Office::MsoAutomationSecurity AutomationSecurity );
    Office::NewFilePtr GetNewPresentation ( );
    enum PpAlertLevel GetDisplayAlerts ( );
    void PutDisplayAlerts (
        enum PpAlertLevel DisplayAlerts );
    enum Office::MsoTriState GetShowStartupDialog ( );
    void PutShowStartupDialog (
        enum Office::MsoTriState ShowStartupDialog );
    HRESULT SetPerfMarker (
        int Marker );
    AutoCorrectPtr GetAutoCorrect ( );
    OptionsPtr GetOptions ( );
    HRESULT LaunchPublishSlidesDialog (
        _bstr_t SlideLibraryUrl );
    HRESULT LaunchSendToPPTDialog (
        VARIANT * SlideUrls );
    VARIANT_BOOL GetDisplayDocumentInformationPanel ( );
    void PutDisplayDocumentInformationPanel (
        VARIANT_BOOL DisplayDocumentInformationPanel );
    Office::IAssistancePtr GetAssistance ( );
    long GetActiveEncryptionSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Presentations (
        /*[out,retval]*/ struct Presentations * * Presentations ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct DocumentWindows * * Windows ) = 0;
      virtual HRESULT __stdcall get_Dialogs (
        /*[out,retval]*/ IUnknown * * Dialogs ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct DocumentWindow * * ActiveWindow ) = 0;
      virtual HRESULT __stdcall get_ActivePresentation (
        /*[out,retval]*/ struct _Presentation * * ActivePresentation ) = 0;
      virtual HRESULT __stdcall get_SlideShowWindows (
        /*[out,retval]*/ struct SlideShowWindows * * SlideShowWindows ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * CommandBars ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ struct Office::Assistant * * Assistant ) = 0;
      virtual HRESULT __stdcall get_FileSearch (
        /*[out,retval]*/ struct Office::FileSearch * * FileSearch ) = 0;
      virtual HRESULT __stdcall get_FileFind (
        /*[out,retval]*/ struct Office::IFind * * FileFind ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_OperatingSystem (
        /*[out,retval]*/ BSTR * OperatingSystem ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[out,retval]*/ BSTR * ActivePrinter ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * Creator ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * AddIns ) = 0;
      virtual HRESULT __stdcall get_VBE (
        /*[out,retval]*/ struct VBIDE::VBE * * VBE ) = 0;
      virtual HRESULT __stdcall raw_Help (
        /*[in]*/ BSTR HelpFile,
        /*[in]*/ int ContextID ) = 0;
      virtual HRESULT __stdcall raw_Quit ( ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ BSTR MacroName,
        /*[in]*/ SAFEARRAY * * safeArrayOfParams,
        /*[out,retval]*/ VARIANT * Run ) = 0;
      virtual HRESULT __stdcall raw_PPFileDialog (
        /*[in]*/ enum PpFileDialogType Type,
        /*[out,retval]*/ IUnknown * * PPFileDialog ) = 0;
      virtual HRESULT __stdcall raw_LaunchSpelling (
        /*[in]*/ struct DocumentWindow * pWindow ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum PpWindowState * WindowState ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum PpWindowState WindowState ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ long * HWND ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ enum Office::MsoTriState * Active ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_AnswerWizard (
        /*[out,retval]*/ struct Office::AnswerWizard * * AnswerWizard ) = 0;
      virtual HRESULT __stdcall get_COMAddIns (
        /*[out,retval]*/ struct Office::COMAddIns * * COMAddIns ) = 0;
      virtual HRESULT __stdcall get_ProductCode (
        /*[out,retval]*/ BSTR * ProductCode ) = 0;
      virtual HRESULT __stdcall get_DefaultWebOptions (
        /*[out,retval]*/ struct DefaultWebOptions * * DefaultWebOptions ) = 0;
      virtual HRESULT __stdcall get_LanguageSettings (
        /*[out,retval]*/ struct Office::LanguageSettings * * LanguageSettings ) = 0;
      virtual HRESULT __stdcall get_MsoDebugOptions (
        /*[out,retval]*/ struct Office::MsoDebugOptions * * MsoDebugOptions ) = 0;
      virtual HRESULT __stdcall get_ShowWindowsInTaskbar (
        /*[out,retval]*/ enum Office::MsoTriState * ShowWindowsInTaskbar ) = 0;
      virtual HRESULT __stdcall put_ShowWindowsInTaskbar (
        /*[in]*/ enum Office::MsoTriState ShowWindowsInTaskbar ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ IUnknown * * Marker ) = 0;
      virtual HRESULT __stdcall get_FeatureInstall (
        /*[out,retval]*/ enum Office::MsoFeatureInstall * FeatureInstall ) = 0;
      virtual HRESULT __stdcall put_FeatureInstall (
        /*[in]*/ enum Office::MsoFeatureInstall FeatureInstall ) = 0;
      virtual HRESULT __stdcall raw_GetOptionFlag (
        /*[in]*/ long Option,
        /*[in]*/ VARIANT_BOOL Persist,
        /*[out,retval]*/ VARIANT_BOOL * GetOptionFlag ) = 0;
      virtual HRESULT __stdcall raw_SetOptionFlag (
        /*[in]*/ long Option,
        /*[in]*/ VARIANT_BOOL State,
        /*[in]*/ VARIANT_BOOL Persist ) = 0;
      virtual HRESULT __stdcall get_FileDialog (
        /*[in]*/ enum Office::MsoFileDialogType Type,
        /*[out,retval]*/ struct Office::FileDialog * * FileDialog ) = 0;
      virtual HRESULT __stdcall get_DisplayGridLines (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayGridLines ) = 0;
      virtual HRESULT __stdcall put_DisplayGridLines (
        /*[in]*/ enum Office::MsoTriState DisplayGridLines ) = 0;
      virtual HRESULT __stdcall get_AutomationSecurity (
        /*[out,retval]*/ enum Office::MsoAutomationSecurity * AutomationSecurity ) = 0;
      virtual HRESULT __stdcall put_AutomationSecurity (
        /*[in]*/ enum Office::MsoAutomationSecurity AutomationSecurity ) = 0;
      virtual HRESULT __stdcall get_NewPresentation (
        /*[out,retval]*/ struct Office::NewFile * * NewPresentation ) = 0;
      virtual HRESULT __stdcall get_DisplayAlerts (
        /*[out,retval]*/ enum PpAlertLevel * DisplayAlerts ) = 0;
      virtual HRESULT __stdcall put_DisplayAlerts (
        /*[in]*/ enum PpAlertLevel DisplayAlerts ) = 0;
      virtual HRESULT __stdcall get_ShowStartupDialog (
        /*[out,retval]*/ enum Office::MsoTriState * ShowStartupDialog ) = 0;
      virtual HRESULT __stdcall put_ShowStartupDialog (
        /*[in]*/ enum Office::MsoTriState ShowStartupDialog ) = 0;
      virtual HRESULT __stdcall raw_SetPerfMarker (
        /*[in]*/ int Marker ) = 0;
      virtual HRESULT __stdcall get_AutoCorrect (
        /*[out,retval]*/ struct AutoCorrect * * AutoCorrect ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ struct Options * * Options ) = 0;
      virtual HRESULT __stdcall raw_LaunchPublishSlidesDialog (
        /*[in]*/ BSTR SlideLibraryUrl ) = 0;
      virtual HRESULT __stdcall raw_LaunchSendToPPTDialog (
        /*[in]*/ VARIANT * SlideUrls ) = 0;
      virtual HRESULT __stdcall get_DisplayDocumentInformationPanel (
        /*[out,retval]*/ VARIANT_BOOL * DisplayDocumentInformationPanel ) = 0;
      virtual HRESULT __stdcall put_DisplayDocumentInformationPanel (
        /*[in]*/ VARIANT_BOOL DisplayDocumentInformationPanel ) = 0;
      virtual HRESULT __stdcall get_Assistance (
        /*[out,retval]*/ struct Office::IAssistance * * Assistance ) = 0;
      virtual HRESULT __stdcall get_ActiveEncryptionSession (
        /*[out,retval]*/ long * ActiveEncryptionSession ) = 0;
};

struct __declspec(uuid("91493451-5a91-11cf-8700-00aa0060263b"))
_Global : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActivePresentation))
    _PresentationPtr ActivePresentation;
    __declspec(property(get=GetActiveWindow))
    DocumentWindowPtr ActiveWindow;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;
    __declspec(property(get=GetDialogs))
    IUnknownPtr Dialogs;
    __declspec(property(get=GetPresentations))
    PresentationsPtr Presentations;
    __declspec(property(get=GetSlideShowWindows))
    SlideShowWindowsPtr SlideShowWindows;
    __declspec(property(get=GetWindows))
    DocumentWindowsPtr Windows;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetAnswerWizard))
    Office::AnswerWizardPtr AnswerWizard;

    //
    // Wrapper methods for error-handling
    //

    _PresentationPtr GetActivePresentation ( );
    DocumentWindowPtr GetActiveWindow ( );
    AddInsPtr GetAddIns ( );
    _ApplicationPtr GetApplication ( );
    Office::AssistantPtr GetAssistant ( );
    IUnknownPtr GetDialogs ( );
    PresentationsPtr GetPresentations ( );
    SlideShowWindowsPtr GetSlideShowWindows ( );
    DocumentWindowsPtr GetWindows ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    Office::AnswerWizardPtr GetAnswerWizard ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ActivePresentation (
        /*[out,retval]*/ struct _Presentation * * ActivePresentation ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct DocumentWindow * * ActiveWindow ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * AddIns ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ struct Office::Assistant * * Assistant ) = 0;
      virtual HRESULT __stdcall get_Dialogs (
        /*[out,retval]*/ IUnknown * * Dialogs ) = 0;
      virtual HRESULT __stdcall get_Presentations (
        /*[out,retval]*/ struct Presentations * * Presentations ) = 0;
      virtual HRESULT __stdcall get_SlideShowWindows (
        /*[out,retval]*/ struct SlideShowWindows * * SlideShowWindows ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct DocumentWindows * * Windows ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * CommandBars ) = 0;
      virtual HRESULT __stdcall get_AnswerWizard (
        /*[out,retval]*/ struct Office::AnswerWizard * * AnswerWizard ) = 0;
};

struct __declspec(uuid("91493454-5a91-11cf-8700-00aa0060263b"))
Selection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum PpSelectionType Type;
    __declspec(property(get=GetSlideRange))
    SlideRangePtr SlideRange;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetTextRange))
    TextRangePtr TextRange;
    __declspec(property(get=GetChildShapeRange))
    ShapeRangePtr ChildShapeRange;
    __declspec(property(get=GetHasChildShapeRange))
    VARIANT_BOOL HasChildShapeRange;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Delete ( );
    HRESULT Unselect ( );
    enum PpSelectionType GetType ( );
    SlideRangePtr GetSlideRange ( );
    ShapeRangePtr GetShapeRange ( );
    TextRangePtr GetTextRange ( );
    ShapeRangePtr GetChildShapeRange ( );
    VARIANT_BOOL GetHasChildShapeRange ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Unselect ( ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpSelectionType * Type ) = 0;
      virtual HRESULT __stdcall get_SlideRange (
        /*[out,retval]*/ struct SlideRange * * SlideRange ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * ShapeRange ) = 0;
      virtual HRESULT __stdcall get_TextRange (
        /*[out,retval]*/ struct TextRange * * TextRange ) = 0;
      virtual HRESULT __stdcall get_ChildShapeRange (
        /*[out,retval]*/ struct ShapeRange * * ChildShapeRange ) = 0;
      virtual HRESULT __stdcall get_HasChildShapeRange (
        /*[out,retval]*/ VARIANT_BOOL * HasChildShapeRange ) = 0;
};

struct __declspec(uuid("91493457-5a91-11cf-8700-00aa0060263b"))
DocumentWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetActivePane))
    PanePtr ActivePane;
    __declspec(property(get=GetPanes))
    PanesPtr Panes;
    __declspec(property(get=GetSplitVertical,put=PutSplitVertical))
    long SplitVertical;
    __declspec(property(get=GetSplitHorizontal,put=PutSplitHorizontal))
    long SplitHorizontal;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSelection))
    SelectionPtr Selection;
    __declspec(property(get=GetView))
    ViewPtr View;
    __declspec(property(get=GetPresentation))
    _PresentationPtr Presentation;
    __declspec(property(get=GetViewType,put=PutViewType))
    enum PpViewType ViewType;
    __declspec(property(get=GetActive))
    enum Office::MsoTriState Active;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum PpWindowState WindowState;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SelectionPtr GetSelection ( );
    ViewPtr GetView ( );
    _PresentationPtr GetPresentation ( );
    enum PpViewType GetViewType ( );
    void PutViewType (
        enum PpViewType ViewType );
    enum Office::MsoTriState GetBlackAndWhite ( );
    void PutBlackAndWhite (
        enum Office::MsoTriState BlackAndWhite );
    enum Office::MsoTriState GetActive ( );
    enum PpWindowState GetWindowState ( );
    void PutWindowState (
        enum PpWindowState WindowState );
    _bstr_t GetCaption ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetWidth ( );
    void PutWidth (
        float Width );
    float GetHeight ( );
    void PutHeight (
        float Height );
    HRESULT FitToPage ( );
    HRESULT Activate ( );
    HRESULT LargeScroll (
        int Down,
        int Up,
        int ToRight,
        int ToLeft );
    HRESULT SmallScroll (
        int Down,
        int Up,
        int ToRight,
        int ToLeft );
    DocumentWindowPtr NewWindow ( );
    HRESULT Close ( );
    long GetHWND ( );
    PanePtr GetActivePane ( );
    PanesPtr GetPanes ( );
    long GetSplitVertical ( );
    void PutSplitVertical (
        long SplitVertical );
    long GetSplitHorizontal ( );
    void PutSplitHorizontal (
        long SplitHorizontal );
    IDispatchPtr RangeFromPoint (
        int X,
        int Y );
    int PointsToScreenPixelsX (
        float Points );
    int PointsToScreenPixelsY (
        float Points );
    HRESULT ScrollIntoView (
        float Left,
        float Top,
        float Width,
        float Height,
        enum Office::MsoTriState Start );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ struct Selection * * Selection ) = 0;
      virtual HRESULT __stdcall get_View (
        /*[out,retval]*/ struct View * * View ) = 0;
      virtual HRESULT __stdcall get_Presentation (
        /*[out,retval]*/ struct _Presentation * * Presentation ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ enum PpViewType * ViewType ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ enum PpViewType ViewType ) = 0;
      virtual HRESULT __stdcall get_BlackAndWhite (
        /*[out,retval]*/ enum Office::MsoTriState * BlackAndWhite ) = 0;
      virtual HRESULT __stdcall put_BlackAndWhite (
        /*[in]*/ enum Office::MsoTriState BlackAndWhite ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ enum Office::MsoTriState * Active ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum PpWindowState * WindowState ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum PpWindowState WindowState ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall raw_FitToPage ( ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_LargeScroll (
        /*[in]*/ int Down,
        /*[in]*/ int Up,
        /*[in]*/ int ToRight,
        /*[in]*/ int ToLeft ) = 0;
      virtual HRESULT __stdcall raw_SmallScroll (
        /*[in]*/ int Down,
        /*[in]*/ int Up,
        /*[in]*/ int ToRight,
        /*[in]*/ int ToLeft ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[out,retval]*/ struct DocumentWindow * * NewWindow ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ long * HWND ) = 0;
      virtual HRESULT __stdcall get_ActivePane (
        /*[out,retval]*/ struct Pane * * ActivePane ) = 0;
      virtual HRESULT __stdcall get_Panes (
        /*[out,retval]*/ struct Panes * * Panes ) = 0;
      virtual HRESULT __stdcall get_SplitVertical (
        /*[out,retval]*/ long * SplitVertical ) = 0;
      virtual HRESULT __stdcall put_SplitVertical (
        /*[in]*/ long SplitVertical ) = 0;
      virtual HRESULT __stdcall get_SplitHorizontal (
        /*[out,retval]*/ long * SplitHorizontal ) = 0;
      virtual HRESULT __stdcall put_SplitHorizontal (
        /*[in]*/ long SplitHorizontal ) = 0;
      virtual HRESULT __stdcall raw_RangeFromPoint (
        /*[in]*/ int X,
        /*[in]*/ int Y,
        /*[out,retval]*/ IDispatch * * RangeFromPoint ) = 0;
      virtual HRESULT __stdcall raw_PointsToScreenPixelsX (
        /*[in]*/ float Points,
        /*[out,retval]*/ int * PointsToScreenPixelsX ) = 0;
      virtual HRESULT __stdcall raw_PointsToScreenPixelsY (
        /*[in]*/ float Points,
        /*[out,retval]*/ int * PointsToScreenPixelsY ) = 0;
      virtual HRESULT __stdcall raw_ScrollIntoView (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[in]*/ enum Office::MsoTriState Start ) = 0;
};

struct __declspec(uuid("91493455-5a91-11cf-8700-00aa0060263b"))
DocumentWindows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    DocumentWindowPtr Item (
        int Index );
    HRESULT Arrange (
        enum PpArrangeStyle arrangeStyle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct DocumentWindow * * Item ) = 0;
      virtual HRESULT __stdcall raw_Arrange (
        /*[in]*/ enum PpArrangeStyle arrangeStyle ) = 0;
};

struct __declspec(uuid("91493469-5a91-11cf-8700-00aa0060263b"))
Slides : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _SlidePtr Item (
        const _variant_t & Index );
    _SlidePtr FindBySlideID (
        long SlideID );
    _SlidePtr Add (
        int Index,
        enum PpSlideLayout Layout );
    int InsertFromFile (
        _bstr_t FileName,
        int Index,
        int SlideStart,
        int SlideEnd );
    SlideRangePtr Range (
        const _variant_t & Index = vtMissing );
    SlideRangePtr Paste (
        int Index );
    _SlidePtr AddSlide (
        int Index,
        struct CustomLayout * pCustomLayout );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _Slide * * Item ) = 0;
      virtual HRESULT __stdcall raw_FindBySlideID (
        /*[in]*/ long SlideID,
        /*[out,retval]*/ struct _Slide * * FindBySlideID ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int Index,
        /*[in]*/ enum PpSlideLayout Layout,
        /*[out,retval]*/ struct _Slide * * Add ) = 0;
      virtual HRESULT __stdcall raw_InsertFromFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ int Index,
        /*[in]*/ int SlideStart,
        /*[in]*/ int SlideEnd,
        /*[out,retval]*/ int * FromFile ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SlideRange * * Range ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct SlideRange * * Paste ) = 0;
      virtual HRESULT __stdcall raw_AddSlide (
        /*[in]*/ int Index,
        /*[in]*/ struct CustomLayout * pCustomLayout,
        /*[out,retval]*/ struct _Slide * * Slide ) = 0;
};

struct __declspec(uuid("9149346a-5a91-11cf-8700-00aa0060263b"))
_Slide : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetDesign,put=PutDesign))
    DesignPtr Design;
    __declspec(property(get=GetTimeLine))
    TimeLinePtr TimeLine;
    __declspec(property(get=GetSectionNumber))
    int SectionNumber;
    __declspec(property(get=GetCustomLayout,put=PutCustomLayout))
    CustomLayoutPtr CustomLayout;
    __declspec(property(get=GetThemeColorScheme))
    Office::ThemeColorSchemePtr ThemeColorScheme;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetHeadersFooters))
    HeadersFootersPtr HeadersFooters;
    __declspec(property(get=GetSlideShowTransition))
    SlideShowTransitionPtr SlideShowTransition;
    __declspec(property(get=GetColorScheme,put=PutColorScheme))
    ColorSchemePtr ColorScheme;
    __declspec(property(get=GetBackground))
    ShapeRangePtr Background;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSlideID))
    long SlideID;
    __declspec(property(get=GetPrintSteps))
    int PrintSteps;
    __declspec(property(get=GetLayout,put=PutLayout))
    enum PpSlideLayout Layout;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetSlideIndex))
    int SlideIndex;
    __declspec(property(get=GetSlideNumber))
    int SlideNumber;
    __declspec(property(get=GetNotesPage))
    SlideRangePtr NotesPage;
    __declspec(property(get=GetMaster))
    _MasterPtr Master;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapesPtr GetShapes ( );
    HeadersFootersPtr GetHeadersFooters ( );
    SlideShowTransitionPtr GetSlideShowTransition ( );
    ColorSchemePtr GetColorScheme ( );
    void PutColorScheme (
        struct ColorScheme * ColorScheme );
    ShapeRangePtr GetBackground ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    long GetSlideID ( );
    int GetPrintSteps ( );
    HRESULT Select ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    enum PpSlideLayout GetLayout ( );
    void PutLayout (
        enum PpSlideLayout Layout );
    SlideRangePtr Duplicate ( );
    HRESULT Delete ( );
    TagsPtr GetTags ( );
    int GetSlideIndex ( );
    int GetSlideNumber ( );
    enum Office::MsoTriState GetDisplayMasterShapes ( );
    void PutDisplayMasterShapes (
        enum Office::MsoTriState DisplayMasterShapes );
    enum Office::MsoTriState GetFollowMasterBackground ( );
    void PutFollowMasterBackground (
        enum Office::MsoTriState FollowMasterBackground );
    SlideRangePtr GetNotesPage ( );
    _MasterPtr GetMaster ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT Export (
        _bstr_t FileName,
        _bstr_t FilterName,
        int ScaleWidth,
        int ScaleHeight );
    Office::ScriptsPtr GetScripts ( );
    CommentsPtr GetComments ( );
    DesignPtr GetDesign ( );
    void PutDesign (
        struct Design * Design );
    HRESULT MoveTo (
        int toPos );
    TimeLinePtr GetTimeLine ( );
    HRESULT ApplyTemplate (
        _bstr_t FileName );
    int GetSectionNumber ( );
    CustomLayoutPtr GetCustomLayout ( );
    void PutCustomLayout (
        struct CustomLayout * CustomLayout );
    HRESULT ApplyTheme (
        _bstr_t themeName );
    Office::ThemeColorSchemePtr GetThemeColorScheme ( );
    HRESULT ApplyThemeColorScheme (
        _bstr_t themeColorSchemeName );
    enum Office::MsoBackgroundStyleIndex GetBackgroundStyle ( );
    void PutBackgroundStyle (
        enum Office::MsoBackgroundStyleIndex BackgroundStyle );
    CustomerDataPtr GetCustomerData ( );
    HRESULT PublishSlides (
        _bstr_t SlideLibraryUrl,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL UseSlideOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * Shapes ) = 0;
      virtual HRESULT __stdcall get_HeadersFooters (
        /*[out,retval]*/ struct HeadersFooters * * HeadersFooters ) = 0;
      virtual HRESULT __stdcall get_SlideShowTransition (
        /*[out,retval]*/ struct SlideShowTransition * * SlideShowTransition ) = 0;
      virtual HRESULT __stdcall get_ColorScheme (
        /*[out,retval]*/ struct ColorScheme * * ColorScheme ) = 0;
      virtual HRESULT __stdcall put_ColorScheme (
        /*[in]*/ struct ColorScheme * ColorScheme ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct ShapeRange * * Background ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_SlideID (
        /*[out,retval]*/ long * SlideID ) = 0;
      virtual HRESULT __stdcall get_PrintSteps (
        /*[out,retval]*/ int * PrintSteps ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum PpSlideLayout * Layout ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ enum PpSlideLayout Layout ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct SlideRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_SlideIndex (
        /*[out,retval]*/ int * SlideIndex ) = 0;
      virtual HRESULT __stdcall get_SlideNumber (
        /*[out,retval]*/ int * SlideNumber ) = 0;
      virtual HRESULT __stdcall get_DisplayMasterShapes (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall put_DisplayMasterShapes (
        /*[in]*/ enum Office::MsoTriState DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall get_FollowMasterBackground (
        /*[out,retval]*/ enum Office::MsoTriState * FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall put_FollowMasterBackground (
        /*[in]*/ enum Office::MsoTriState FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall get_NotesPage (
        /*[out,retval]*/ struct SlideRange * * NotesPage ) = 0;
      virtual HRESULT __stdcall get_Master (
        /*[out,retval]*/ struct _Master * * Master ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * Hyperlinks ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR FilterName,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * Scripts ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ struct Comments * * Comments ) = 0;
      virtual HRESULT __stdcall get_Design (
        /*[out,retval]*/ struct Design * * Design ) = 0;
      virtual HRESULT __stdcall put_Design (
        /*[in]*/ struct Design * Design ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ int toPos ) = 0;
      virtual HRESULT __stdcall get_TimeLine (
        /*[out,retval]*/ struct TimeLine * * TimeLine ) = 0;
      virtual HRESULT __stdcall raw_ApplyTemplate (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_SectionNumber (
        /*[out,retval]*/ int * SectionNumber ) = 0;
      virtual HRESULT __stdcall get_CustomLayout (
        /*[out,retval]*/ struct CustomLayout * * CustomLayout ) = 0;
      virtual HRESULT __stdcall put_CustomLayout (
        /*[in]*/ struct CustomLayout * CustomLayout ) = 0;
      virtual HRESULT __stdcall raw_ApplyTheme (
        /*[in]*/ BSTR themeName ) = 0;
      virtual HRESULT __stdcall get_ThemeColorScheme (
        /*[out,retval]*/ struct Office::ThemeColorScheme * * ThemeColorScheme ) = 0;
      virtual HRESULT __stdcall raw_ApplyThemeColorScheme (
        /*[in]*/ BSTR themeColorSchemeName ) = 0;
      virtual HRESULT __stdcall get_BackgroundStyle (
        /*[out,retval]*/ enum Office::MsoBackgroundStyleIndex * BackgroundStyle ) = 0;
      virtual HRESULT __stdcall put_BackgroundStyle (
        /*[in]*/ enum Office::MsoBackgroundStyleIndex BackgroundStyle ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
      virtual HRESULT __stdcall raw_PublishSlides (
        /*[in]*/ BSTR SlideLibraryUrl,
        /*[in]*/ VARIANT_BOOL Overwrite,
        /*[in]*/ VARIANT_BOOL UseSlideOrder ) = 0;
};

struct __declspec(uuid("9149346b-5a91-11cf-8700-00aa0060263b"))
SlideRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetHeadersFooters))
    HeadersFootersPtr HeadersFooters;
    __declspec(property(get=GetSlideShowTransition))
    SlideShowTransitionPtr SlideShowTransition;
    __declspec(property(get=GetColorScheme,put=PutColorScheme))
    ColorSchemePtr ColorScheme;
    __declspec(property(get=GetBackground))
    ShapeRangePtr Background;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSlideID))
    long SlideID;
    __declspec(property(get=GetPrintSteps))
    int PrintSteps;
    __declspec(property(get=GetLayout,put=PutLayout))
    enum PpSlideLayout Layout;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetSlideIndex))
    int SlideIndex;
    __declspec(property(get=GetSlideNumber))
    int SlideNumber;
    __declspec(property(get=GetNotesPage))
    SlideRangePtr NotesPage;
    __declspec(property(get=GetMaster))
    _MasterPtr Master;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetDesign,put=PutDesign))
    DesignPtr Design;
    __declspec(property(get=GetTimeLine))
    TimeLinePtr TimeLine;
    __declspec(property(get=GetSectionNumber))
    int SectionNumber;
    __declspec(property(get=GetCustomLayout,put=PutCustomLayout))
    CustomLayoutPtr CustomLayout;
    __declspec(property(get=GetThemeColorScheme))
    Office::ThemeColorSchemePtr ThemeColorScheme;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapesPtr GetShapes ( );
    HeadersFootersPtr GetHeadersFooters ( );
    SlideShowTransitionPtr GetSlideShowTransition ( );
    ColorSchemePtr GetColorScheme ( );
    void PutColorScheme (
        struct ColorScheme * ColorScheme );
    ShapeRangePtr GetBackground ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    long GetSlideID ( );
    int GetPrintSteps ( );
    HRESULT Select ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    enum PpSlideLayout GetLayout ( );
    void PutLayout (
        enum PpSlideLayout Layout );
    SlideRangePtr Duplicate ( );
    HRESULT Delete ( );
    TagsPtr GetTags ( );
    int GetSlideIndex ( );
    int GetSlideNumber ( );
    enum Office::MsoTriState GetDisplayMasterShapes ( );
    void PutDisplayMasterShapes (
        enum Office::MsoTriState DisplayMasterShapes );
    enum Office::MsoTriState GetFollowMasterBackground ( );
    void PutFollowMasterBackground (
        enum Office::MsoTriState FollowMasterBackground );
    SlideRangePtr GetNotesPage ( );
    _MasterPtr GetMaster ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT Export (
        _bstr_t FileName,
        _bstr_t FilterName,
        int ScaleWidth,
        int ScaleHeight );
    _SlidePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    _variant_t _Index (
        int Index );
    long GetCount ( );
    Office::ScriptsPtr GetScripts ( );
    CommentsPtr GetComments ( );
    DesignPtr GetDesign ( );
    void PutDesign (
        struct Design * Design );
    HRESULT MoveTo (
        int toPos );
    TimeLinePtr GetTimeLine ( );
    HRESULT ApplyTemplate (
        _bstr_t FileName );
    int GetSectionNumber ( );
    CustomLayoutPtr GetCustomLayout ( );
    void PutCustomLayout (
        struct CustomLayout * CustomLayout );
    HRESULT ApplyTheme (
        _bstr_t themeName );
    Office::ThemeColorSchemePtr GetThemeColorScheme ( );
    HRESULT ApplyThemeColorScheme (
        _bstr_t themeColorSchemeName );
    enum Office::MsoBackgroundStyleIndex GetBackgroundStyle ( );
    void PutBackgroundStyle (
        enum Office::MsoBackgroundStyleIndex BackgroundStyle );
    CustomerDataPtr GetCustomerData ( );
    HRESULT PublishSlides (
        _bstr_t SlideLibraryUrl,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL UseSlideOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * Shapes ) = 0;
      virtual HRESULT __stdcall get_HeadersFooters (
        /*[out,retval]*/ struct HeadersFooters * * HeadersFooters ) = 0;
      virtual HRESULT __stdcall get_SlideShowTransition (
        /*[out,retval]*/ struct SlideShowTransition * * SlideShowTransition ) = 0;
      virtual HRESULT __stdcall get_ColorScheme (
        /*[out,retval]*/ struct ColorScheme * * ColorScheme ) = 0;
      virtual HRESULT __stdcall put_ColorScheme (
        /*[in]*/ struct ColorScheme * ColorScheme ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct ShapeRange * * Background ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_SlideID (
        /*[out,retval]*/ long * SlideID ) = 0;
      virtual HRESULT __stdcall get_PrintSteps (
        /*[out,retval]*/ int * PrintSteps ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum PpSlideLayout * Layout ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ enum PpSlideLayout Layout ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct SlideRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_SlideIndex (
        /*[out,retval]*/ int * SlideIndex ) = 0;
      virtual HRESULT __stdcall get_SlideNumber (
        /*[out,retval]*/ int * SlideNumber ) = 0;
      virtual HRESULT __stdcall get_DisplayMasterShapes (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall put_DisplayMasterShapes (
        /*[in]*/ enum Office::MsoTriState DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall get_FollowMasterBackground (
        /*[out,retval]*/ enum Office::MsoTriState * FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall put_FollowMasterBackground (
        /*[in]*/ enum Office::MsoTriState FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall get_NotesPage (
        /*[out,retval]*/ struct SlideRange * * NotesPage ) = 0;
      virtual HRESULT __stdcall get_Master (
        /*[out,retval]*/ struct _Master * * Master ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * Hyperlinks ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR FilterName,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _Slide * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw__Index (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * _Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * Scripts ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ struct Comments * * Comments ) = 0;
      virtual HRESULT __stdcall get_Design (
        /*[out,retval]*/ struct Design * * Design ) = 0;
      virtual HRESULT __stdcall put_Design (
        /*[in]*/ struct Design * Design ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ int toPos ) = 0;
      virtual HRESULT __stdcall get_TimeLine (
        /*[out,retval]*/ struct TimeLine * * TimeLine ) = 0;
      virtual HRESULT __stdcall raw_ApplyTemplate (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_SectionNumber (
        /*[out,retval]*/ int * SectionNumber ) = 0;
      virtual HRESULT __stdcall get_CustomLayout (
        /*[out,retval]*/ struct CustomLayout * * CustomLayout ) = 0;
      virtual HRESULT __stdcall put_CustomLayout (
        /*[in]*/ struct CustomLayout * CustomLayout ) = 0;
      virtual HRESULT __stdcall raw_ApplyTheme (
        /*[in]*/ BSTR themeName ) = 0;
      virtual HRESULT __stdcall get_ThemeColorScheme (
        /*[out,retval]*/ struct Office::ThemeColorScheme * * ThemeColorScheme ) = 0;
      virtual HRESULT __stdcall raw_ApplyThemeColorScheme (
        /*[in]*/ BSTR themeColorSchemeName ) = 0;
      virtual HRESULT __stdcall get_BackgroundStyle (
        /*[out,retval]*/ enum Office::MsoBackgroundStyleIndex * BackgroundStyle ) = 0;
      virtual HRESULT __stdcall put_BackgroundStyle (
        /*[in]*/ enum Office::MsoBackgroundStyleIndex BackgroundStyle ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
      virtual HRESULT __stdcall raw_PublishSlides (
        /*[in]*/ BSTR SlideLibraryUrl,
        /*[in]*/ VARIANT_BOOL Overwrite,
        /*[in]*/ VARIANT_BOOL UseSlideOrder ) = 0;
};

struct __declspec(uuid("9149346c-5a91-11cf-8700-00aa0060263b"))
_Master : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSlideShowTransition))
    SlideShowTransitionPtr SlideShowTransition;
    __declspec(property(get=GetCustomLayouts))
    CustomLayoutsPtr CustomLayouts;
    __declspec(property(get=GetTheme))
    Office::OfficeThemePtr Theme;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetHeadersFooters))
    HeadersFootersPtr HeadersFooters;
    __declspec(property(get=GetColorScheme,put=PutColorScheme))
    ColorSchemePtr ColorScheme;
    __declspec(property(get=GetBackground))
    ShapeRangePtr Background;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHeight))
    float Height;
    __declspec(property(get=GetWidth))
    float Width;
    __declspec(property(get=GetTextStyles))
    TextStylesPtr TextStyles;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetDesign))
    DesignPtr Design;
    __declspec(property(get=GetTimeLine))
    TimeLinePtr TimeLine;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapesPtr GetShapes ( );
    HeadersFootersPtr GetHeadersFooters ( );
    ColorSchemePtr GetColorScheme ( );
    void PutColorScheme (
        struct ColorScheme * ColorScheme );
    ShapeRangePtr GetBackground ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    HRESULT Delete ( );
    float GetHeight ( );
    float GetWidth ( );
    TextStylesPtr GetTextStyles ( );
    HyperlinksPtr GetHyperlinks ( );
    Office::ScriptsPtr GetScripts ( );
    DesignPtr GetDesign ( );
    TimeLinePtr GetTimeLine ( );
    SlideShowTransitionPtr GetSlideShowTransition ( );
    CustomLayoutsPtr GetCustomLayouts ( );
    Office::OfficeThemePtr GetTheme ( );
    HRESULT ApplyTheme (
        _bstr_t themeName );
    enum Office::MsoBackgroundStyleIndex GetBackgroundStyle ( );
    void PutBackgroundStyle (
        enum Office::MsoBackgroundStyleIndex BackgroundStyle );
    CustomerDataPtr GetCustomerData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * Shapes ) = 0;
      virtual HRESULT __stdcall get_HeadersFooters (
        /*[out,retval]*/ struct HeadersFooters * * HeadersFooters ) = 0;
      virtual HRESULT __stdcall get_ColorScheme (
        /*[out,retval]*/ struct ColorScheme * * ColorScheme ) = 0;
      virtual HRESULT __stdcall put_ColorScheme (
        /*[in]*/ struct ColorScheme * ColorScheme ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct ShapeRange * * Background ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall get_TextStyles (
        /*[out,retval]*/ struct TextStyles * * TextStyles ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * Hyperlinks ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * Scripts ) = 0;
      virtual HRESULT __stdcall get_Design (
        /*[out,retval]*/ struct Design * * Design ) = 0;
      virtual HRESULT __stdcall get_TimeLine (
        /*[out,retval]*/ struct TimeLine * * TimeLine ) = 0;
      virtual HRESULT __stdcall get_SlideShowTransition (
        /*[out,retval]*/ struct SlideShowTransition * * SlideShowTransition ) = 0;
      virtual HRESULT __stdcall get_CustomLayouts (
        /*[out,retval]*/ struct CustomLayouts * * CustomLayouts ) = 0;
      virtual HRESULT __stdcall get_Theme (
        /*[out,retval]*/ struct Office::OfficeTheme * * Theme ) = 0;
      virtual HRESULT __stdcall raw_ApplyTheme (
        /*[in]*/ BSTR themeName ) = 0;
      virtual HRESULT __stdcall get_BackgroundStyle (
        /*[out,retval]*/ enum Office::MsoBackgroundStyleIndex * BackgroundStyle ) = 0;
      virtual HRESULT __stdcall put_BackgroundStyle (
        /*[in]*/ enum Office::MsoBackgroundStyleIndex BackgroundStyle ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
};

struct __declspec(uuid("914934d7-5a91-11cf-8700-00aa0060263b"))
Design : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSlideMaster))
    _MasterPtr SlideMaster;
    __declspec(property(get=GetTitleMaster))
    _MasterPtr TitleMaster;
    __declspec(property(get=GetHasTitleMaster))
    enum Office::MsoTriState HasTitleMaster;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _MasterPtr GetSlideMaster ( );
    _MasterPtr GetTitleMaster ( );
    enum Office::MsoTriState GetHasTitleMaster ( );
    _MasterPtr AddTitleMaster ( );
    int GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    enum Office::MsoTriState GetPreserved ( );
    void PutPreserved (
        enum Office::MsoTriState Preserved );
    HRESULT MoveTo (
        int toPos );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_SlideMaster (
        /*[out,retval]*/ struct _Master * * SlideMaster ) = 0;
      virtual HRESULT __stdcall get_TitleMaster (
        /*[out,retval]*/ struct _Master * * TitleMaster ) = 0;
      virtual HRESULT __stdcall get_HasTitleMaster (
        /*[out,retval]*/ enum Office::MsoTriState * HasTitleMaster ) = 0;
      virtual HRESULT __stdcall raw_AddTitleMaster (
        /*[out,retval]*/ struct _Master * * TitleMaster ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Preserved (
        /*[out,retval]*/ enum Office::MsoTriState * Preserved ) = 0;
      virtual HRESULT __stdcall put_Preserved (
        /*[in]*/ enum Office::MsoTriState Preserved ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ int toPos ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("914934d6-5a91-11cf-8700-00aa0060263b"))
Designs : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    DesignPtr Item (
        const _variant_t & Index );
    DesignPtr Add (
        _bstr_t designName,
        int Index );
    DesignPtr Load (
        _bstr_t TemplateName,
        int Index );
    DesignPtr Clone (
        struct Design * pOriginal,
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Design * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR designName,
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Design * * Add ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR TemplateName,
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Design * * Load ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[in]*/ struct Design * pOriginal,
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Design * * Clone ) = 0;
};

struct __declspec(uuid("91493475-5a91-11cf-8700-00aa0060263b"))
Shapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetHasTitle))
    enum Office::MsoTriState HasTitle;
    __declspec(property(get=GetTitle))
    ShapePtr Title;
    __declspec(property(get=GetPlaceholders))
    PlaceholdersPtr Placeholders;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t FileName,
        enum Office::MsoTriState LinkToFile,
        enum Office::MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum Office::MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1 );
    HRESULT SelectAll ( );
    ShapeRangePtr Range (
        const _variant_t & Index = vtMissing );
    enum Office::MsoTriState GetHasTitle ( );
    ShapePtr AddTitle ( );
    ShapePtr GetTitle ( );
    PlaceholdersPtr GetPlaceholders ( );
    ShapePtr AddOLEObject (
        float Left,
        float Top,
        float Width,
        float Height,
        _bstr_t ClassName,
        _bstr_t FileName,
        enum Office::MsoTriState DisplayAsIcon,
        _bstr_t IconFileName,
        int IconIndex,
        _bstr_t IconLabel,
        enum Office::MsoTriState Link );
    ShapePtr AddComment (
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPlaceholder (
        enum PpPlaceholderType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddMediaObject (
        _bstr_t FileName,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapeRangePtr Paste ( );
    ShapePtr AddTable (
        int NumRows,
        int NumColumns,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapeRangePtr PasteSpecial (
        enum PpPasteDataType DataType,
        enum Office::MsoTriState DisplayAsIcon,
        _bstr_t IconFileName,
        int IconIndex,
        _bstr_t IconLabel,
        enum Office::MsoTriState Link );
    ShapePtr AddDiagram (
        enum Office::MsoDiagramType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddCanvas (
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddChart (
        enum Office::XlChartType Type,
        float Left,
        float Top,
        float Width,
        float Height );
	// version must be than 2013
	ShapePtr AddMediaObject2 (
		_bstr_t FileName,
		enum Office::MsoTriState LinkToFile,
		enum Office::MsoTriState SaveWithDocument,
		float Left,
		float Top,
		float Width,
		float Height );
	ShapePtr AddMediaObjectFromEmbedTag (
		_bstr_t EmbedTag,
		float Left,
		float Top,
		float Width,
		float Height );
	ShapePtr AddSmartArt (
	struct SmartArtLayout * Layout,
		float Left,
		float Top,
		float Width,
		float Height );
	ShapePtr AddChart2 (
		int Style,
		enum Office::XlChartType Type,
		float Left,
		float Top,
		float Width,
		float Height,
		VARIANT_BOOL NewLayout );
	ShapePtr AddPicture2 (
		_bstr_t FileName,
		enum Office::MsoTriState LinkToFile,
		enum Office::MsoTriState SaveWithDocument,
		float Left,
		float Top,
		float Width,
		float Height,
		enum Office::MsoPictureCompress compress );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_AddCallout (
        /*[in]*/ enum Office::MsoCalloutType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Callout ) = 0;
      virtual HRESULT __stdcall raw_AddConnector (
        /*[in]*/ enum Office::MsoConnectorType Type,
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Connector ) = 0;
      virtual HRESULT __stdcall raw_AddCurve (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Curve ) = 0;
      virtual HRESULT __stdcall raw_AddLabel (
        /*[in]*/ enum Office::MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Label ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Line ) = 0;
      virtual HRESULT __stdcall raw_AddPicture (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum Office::MsoTriState LinkToFile,
        /*[in]*/ enum Office::MsoTriState SaveWithDocument,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Picture ) = 0;
      virtual HRESULT __stdcall raw_AddPolyline (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Polyline ) = 0;
      virtual HRESULT __stdcall raw_AddShape (
        /*[in]*/ enum Office::MsoAutoShapeType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall raw_AddTextEffect (
        /*[in]*/ enum Office::MsoPresetTextEffect PresetTextEffect,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR FontName,
        /*[in]*/ float FontSize,
        /*[in]*/ enum Office::MsoTriState FontBold,
        /*[in]*/ enum Office::MsoTriState FontItalic,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[out,retval]*/ struct Shape * * TextEffect ) = 0;
      virtual HRESULT __stdcall raw_AddTextbox (
        /*[in]*/ enum Office::MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Textbox ) = 0;
      virtual HRESULT __stdcall raw_BuildFreeform (
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[out,retval]*/ struct FreeformBuilder * * FreeformBuilder ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * Range ) = 0;
      virtual HRESULT __stdcall get_HasTitle (
        /*[out,retval]*/ enum Office::MsoTriState * HasTitle ) = 0;
      virtual HRESULT __stdcall raw_AddTitle (
        /*[out,retval]*/ struct Shape * * Title ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ struct Shape * * Title ) = 0;
      virtual HRESULT __stdcall get_Placeholders (
        /*[out,retval]*/ struct Placeholders * * Placeholders ) = 0;
      virtual HRESULT __stdcall raw_AddOLEObject (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[in]*/ BSTR ClassName,
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum Office::MsoTriState DisplayAsIcon,
        /*[in]*/ BSTR IconFileName,
        /*[in]*/ int IconIndex,
        /*[in]*/ BSTR IconLabel,
        /*[in]*/ enum Office::MsoTriState Link,
        /*[out,retval]*/ struct Shape * * OLEObject ) = 0;
      virtual HRESULT __stdcall raw_AddComment (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Comment ) = 0;
      virtual HRESULT __stdcall raw_AddPlaceholder (
        /*[in]*/ enum PpPlaceholderType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Placeholder ) = 0;
      virtual HRESULT __stdcall raw_AddMediaObject (
        /*[in]*/ BSTR FileName,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * MediaObject ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ struct ShapeRange * * Paste ) = 0;
      virtual HRESULT __stdcall raw_AddTable (
        /*[in]*/ int NumRows,
        /*[in]*/ int NumColumns,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Table ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ enum PpPasteDataType DataType,
        /*[in]*/ enum Office::MsoTriState DisplayAsIcon,
        /*[in]*/ BSTR IconFileName,
        /*[in]*/ int IconIndex,
        /*[in]*/ BSTR IconLabel,
        /*[in]*/ enum Office::MsoTriState Link,
        /*[out,retval]*/ struct ShapeRange * * PasteSpecial ) = 0;
      virtual HRESULT __stdcall raw_AddDiagram (
        /*[in]*/ enum Office::MsoDiagramType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Diagram ) = 0;
      virtual HRESULT __stdcall raw_AddCanvas (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall raw_AddChart (
        /*[in]*/ enum Office::XlChartType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Chart ) = 0;
		virtual HRESULT __stdcall raw_AddMediaObject2 (
			/*[in]*/ BSTR FileName,
			/*[in]*/ enum Office::MsoTriState LinkToFile,
			/*[in]*/ enum Office::MsoTriState SaveWithDocument,
			/*[in]*/ float Left,
			/*[in]*/ float Top,
			/*[in]*/ float Width,
			/*[in]*/ float Height,
		/*[out,retval]*/ struct Shape * * MediaObject2 ) = 0;
		virtual HRESULT __stdcall raw_AddMediaObjectFromEmbedTag (
			/*[in]*/ BSTR EmbedTag,
			/*[in]*/ float Left,
			/*[in]*/ float Top,
			/*[in]*/ float Width,
			/*[in]*/ float Height,
		/*[out,retval]*/ struct Shape * * MediaObjectFromEmbedTag ) = 0;
		virtual HRESULT __stdcall raw_AddSmartArt (
		/*[in]*/ struct SmartArtLayout * Layout,
			/*[in]*/ float Left,
			/*[in]*/ float Top,
			/*[in]*/ float Width,
			/*[in]*/ float Height,
		/*[out,retval]*/ struct Shape * * SmartArt ) = 0;
		virtual HRESULT __stdcall raw_AddChart2 (
			/*[in]*/ int Style,
			/*[in]*/ enum Office::XlChartType Type,
			/*[in]*/ float Left,
			/*[in]*/ float Top,
			/*[in]*/ float Width,
			/*[in]*/ float Height,
			/*[in]*/ VARIANT_BOOL NewLayout,
		/*[out,retval]*/ struct Shape * * Chart ) = 0;
		virtual HRESULT __stdcall raw_AddPicture2 (
			/*[in]*/ BSTR FileName,
			/*[in]*/ enum Office::MsoTriState LinkToFile,
			/*[in]*/ enum Office::MsoTriState SaveWithDocument,
			/*[in]*/ float Left,
			/*[in]*/ float Top,
			/*[in]*/ float Width,
			/*[in]*/ float Height,
			/*[in]*/ enum Office::MsoPictureCompress compress,
		/*[out,retval]*/ struct Shape * * Picture ) = 0;

};

struct __declspec(uuid("91493476-5a91-11cf-8700-00aa0060263b"))
Placeholders : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapePtr Item (
        int Index );
    ShapePtr FindByName (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall raw_FindByName (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * FindByName ) = 0;
};

struct __declspec(uuid("91493478-5a91-11cf-8700-00aa0060263b"))
FreeformBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    ShapePtr ConvertToShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddNodes (
        /*[in]*/ enum Office::MsoSegmentType SegmentType,
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ float X2,
        /*[in]*/ float Y2,
        /*[in]*/ float X3,
        /*[in]*/ float Y3 ) = 0;
      virtual HRESULT __stdcall raw_ConvertToShape (
        /*[out,retval]*/ struct Shape * * Freeform ) = 0;
};

struct __declspec(uuid("91493479-5a91-11cf-8700-00aa0060263b"))
Shape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetPlaceholderFormat))
    PlaceholderFormatPtr PlaceholderFormat;
    __declspec(property(get=GetAnimationSettings))
    AnimationSettingsPtr AnimationSettings;
    __declspec(property(get=GetActionSettings))
    ActionSettingsPtr ActionSettings;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetMediaType))
    enum PpMediaType MediaType;
    __declspec(property(get=GetHasTextFrame))
    enum Office::MsoTriState HasTextFrame;
    __declspec(property(get=GetSoundFormat))
    SoundFormatPtr SoundFormat;
    __declspec(property(get=GetHasTable))
    enum Office::MsoTriState HasTable;
    __declspec(property(get=GetTable))
    TablePtr Table;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCanvasItems))
    CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetId))
    int Id;
    __declspec(property(put=PutRTF))
    _bstr_t RTF;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;
    __declspec(property(get=GetTextFrame2))
    TextFrame2Ptr TextFrame2;
    __declspec(property(get=GetHasChart))
    enum Office::MsoTriState HasChart;
    __declspec(property(get=GetSoftEdge))
    Office::SoftEdgeFormatPtr SoftEdge;
    __declspec(property(get=GetGlow))
    Office::GlowFormatPtr Glow;
    __declspec(property(get=GetReflection))
    Office::ReflectionFormatPtr Reflection;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    int ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom fScale );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom fScale );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType AutoShapeType );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode BlackWhiteMode );
    CalloutFormatPtr GetCallout ( );
    int GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float Height );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState LockAspectRatio );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float Rotation );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    TextFramePtr GetTextFrame ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float Top );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    OLEFormatPtr GetOLEFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    PlaceholderFormatPtr GetPlaceholderFormat ( );
    AnimationSettingsPtr GetAnimationSettings ( );
    ActionSettingsPtr GetActionSettings ( );
    TagsPtr GetTags ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Select (
        enum Office::MsoTriState Replace );
    ShapeRangePtr Duplicate ( );
    enum PpMediaType GetMediaType ( );
    enum Office::MsoTriState GetHasTextFrame ( );
    SoundFormatPtr GetSoundFormat ( );
    Office::ScriptPtr GetScript ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t AlternativeText );
    enum Office::MsoTriState GetHasTable ( );
    TablePtr GetTable ( );
    HRESULT Export (
        _bstr_t PathName,
        enum PpShapeFormat Filter,
        int ScaleWidth,
        int ScaleHeight,
        enum PpExportMode ExportMode );
    enum Office::MsoTriState GetHasDiagram ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    CanvasShapesPtr GetCanvasItems ( );
    int GetId ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );
    void PutRTF (
        _bstr_t _arg1 );
    CustomerDataPtr GetCustomerData ( );
    TextFrame2Ptr GetTextFrame2 ( );
    enum Office::MsoTriState GetHasChart ( );
    enum Office::MsoShapeStyleIndex GetShapeStyle ( );
    void PutShapeStyle (
        enum Office::MsoShapeStyleIndex ShapeStyle );
    enum Office::MsoBackgroundStyleIndex GetBackgroundStyle ( );
    void PutBackgroundStyle (
        enum Office::MsoBackgroundStyleIndex BackgroundStyle );
    Office::SoftEdgeFormatPtr GetSoftEdge ( );
    Office::GlowFormatPtr GetGlow ( );
    Office::ReflectionFormatPtr GetReflection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum Office::MsoFlipCmd FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ enum Office::MsoScaleFrom fScale ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ enum Office::MsoScaleFrom fScale ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * Ungroup ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * Adjustments ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ enum Office::MsoAutoShapeType * AutoShapeType ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ enum Office::MsoAutoShapeType AutoShapeType ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ enum Office::MsoBlackWhiteMode * BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ enum Office::MsoBlackWhiteMode BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * Callout ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ int * ConnectionSiteCount ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum Office::MsoTriState * Connector ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * ConnectorFormat ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * Fill ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * GroupItems ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * HorizontalFlip ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * Line ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum Office::MsoTriState * LockAspectRatio ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum Office::MsoTriState LockAspectRatio ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * Nodes ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * Rotation ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float Rotation ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * Picture ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * Shadow ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * TextEffect ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * TextFrame ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * ThreeD ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShapeType * Type ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * VerticalFlip ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * Vertices ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ int * ZOrderPosition ) = 0;
      virtual HRESULT __stdcall get_OLEFormat (
        /*[out,retval]*/ struct OLEFormat * * OLEFormat ) = 0;
      virtual HRESULT __stdcall get_LinkFormat (
        /*[out,retval]*/ struct LinkFormat * * LinkFormat ) = 0;
      virtual HRESULT __stdcall get_PlaceholderFormat (
        /*[out,retval]*/ struct PlaceholderFormat * * PlaceholderFormat ) = 0;
      virtual HRESULT __stdcall get_AnimationSettings (
        /*[out,retval]*/ struct AnimationSettings * * AnimationSettings ) = 0;
      virtual HRESULT __stdcall get_ActionSettings (
        /*[out,retval]*/ struct ActionSettings * * ActionSettings ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ enum Office::MsoTriState Replace ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct ShapeRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall get_MediaType (
        /*[out,retval]*/ enum PpMediaType * MediaType ) = 0;
      virtual HRESULT __stdcall get_HasTextFrame (
        /*[out,retval]*/ enum Office::MsoTriState * HasTextFrame ) = 0;
      virtual HRESULT __stdcall get_SoundFormat (
        /*[out,retval]*/ struct SoundFormat * * SoundFormat ) = 0;
      virtual HRESULT __stdcall get_Script (
        /*[out,retval]*/ struct Office::Script * * Script ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * AlternativeText ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR AlternativeText ) = 0;
      virtual HRESULT __stdcall get_HasTable (
        /*[out,retval]*/ enum Office::MsoTriState * HasTable ) = 0;
      virtual HRESULT __stdcall get_Table (
        /*[out,retval]*/ struct Table * * Table ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR PathName,
        /*[in]*/ enum PpShapeFormat Filter,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight,
        /*[in]*/ enum PpExportMode ExportMode ) = 0;
      virtual HRESULT __stdcall get_HasDiagram (
        /*[out,retval]*/ enum Office::MsoTriState * pHasDiagram ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct Diagram * * Diagram ) = 0;
      virtual HRESULT __stdcall get_HasDiagramNode (
        /*[out,retval]*/ enum Office::MsoTriState * pHasDiagram ) = 0;
      virtual HRESULT __stdcall get_DiagramNode (
        /*[out,retval]*/ struct DiagramNode * * DiagramNode ) = 0;
      virtual HRESULT __stdcall get_Child (
        /*[out,retval]*/ enum Office::MsoTriState * Child ) = 0;
      virtual HRESULT __stdcall get_ParentGroup (
        /*[out,retval]*/ struct Shape * * Parent ) = 0;
      virtual HRESULT __stdcall get_CanvasItems (
        /*[out,retval]*/ struct CanvasShapes * * CanvasShapes ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ int * pid ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropRight (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropBottom (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall put_RTF (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
      virtual HRESULT __stdcall get_TextFrame2 (
        /*[out,retval]*/ struct TextFrame2 * * Frame ) = 0;
      virtual HRESULT __stdcall get_HasChart (
        /*[out,retval]*/ enum Office::MsoTriState * pHasChart ) = 0;
      virtual HRESULT __stdcall get_ShapeStyle (
        /*[out,retval]*/ enum Office::MsoShapeStyleIndex * ShapeStyle ) = 0;
      virtual HRESULT __stdcall put_ShapeStyle (
        /*[in]*/ enum Office::MsoShapeStyleIndex ShapeStyle ) = 0;
      virtual HRESULT __stdcall get_BackgroundStyle (
        /*[out,retval]*/ enum Office::MsoBackgroundStyleIndex * BackgroundStyle ) = 0;
      virtual HRESULT __stdcall put_BackgroundStyle (
        /*[in]*/ enum Office::MsoBackgroundStyleIndex BackgroundStyle ) = 0;
      virtual HRESULT __stdcall get_SoftEdge (
        /*[out,retval]*/ struct Office::SoftEdgeFormat * * SoftEdge ) = 0;
      virtual HRESULT __stdcall get_Glow (
        /*[out,retval]*/ struct Office::GlowFormat * * Glow ) = 0;
      virtual HRESULT __stdcall get_Reflection (
        /*[out,retval]*/ struct Office::ReflectionFormat * * Reflection ) = 0;
};

struct __declspec(uuid("91493481-5a91-11cf-8700-00aa0060263b"))
ConnectorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum Office::MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    int BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum Office::MsoTriState EndConnected;
    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    int EndConnectionSite;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        int ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        int ConnectionSite );
    HRESULT EndDisconnect ( );
    enum Office::MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    int GetBeginConnectionSite ( );
    enum Office::MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    int GetEndConnectionSite ( );
    enum Office::MsoConnectorType GetType ( );
    void PutType (
        enum Office::MsoConnectorType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_BeginConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ int ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_BeginDisconnect ( ) = 0;
      virtual HRESULT __stdcall raw_EndConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ int ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_EndDisconnect ( ) = 0;
      virtual HRESULT __stdcall get_BeginConnected (
        /*[out,retval]*/ enum Office::MsoTriState * BeginConnected ) = 0;
      virtual HRESULT __stdcall get_BeginConnectedShape (
        /*[out,retval]*/ struct Shape * * BeginConnectedShape ) = 0;
      virtual HRESULT __stdcall get_BeginConnectionSite (
        /*[out,retval]*/ int * BeginConnectionSite ) = 0;
      virtual HRESULT __stdcall get_EndConnected (
        /*[out,retval]*/ enum Office::MsoTriState * EndConnected ) = 0;
      virtual HRESULT __stdcall get_EndConnectedShape (
        /*[out,retval]*/ struct Shape * * EndConnectedShape ) = 0;
      virtual HRESULT __stdcall get_EndConnectionSite (
        /*[out,retval]*/ int * EndConnectionSite ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoConnectorType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoConnectorType Type ) = 0;
};

struct __declspec(uuid("9149349d-5a91-11cf-8700-00aa0060263b"))
_Presentation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetServerPolicy))
    Office::ServerPolicyPtr ServerPolicy;
    __declspec(property(get=GetDocumentInspectors))
    Office::DocumentInspectorsPtr DocumentInspectors;
    __declspec(property(get=GetHasVBProject))
    VARIANT_BOOL HasVBProject;
    __declspec(property(get=GetCustomXMLParts))
    Office::_CustomXMLPartsPtr CustomXMLParts;
    __declspec(property(get=GetFinal,put=PutFinal))
    VARIANT_BOOL Final;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;
    __declspec(property(get=GetResearch))
    ResearchPtr Research;
    __declspec(property(get=GetEncryptionProvider,put=PutEncryptionProvider))
    _bstr_t EncryptionProvider;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSlideMaster))
    _MasterPtr SlideMaster;
    __declspec(property(get=GetTitleMaster))
    _MasterPtr TitleMaster;
    __declspec(property(get=GetHasTitleMaster))
    enum Office::MsoTriState HasTitleMaster;
    __declspec(property(get=GetTemplateName))
    _bstr_t TemplateName;
    __declspec(property(get=GetNotesMaster))
    _MasterPtr NotesMaster;
    __declspec(property(get=GetHandoutMaster))
    _MasterPtr HandoutMaster;
    __declspec(property(get=GetSlides))
    SlidesPtr Slides;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetColorSchemes))
    ColorSchemesPtr ColorSchemes;
    __declspec(property(get=GetExtraColors))
    ExtraColorsPtr ExtraColors;
    __declspec(property(get=GetSlideShowSettings))
    SlideShowSettingsPtr SlideShowSettings;
    __declspec(property(get=GetFonts))
    FontsPtr Fonts;
    __declspec(property(get=GetWindows))
    DocumentWindowsPtr Windows;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetDefaultShape))
    ShapePtr DefaultShape;
    __declspec(property(get=GetBuiltInDocumentProperties))
    IDispatchPtr BuiltInDocumentProperties;
    __declspec(property(get=GetCustomDocumentProperties))
    IDispatchPtr CustomDocumentProperties;
    __declspec(property(get=GetVBProject))
    VBIDE::_VBProjectPtr VBProject;
    __declspec(property(get=GetReadOnly))
    enum Office::MsoTriState ReadOnly;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetLayoutDirection,put=PutLayoutDirection))
    enum PpDirection LayoutDirection;
    __declspec(property(get=GetPrintOptions))
    PrintOptionsPtr PrintOptions;
    __declspec(property(get=GetContainer))
    IDispatchPtr Container;
    __declspec(property(get=GetFarEastLineBreakLevel,put=PutFarEastLineBreakLevel))
    enum PpFarEastLineBreakLevel FarEastLineBreakLevel;
    __declspec(property(get=GetNoLineBreakBefore,put=PutNoLineBreakBefore))
    _bstr_t NoLineBreakBefore;
    __declspec(property(get=GetNoLineBreakAfter,put=PutNoLineBreakAfter))
    _bstr_t NoLineBreakAfter;
    __declspec(property(get=GetSlideShowWindow))
    SlideShowWindowPtr SlideShowWindow;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetPublishObjects))
    PublishObjectsPtr PublishObjects;
    __declspec(property(get=GetWebOptions))
    WebOptionsPtr WebOptions;
    __declspec(property(get=GetHTMLProject))
    Office::HTMLProjectPtr HTMLProject;
    __declspec(property(get=GetVBASigned))
    enum Office::MsoTriState VBASigned;
    __declspec(property(get=GetGridDistance,put=PutGridDistance))
    float GridDistance;
    __declspec(property(get=GetDesigns))
    DesignsPtr Designs;
    __declspec(property(get=GetSignatures))
    Office::SignatureSetPtr Signatures;
    __declspec(property(get=GetHasRevisionInfo))
    enum PpRevisionInfo HasRevisionInfo;
    __declspec(property(get=GetPasswordEncryptionProvider))
    _bstr_t PasswordEncryptionProvider;
    __declspec(property(get=GetPasswordEncryptionAlgorithm))
    _bstr_t PasswordEncryptionAlgorithm;
    __declspec(property(get=GetPasswordEncryptionKeyLength))
    int PasswordEncryptionKeyLength;
    __declspec(property(get=GetPasswordEncryptionFileProperties))
    VARIANT_BOOL PasswordEncryptionFileProperties;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetWritePassword,put=PutWritePassword))
    _bstr_t WritePassword;
    __declspec(property(get=GetPermission))
    Office::PermissionPtr Permission;
    __declspec(property(get=GetSharedWorkspace))
    Office::SharedWorkspacePtr SharedWorkspace;
    __declspec(property(get=GetSync))
    Office::SyncPtr Sync;
    __declspec(property(get=GetDocumentLibraryVersions))
    Office::DocumentLibraryVersionsPtr DocumentLibraryVersions;
    __declspec(property(get=GetContentTypeProperties))
    Office::MetaPropertiesPtr ContentTypeProperties;
    __declspec(property(get=GetSectionCount))
    int SectionCount;
    __declspec(property(get=GetHasSections))
    VARIANT_BOOL HasSections;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _MasterPtr GetSlideMaster ( );
    _MasterPtr GetTitleMaster ( );
    enum Office::MsoTriState GetHasTitleMaster ( );
    _MasterPtr AddTitleMaster ( );
    HRESULT ApplyTemplate (
        _bstr_t FileName );
    _bstr_t GetTemplateName ( );
    _MasterPtr GetNotesMaster ( );
    _MasterPtr GetHandoutMaster ( );
    SlidesPtr GetSlides ( );
    PageSetupPtr GetPageSetup ( );
    ColorSchemesPtr GetColorSchemes ( );
    ExtraColorsPtr GetExtraColors ( );
    SlideShowSettingsPtr GetSlideShowSettings ( );
    FontsPtr GetFonts ( );
    DocumentWindowsPtr GetWindows ( );
    TagsPtr GetTags ( );
    ShapePtr GetDefaultShape ( );
    IDispatchPtr GetBuiltInDocumentProperties ( );
    IDispatchPtr GetCustomDocumentProperties ( );
    VBIDE::_VBProjectPtr GetVBProject ( );
    enum Office::MsoTriState GetReadOnly ( );
    _bstr_t GetFullName ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    enum Office::MsoTriState GetSaved ( );
    void PutSaved (
        enum Office::MsoTriState Saved );
    enum PpDirection GetLayoutDirection ( );
    void PutLayoutDirection (
        enum PpDirection LayoutDirection );
    DocumentWindowPtr NewWindow ( );
    HRESULT FollowHyperlink (
        _bstr_t Address,
        _bstr_t SubAddress,
        VARIANT_BOOL NewWindow,
        VARIANT_BOOL AddHistory,
        _bstr_t ExtraInfo,
        enum Office::MsoExtraInfoMethod Method,
        _bstr_t HeaderInfo );
    HRESULT AddToFavorites ( );
    HRESULT Unused ( );
    PrintOptionsPtr GetPrintOptions ( );
    HRESULT PrintOut (
        int From,
        int To,
        _bstr_t PrintToFile,
        int Copies,
        enum Office::MsoTriState Collate );
    HRESULT Save ( );
    HRESULT SaveAs (
        _bstr_t FileName,
        enum PpSaveAsFileType FileFormat,
        enum Office::MsoTriState EmbedTrueTypeFonts );
    HRESULT SaveCopyAs (
        _bstr_t FileName,
        enum PpSaveAsFileType FileFormat,
        enum Office::MsoTriState EmbedTrueTypeFonts );
    HRESULT Export (
        _bstr_t Path,
        _bstr_t FilterName,
        int ScaleWidth,
        int ScaleHeight );
    HRESULT Close ( );
    HRESULT SetUndoText (
        _bstr_t Text );
    IDispatchPtr GetContainer ( );
    enum Office::MsoTriState GetDisplayComments ( );
    void PutDisplayComments (
        enum Office::MsoTriState DisplayComments );
    enum PpFarEastLineBreakLevel GetFarEastLineBreakLevel ( );
    void PutFarEastLineBreakLevel (
        enum PpFarEastLineBreakLevel FarEastLineBreakLevel );
    _bstr_t GetNoLineBreakBefore ( );
    void PutNoLineBreakBefore (
        _bstr_t NoLineBreakBefore );
    _bstr_t GetNoLineBreakAfter ( );
    void PutNoLineBreakAfter (
        _bstr_t NoLineBreakAfter );
    HRESULT UpdateLinks ( );
    SlideShowWindowPtr GetSlideShowWindow ( );
    enum Office::MsoFarEastLineBreakLanguageID GetFarEastLineBreakLanguage ( );
    void PutFarEastLineBreakLanguage (
        enum Office::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage );
    HRESULT WebPagePreview ( );
    enum Office::MsoLanguageID GetDefaultLanguageID ( );
    void PutDefaultLanguageID (
        enum Office::MsoLanguageID DefaultLanguageID );
    Office::_CommandBarsPtr GetCommandBars ( );
    PublishObjectsPtr GetPublishObjects ( );
    WebOptionsPtr GetWebOptions ( );
    Office::HTMLProjectPtr GetHTMLProject ( );
    HRESULT ReloadAs (
        enum Office::MsoEncoding cp );
    HRESULT MakeIntoTemplate (
        enum Office::MsoTriState IsDesignTemplate );
    enum Office::MsoTriState GetEnvelopeVisible ( );
    void PutEnvelopeVisible (
        enum Office::MsoTriState EnvelopeVisible );
    HRESULT sblt (
        _bstr_t s );
    enum Office::MsoTriState GetVBASigned ( );
    enum Office::MsoTriState GetSnapToGrid ( );
    void PutSnapToGrid (
        enum Office::MsoTriState SnapToGrid );
    float GetGridDistance ( );
    void PutGridDistance (
        float GridDistance );
    DesignsPtr GetDesigns ( );
    HRESULT Merge (
        _bstr_t Path );
    HRESULT CheckIn (
        VARIANT_BOOL SaveChanges,
        const _variant_t & Comments = vtMissing,
        const _variant_t & MakePublic = vtMissing );
    VARIANT_BOOL CanCheckIn ( );
    Office::SignatureSetPtr GetSignatures ( );
    enum Office::MsoTriState GetRemovePersonalInformation ( );
    void PutRemovePersonalInformation (
        enum Office::MsoTriState RemovePersonalInformation );
    HRESULT SendForReview (
        _bstr_t Recipients,
        _bstr_t Subject,
        VARIANT_BOOL ShowMessage,
        const _variant_t & IncludeAttachment = vtMissing );
    HRESULT ReplyWithChanges (
        VARIANT_BOOL ShowMessage );
    HRESULT EndReview ( );
    enum PpRevisionInfo GetHasRevisionInfo ( );
    HRESULT AddBaseline (
        _bstr_t FileName );
    HRESULT RemoveBaseline ( );
    _bstr_t GetPasswordEncryptionProvider ( );
    _bstr_t GetPasswordEncryptionAlgorithm ( );
    int GetPasswordEncryptionKeyLength ( );
    VARIANT_BOOL GetPasswordEncryptionFileProperties ( );
    HRESULT SetPasswordEncryptionOptions (
        _bstr_t PasswordEncryptionProvider,
        _bstr_t PasswordEncryptionAlgorithm,
        int PasswordEncryptionKeyLength,
        VARIANT_BOOL PasswordEncryptionFileProperties );
    _bstr_t GetPassword ( );
    void PutPassword (
        _bstr_t Password );
    _bstr_t GetWritePassword ( );
    void PutWritePassword (
        _bstr_t WritePassword );
    Office::PermissionPtr GetPermission ( );
    Office::SharedWorkspacePtr GetSharedWorkspace ( );
    Office::SyncPtr GetSync ( );
    HRESULT SendFaxOverInternet (
        _bstr_t Recipients,
        _bstr_t Subject,
        VARIANT_BOOL ShowMessage );
    Office::DocumentLibraryVersionsPtr GetDocumentLibraryVersions ( );
    Office::MetaPropertiesPtr GetContentTypeProperties ( );
    int GetSectionCount ( );
    VARIANT_BOOL GetHasSections ( );
    HRESULT NewSectionAfter (
        int Index,
        VARIANT_BOOL AfterSlide,
        _bstr_t sectionTitle,
        int * newSectionIndex );
    HRESULT DeleteSection (
        int Index );
    HRESULT DisableSections ( );
    _bstr_t sectionTitle (
        int Index );
    HRESULT RemoveDocumentInformation (
        enum PpRemoveDocInfoType Type );
    HRESULT CheckInWithVersion (
        VARIANT_BOOL SaveChanges,
        const _variant_t & Comments = vtMissing,
        const _variant_t & MakePublic = vtMissing,
        const _variant_t & VersionType = vtMissing );
    HRESULT ExportAsFixedFormat (
        _bstr_t Path,
        enum PpFixedFormatType FixedFormatType,
        enum PpFixedFormatIntent Intent,
        enum Office::MsoTriState FrameSlides,
        enum PpPrintHandoutOrder HandoutOrder,
        enum PpPrintOutputType OutputType,
        enum Office::MsoTriState PrintHiddenSlides,
        struct PrintRange * PrintRange,
        enum PpPrintRangeType RangeType,
        _bstr_t SlideShowName,
        VARIANT_BOOL IncludeDocProperties,
        VARIANT_BOOL KeepIRMSettings,
        VARIANT_BOOL DocStructureTags,
        VARIANT_BOOL BitmapMissingFonts,
        VARIANT_BOOL UseISO19005_1,
        const _variant_t & ExternalExporter = vtMissing );
    Office::ServerPolicyPtr GetServerPolicy ( );
    Office::WorkflowTasksPtr GetWorkflowTasks ( );
    Office::WorkflowTemplatesPtr GetWorkflowTemplates ( );
    HRESULT LockServerFile ( );
    Office::DocumentInspectorsPtr GetDocumentInspectors ( );
    VARIANT_BOOL GetHasVBProject ( );
    Office::_CustomXMLPartsPtr GetCustomXMLParts ( );
    VARIANT_BOOL GetFinal ( );
    void PutFinal (
        VARIANT_BOOL Final );
    HRESULT ApplyTheme (
        _bstr_t themeName );
    CustomerDataPtr GetCustomerData ( );
    ResearchPtr GetResearch ( );
    HRESULT PublishSlides (
        _bstr_t SlideLibraryUrl,
        VARIANT_BOOL Overwrite,
        VARIANT_BOOL UseSlideOrder );
    _bstr_t GetEncryptionProvider ( );
    void PutEncryptionProvider (
        _bstr_t EncryptionProvider );
    HRESULT Convert ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_SlideMaster (
        /*[out,retval]*/ struct _Master * * SlideMaster ) = 0;
      virtual HRESULT __stdcall get_TitleMaster (
        /*[out,retval]*/ struct _Master * * TitleMaster ) = 0;
      virtual HRESULT __stdcall get_HasTitleMaster (
        /*[out,retval]*/ enum Office::MsoTriState * HasTitleMaster ) = 0;
      virtual HRESULT __stdcall raw_AddTitleMaster (
        /*[out,retval]*/ struct _Master * * TitleMaster ) = 0;
      virtual HRESULT __stdcall raw_ApplyTemplate (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_TemplateName (
        /*[out,retval]*/ BSTR * TemplateName ) = 0;
      virtual HRESULT __stdcall get_NotesMaster (
        /*[out,retval]*/ struct _Master * * NotesMaster ) = 0;
      virtual HRESULT __stdcall get_HandoutMaster (
        /*[out,retval]*/ struct _Master * * HandoutMaster ) = 0;
      virtual HRESULT __stdcall get_Slides (
        /*[out,retval]*/ struct Slides * * Slides ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * PageSetup ) = 0;
      virtual HRESULT __stdcall get_ColorSchemes (
        /*[out,retval]*/ struct ColorSchemes * * ColorSchemes ) = 0;
      virtual HRESULT __stdcall get_ExtraColors (
        /*[out,retval]*/ struct ExtraColors * * ExtraColors ) = 0;
      virtual HRESULT __stdcall get_SlideShowSettings (
        /*[out,retval]*/ struct SlideShowSettings * * SlideShowSettings ) = 0;
      virtual HRESULT __stdcall get_Fonts (
        /*[out,retval]*/ struct Fonts * * Fonts ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct DocumentWindows * * Windows ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_DefaultShape (
        /*[out,retval]*/ struct Shape * * DefaultShape ) = 0;
      virtual HRESULT __stdcall get_BuiltInDocumentProperties (
        /*[out,retval]*/ IDispatch * * BuiltInDocumentProperties ) = 0;
      virtual HRESULT __stdcall get_CustomDocumentProperties (
        /*[out,retval]*/ IDispatch * * CustomDocumentProperties ) = 0;
      virtual HRESULT __stdcall get_VBProject (
        /*[out,retval]*/ struct VBIDE::_VBProject * * VBProject ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ enum Office::MsoTriState * ReadOnly ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * FullName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall get_Saved (
        /*[out,retval]*/ enum Office::MsoTriState * Saved ) = 0;
      virtual HRESULT __stdcall put_Saved (
        /*[in]*/ enum Office::MsoTriState Saved ) = 0;
      virtual HRESULT __stdcall get_LayoutDirection (
        /*[out,retval]*/ enum PpDirection * LayoutDirection ) = 0;
      virtual HRESULT __stdcall put_LayoutDirection (
        /*[in]*/ enum PpDirection LayoutDirection ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[out,retval]*/ struct DocumentWindow * * NewWindow ) = 0;
      virtual HRESULT __stdcall raw_FollowHyperlink (
        /*[in]*/ BSTR Address,
        /*[in]*/ BSTR SubAddress,
        /*[in]*/ VARIANT_BOOL NewWindow,
        /*[in]*/ VARIANT_BOOL AddHistory,
        /*[in]*/ BSTR ExtraInfo,
        /*[in]*/ enum Office::MsoExtraInfoMethod Method,
        /*[in]*/ BSTR HeaderInfo ) = 0;
      virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
      virtual HRESULT __stdcall raw_Unused ( ) = 0;
      virtual HRESULT __stdcall get_PrintOptions (
        /*[out,retval]*/ struct PrintOptions * * PrintOptions ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ int From,
        /*[in]*/ int To,
        /*[in]*/ BSTR PrintToFile,
        /*[in]*/ int Copies,
        /*[in]*/ enum Office::MsoTriState Collate ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum PpSaveAsFileType FileFormat,
        /*[in]*/ enum Office::MsoTriState EmbedTrueTypeFonts ) = 0;
      virtual HRESULT __stdcall raw_SaveCopyAs (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum PpSaveAsFileType FileFormat,
        /*[in]*/ enum Office::MsoTriState EmbedTrueTypeFonts ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Path,
        /*[in]*/ BSTR FilterName,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_SetUndoText (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Container (
        /*[out,retval]*/ IDispatch * * Container ) = 0;
      virtual HRESULT __stdcall get_DisplayComments (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayComments ) = 0;
      virtual HRESULT __stdcall put_DisplayComments (
        /*[in]*/ enum Office::MsoTriState DisplayComments ) = 0;
      virtual HRESULT __stdcall get_FarEastLineBreakLevel (
        /*[out,retval]*/ enum PpFarEastLineBreakLevel * FarEastLineBreakLevel ) = 0;
      virtual HRESULT __stdcall put_FarEastLineBreakLevel (
        /*[in]*/ enum PpFarEastLineBreakLevel FarEastLineBreakLevel ) = 0;
      virtual HRESULT __stdcall get_NoLineBreakBefore (
        /*[out,retval]*/ BSTR * NoLineBreakBefore ) = 0;
      virtual HRESULT __stdcall put_NoLineBreakBefore (
        /*[in]*/ BSTR NoLineBreakBefore ) = 0;
      virtual HRESULT __stdcall get_NoLineBreakAfter (
        /*[out,retval]*/ BSTR * NoLineBreakAfter ) = 0;
      virtual HRESULT __stdcall put_NoLineBreakAfter (
        /*[in]*/ BSTR NoLineBreakAfter ) = 0;
      virtual HRESULT __stdcall raw_UpdateLinks ( ) = 0;
      virtual HRESULT __stdcall get_SlideShowWindow (
        /*[out,retval]*/ struct SlideShowWindow * * SlideShowWindow ) = 0;
      virtual HRESULT __stdcall get_FarEastLineBreakLanguage (
        /*[out,retval]*/ enum Office::MsoFarEastLineBreakLanguageID * FarEastLineBreakLanguage ) = 0;
      virtual HRESULT __stdcall put_FarEastLineBreakLanguage (
        /*[in]*/ enum Office::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage ) = 0;
      virtual HRESULT __stdcall raw_WebPagePreview ( ) = 0;
      virtual HRESULT __stdcall get_DefaultLanguageID (
        /*[out,retval]*/ enum Office::MsoLanguageID * DefaultLanguageID ) = 0;
      virtual HRESULT __stdcall put_DefaultLanguageID (
        /*[in]*/ enum Office::MsoLanguageID DefaultLanguageID ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * CommandBars ) = 0;
      virtual HRESULT __stdcall get_PublishObjects (
        /*[out,retval]*/ struct PublishObjects * * PublishObjects ) = 0;
      virtual HRESULT __stdcall get_WebOptions (
        /*[out,retval]*/ struct WebOptions * * WebOptions ) = 0;
      virtual HRESULT __stdcall get_HTMLProject (
        /*[out,retval]*/ struct Office::HTMLProject * * HTMLProject ) = 0;
      virtual HRESULT __stdcall raw_ReloadAs (
        /*[in]*/ enum Office::MsoEncoding cp ) = 0;
      virtual HRESULT __stdcall raw_MakeIntoTemplate (
        /*[in]*/ enum Office::MsoTriState IsDesignTemplate ) = 0;
      virtual HRESULT __stdcall get_EnvelopeVisible (
        /*[out,retval]*/ enum Office::MsoTriState * EnvelopeVisible ) = 0;
      virtual HRESULT __stdcall put_EnvelopeVisible (
        /*[in]*/ enum Office::MsoTriState EnvelopeVisible ) = 0;
      virtual HRESULT __stdcall raw_sblt (
        /*[in]*/ BSTR s ) = 0;
      virtual HRESULT __stdcall get_VBASigned (
        /*[out,retval]*/ enum Office::MsoTriState * VBASigned ) = 0;
      virtual HRESULT __stdcall get_SnapToGrid (
        /*[out,retval]*/ enum Office::MsoTriState * SnapToGrid ) = 0;
      virtual HRESULT __stdcall put_SnapToGrid (
        /*[in]*/ enum Office::MsoTriState SnapToGrid ) = 0;
      virtual HRESULT __stdcall get_GridDistance (
        /*[out,retval]*/ float * GridDistance ) = 0;
      virtual HRESULT __stdcall put_GridDistance (
        /*[in]*/ float GridDistance ) = 0;
      virtual HRESULT __stdcall get_Designs (
        /*[out,retval]*/ struct Designs * * Designs ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_CheckIn (
        /*[in]*/ VARIANT_BOOL SaveChanges,
        /*[in]*/ VARIANT Comments = vtMissing,
        /*[in]*/ VARIANT MakePublic = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_CanCheckIn (
        /*[out,retval]*/ VARIANT_BOOL * CanCheckIn ) = 0;
      virtual HRESULT __stdcall get_Signatures (
        /*[out,retval]*/ struct Office::SignatureSet * * Signatures ) = 0;
      virtual HRESULT __stdcall get_RemovePersonalInformation (
        /*[out,retval]*/ enum Office::MsoTriState * RemovePersonalInformation ) = 0;
      virtual HRESULT __stdcall put_RemovePersonalInformation (
        /*[in]*/ enum Office::MsoTriState RemovePersonalInformation ) = 0;
      virtual HRESULT __stdcall raw_SendForReview (
        /*[in]*/ BSTR Recipients,
        /*[in]*/ BSTR Subject,
        /*[in]*/ VARIANT_BOOL ShowMessage,
        /*[in]*/ VARIANT IncludeAttachment = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ReplyWithChanges (
        /*[in]*/ VARIANT_BOOL ShowMessage ) = 0;
      virtual HRESULT __stdcall raw_EndReview ( ) = 0;
      virtual HRESULT __stdcall get_HasRevisionInfo (
        /*[out,retval]*/ enum PpRevisionInfo * HasRevisionInfo ) = 0;
      virtual HRESULT __stdcall raw_AddBaseline (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_RemoveBaseline ( ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionProvider (
        /*[out,retval]*/ BSTR * PasswordEncryptionProvider ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionAlgorithm (
        /*[out,retval]*/ BSTR * PasswordEncryptionAlgorithm ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionKeyLength (
        /*[out,retval]*/ int * PasswordEncryptionKeyLength ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionFileProperties (
        /*[out,retval]*/ VARIANT_BOOL * PasswordEncryptionFileProperties ) = 0;
      virtual HRESULT __stdcall raw_SetPasswordEncryptionOptions (
        /*[in]*/ BSTR PasswordEncryptionProvider,
        /*[in]*/ BSTR PasswordEncryptionAlgorithm,
        /*[in]*/ int PasswordEncryptionKeyLength,
        /*[in]*/ VARIANT_BOOL PasswordEncryptionFileProperties ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * Password ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall get_WritePassword (
        /*[out,retval]*/ BSTR * WritePassword ) = 0;
      virtual HRESULT __stdcall put_WritePassword (
        /*[in]*/ BSTR WritePassword ) = 0;
      virtual HRESULT __stdcall get_Permission (
        /*[out,retval]*/ struct Office::Permission * * Permission ) = 0;
      virtual HRESULT __stdcall get_SharedWorkspace (
        /*[out,retval]*/ struct Office::SharedWorkspace * * SharedWorkspace ) = 0;
      virtual HRESULT __stdcall get_Sync (
        /*[out,retval]*/ struct Office::Sync * * Sync ) = 0;
      virtual HRESULT __stdcall raw_SendFaxOverInternet (
        /*[in]*/ BSTR Recipients,
        /*[in]*/ BSTR Subject,
        /*[in]*/ VARIANT_BOOL ShowMessage ) = 0;
      virtual HRESULT __stdcall get_DocumentLibraryVersions (
        /*[out,retval]*/ struct Office::DocumentLibraryVersions * * DocumentLibraryVersions ) = 0;
      virtual HRESULT __stdcall get_ContentTypeProperties (
        /*[out,retval]*/ struct Office::MetaProperties * * ContentTypeProperties ) = 0;
      virtual HRESULT __stdcall get_SectionCount (
        /*[out,retval]*/ int * SectionCount ) = 0;
      virtual HRESULT __stdcall get_HasSections (
        /*[out,retval]*/ VARIANT_BOOL * HasSections ) = 0;
      virtual HRESULT __stdcall raw_NewSectionAfter (
        /*[in]*/ int Index,
        /*[in]*/ VARIANT_BOOL AfterSlide,
        /*[in]*/ BSTR sectionTitle,
        /*[out]*/ int * newSectionIndex ) = 0;
      virtual HRESULT __stdcall raw_DeleteSection (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_DisableSections ( ) = 0;
      virtual HRESULT __stdcall raw_sectionTitle (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * sectionTitle ) = 0;
      virtual HRESULT __stdcall raw_RemoveDocumentInformation (
        /*[in]*/ enum PpRemoveDocInfoType Type ) = 0;
      virtual HRESULT __stdcall raw_CheckInWithVersion (
        /*[in]*/ VARIANT_BOOL SaveChanges,
        /*[in]*/ VARIANT Comments = vtMissing,
        /*[in]*/ VARIANT MakePublic = vtMissing,
        /*[in]*/ VARIANT VersionType = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ExportAsFixedFormat (
        /*[in]*/ BSTR Path,
        /*[in]*/ enum PpFixedFormatType FixedFormatType,
        /*[in]*/ enum PpFixedFormatIntent Intent,
        /*[in]*/ enum Office::MsoTriState FrameSlides,
        /*[in]*/ enum PpPrintHandoutOrder HandoutOrder,
        /*[in]*/ enum PpPrintOutputType OutputType,
        /*[in]*/ enum Office::MsoTriState PrintHiddenSlides,
        /*[in]*/ struct PrintRange * PrintRange,
        /*[in]*/ enum PpPrintRangeType RangeType,
        /*[in]*/ BSTR SlideShowName,
        /*[in]*/ VARIANT_BOOL IncludeDocProperties,
        /*[in]*/ VARIANT_BOOL KeepIRMSettings,
        /*[in]*/ VARIANT_BOOL DocStructureTags,
        /*[in]*/ VARIANT_BOOL BitmapMissingFonts,
        /*[in]*/ VARIANT_BOOL UseISO19005_1,
        /*[in]*/ VARIANT ExternalExporter = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ServerPolicy (
        /*[out,retval]*/ struct Office::ServerPolicy * * ServerPolicy ) = 0;
      virtual HRESULT __stdcall raw_GetWorkflowTasks (
        /*[out,retval]*/ struct Office::WorkflowTasks * * GetWorkflowTasks ) = 0;
      virtual HRESULT __stdcall raw_GetWorkflowTemplates (
        /*[out,retval]*/ struct Office::WorkflowTemplates * * GetWorkflowTemplates ) = 0;
      virtual HRESULT __stdcall raw_LockServerFile ( ) = 0;
      virtual HRESULT __stdcall get_DocumentInspectors (
        /*[out,retval]*/ struct Office::DocumentInspectors * * DocumentInspectors ) = 0;
      virtual HRESULT __stdcall get_HasVBProject (
        /*[out,retval]*/ VARIANT_BOOL * HasVBProject ) = 0;
      virtual HRESULT __stdcall get_CustomXMLParts (
        /*[out,retval]*/ struct Office::_CustomXMLParts * * CustomXMLParts ) = 0;
      virtual HRESULT __stdcall get_Final (
        /*[out,retval]*/ VARIANT_BOOL * Final ) = 0;
      virtual HRESULT __stdcall put_Final (
        /*[in]*/ VARIANT_BOOL Final ) = 0;
      virtual HRESULT __stdcall raw_ApplyTheme (
        /*[in]*/ BSTR themeName ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
      virtual HRESULT __stdcall get_Research (
        /*[out,retval]*/ struct Research * * Research ) = 0;
      virtual HRESULT __stdcall raw_PublishSlides (
        /*[in]*/ BSTR SlideLibraryUrl,
        /*[in]*/ VARIANT_BOOL Overwrite,
        /*[in]*/ VARIANT_BOOL UseSlideOrder ) = 0;
      virtual HRESULT __stdcall get_EncryptionProvider (
        /*[out,retval]*/ BSTR * EncryptionProvider ) = 0;
      virtual HRESULT __stdcall put_EncryptionProvider (
        /*[in]*/ BSTR EncryptionProvider ) = 0;
      virtual HRESULT __stdcall raw_Convert ( ) = 0;
};

struct __declspec(uuid("914934c9-5a91-11cf-8700-00aa0060263b"))
Cell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetSelected))
    VARIANT_BOOL Selected;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapePtr GetShape ( );
    BordersPtr GetBorders ( );
    HRESULT Merge (
        struct Cell * MergeTo );
    HRESULT Split (
        int NumRows,
        int NumColumns );
    HRESULT Select ( );
    VARIANT_BOOL GetSelected ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * Borders ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ struct Cell * MergeTo ) = 0;
      virtual HRESULT __stdcall raw_Split (
        /*[in]*/ int NumRows,
        /*[in]*/ int NumColumns ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ VARIANT_BOOL * Selected ) = 0;
};

struct __declspec(uuid("914934c8-5a91-11cf-8700-00aa0060263b"))
CellRange : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CellPtr Item (
        int Index );
    BordersPtr GetBorders ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Cell * * Item ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * Borders ) = 0;
};

struct __declspec(uuid("914934c5-5a91-11cf-8700-00aa0060263b"))
Column : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCells))
    CellRangePtr Cells;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CellRangePtr GetCells ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    float GetWidth ( );
    void PutWidth (
        float Width );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct CellRange * * Cells ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
};

struct __declspec(uuid("914934c4-5a91-11cf-8700-00aa0060263b"))
Columns : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColumnPtr Item (
        int Index );
    ColumnPtr Add (
        int BeforeColumn );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Column * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int BeforeColumn,
        /*[out,retval]*/ struct Column * * Add ) = 0;
};

struct __declspec(uuid("914934c7-5a91-11cf-8700-00aa0060263b"))
Row : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCells))
    CellRangePtr Cells;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CellRangePtr GetCells ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    float GetHeight ( );
    void PutHeight (
        float Height );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct CellRange * * Cells ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
};

struct __declspec(uuid("914934c6-5a91-11cf-8700-00aa0060263b"))
Rows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    RowPtr Item (
        int Index );
    RowPtr Add (
        int BeforeRow );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Row * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int BeforeRow,
        /*[out,retval]*/ struct Row * * Add ) = 0;
};

struct __declspec(uuid("914934c3-5a91-11cf-8700-00aa0060263b"))
Table : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetColumns))
    ColumnsPtr Columns;
    __declspec(property(get=GetRows))
    RowsPtr Rows;
    __declspec(property(get=GetTableDirection,put=PutTableDirection))
    enum PpDirection TableDirection;
    __declspec(property(get=GetFirstRow,put=PutFirstRow))
    VARIANT_BOOL FirstRow;
    __declspec(property(get=GetLastRow,put=PutLastRow))
    VARIANT_BOOL LastRow;
    __declspec(property(get=GetFirstCol,put=PutFirstCol))
    VARIANT_BOOL FirstCol;
    __declspec(property(get=GetLastCol,put=PutLastCol))
    VARIANT_BOOL LastCol;
    __declspec(property(get=GetHorizBanding,put=PutHorizBanding))
    VARIANT_BOOL HorizBanding;
    __declspec(property(get=GetVertBanding,put=PutVertBanding))
    VARIANT_BOOL VertBanding;
    __declspec(property(get=GetStyle))
    TableStylePtr Style;
    __declspec(property(get=GetBackground))
    TableBackgroundPtr Background;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColumnsPtr GetColumns ( );
    RowsPtr GetRows ( );
    CellPtr Cell (
        int Row,
        int Column );
    enum PpDirection GetTableDirection ( );
    void PutTableDirection (
        enum PpDirection TableDirection );
    HRESULT MergeBorders ( );
    VARIANT_BOOL GetFirstRow ( );
    void PutFirstRow (
        VARIANT_BOOL FirstRow );
    VARIANT_BOOL GetLastRow ( );
    void PutLastRow (
        VARIANT_BOOL LastRow );
    VARIANT_BOOL GetFirstCol ( );
    void PutFirstCol (
        VARIANT_BOOL FirstCol );
    VARIANT_BOOL GetLastCol ( );
    void PutLastCol (
        VARIANT_BOOL LastCol );
    VARIANT_BOOL GetHorizBanding ( );
    void PutHorizBanding (
        VARIANT_BOOL HorizBanding );
    VARIANT_BOOL GetVertBanding ( );
    void PutVertBanding (
        VARIANT_BOOL VertBanding );
    TableStylePtr GetStyle ( );
    TableBackgroundPtr GetBackground ( );
    HRESULT ScaleProportionally (
        float scale );
    HRESULT ApplyStyle (
        _bstr_t StyleID,
        VARIANT_BOOL SaveFormatting );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Columns * * Columns ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Rows * * Rows ) = 0;
      virtual HRESULT __stdcall raw_Cell (
        /*[in]*/ int Row,
        /*[in]*/ int Column,
        /*[out,retval]*/ struct Cell * * Cell ) = 0;
      virtual HRESULT __stdcall get_TableDirection (
        /*[out,retval]*/ enum PpDirection * TableDirection ) = 0;
      virtual HRESULT __stdcall put_TableDirection (
        /*[in]*/ enum PpDirection TableDirection ) = 0;
      virtual HRESULT __stdcall raw_MergeBorders ( ) = 0;
      virtual HRESULT __stdcall get_FirstRow (
        /*[out,retval]*/ VARIANT_BOOL * FirstRow ) = 0;
      virtual HRESULT __stdcall put_FirstRow (
        /*[in]*/ VARIANT_BOOL FirstRow ) = 0;
      virtual HRESULT __stdcall get_LastRow (
        /*[out,retval]*/ VARIANT_BOOL * LastRow ) = 0;
      virtual HRESULT __stdcall put_LastRow (
        /*[in]*/ VARIANT_BOOL LastRow ) = 0;
      virtual HRESULT __stdcall get_FirstCol (
        /*[out,retval]*/ VARIANT_BOOL * FirstCol ) = 0;
      virtual HRESULT __stdcall put_FirstCol (
        /*[in]*/ VARIANT_BOOL FirstCol ) = 0;
      virtual HRESULT __stdcall get_LastCol (
        /*[out,retval]*/ VARIANT_BOOL * LastCol ) = 0;
      virtual HRESULT __stdcall put_LastCol (
        /*[in]*/ VARIANT_BOOL LastCol ) = 0;
      virtual HRESULT __stdcall get_HorizBanding (
        /*[out,retval]*/ VARIANT_BOOL * HorizBanding ) = 0;
      virtual HRESULT __stdcall put_HorizBanding (
        /*[in]*/ VARIANT_BOOL HorizBanding ) = 0;
      virtual HRESULT __stdcall get_VertBanding (
        /*[out,retval]*/ VARIANT_BOOL * VertBanding ) = 0;
      virtual HRESULT __stdcall put_VertBanding (
        /*[in]*/ VARIANT_BOOL VertBanding ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct TableStyle * * Style ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct TableBackground * * Background ) = 0;
      virtual HRESULT __stdcall raw_ScaleProportionally (
        /*[in]*/ float scale ) = 0;
      virtual HRESULT __stdcall raw_ApplyStyle (
        /*[in]*/ BSTR StyleID,
        /*[in]*/ VARIANT_BOOL SaveFormatting ) = 0;
};

struct __declspec(uuid("914934e0-5a91-11cf-8700-00aa0060263b"))
Timing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRestart,put=PutRestart))
    enum MsoAnimEffectRestart Restart;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDuration,put=PutDuration))
    float Duration;
    __declspec(property(get=GetTriggerType,put=PutTriggerType))
    enum MsoAnimTriggerType TriggerType;
    __declspec(property(get=GetTriggerDelayTime,put=PutTriggerDelayTime))
    float TriggerDelayTime;
    __declspec(property(get=GetTriggerShape,put=PutTriggerShape))
    ShapePtr TriggerShape;
    __declspec(property(get=GetRepeatCount,put=PutRepeatCount))
    int RepeatCount;
    __declspec(property(get=GetRepeatDuration,put=PutRepeatDuration))
    float RepeatDuration;
    __declspec(property(get=GetSpeed,put=PutSpeed))
    float Speed;
    __declspec(property(get=GetAccelerate,put=PutAccelerate))
    float Accelerate;
    __declspec(property(get=GetDecelerate,put=PutDecelerate))
    float Decelerate;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    float GetDuration ( );
    void PutDuration (
        float Duration );
    enum MsoAnimTriggerType GetTriggerType ( );
    void PutTriggerType (
        enum MsoAnimTriggerType TriggerType );
    float GetTriggerDelayTime ( );
    void PutTriggerDelayTime (
        float TriggerDelayTime );
    ShapePtr GetTriggerShape ( );
    void PutTriggerShape (
        struct Shape * TriggerShape );
    int GetRepeatCount ( );
    void PutRepeatCount (
        int RepeatCount );
    float GetRepeatDuration ( );
    void PutRepeatDuration (
        float RepeatDuration );
    float GetSpeed ( );
    void PutSpeed (
        float Speed );
    float GetAccelerate ( );
    void PutAccelerate (
        float Accelerate );
    float GetDecelerate ( );
    void PutDecelerate (
        float Decelerate );
    enum Office::MsoTriState GetAutoReverse ( );
    void PutAutoReverse (
        enum Office::MsoTriState AutoReverse );
    enum Office::MsoTriState GetSmoothStart ( );
    void PutSmoothStart (
        enum Office::MsoTriState SmoothStart );
    enum Office::MsoTriState GetSmoothEnd ( );
    void PutSmoothEnd (
        enum Office::MsoTriState SmoothEnd );
    enum Office::MsoTriState GetRewindAtEnd ( );
    void PutRewindAtEnd (
        enum Office::MsoTriState RewindAtEnd );
    enum MsoAnimEffectRestart GetRestart ( );
    void PutRestart (
        enum MsoAnimEffectRestart Restart );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ float * Duration ) = 0;
      virtual HRESULT __stdcall put_Duration (
        /*[in]*/ float Duration ) = 0;
      virtual HRESULT __stdcall get_TriggerType (
        /*[out,retval]*/ enum MsoAnimTriggerType * TriggerType ) = 0;
      virtual HRESULT __stdcall put_TriggerType (
        /*[in]*/ enum MsoAnimTriggerType TriggerType ) = 0;
      virtual HRESULT __stdcall get_TriggerDelayTime (
        /*[out,retval]*/ float * TriggerDelayTime ) = 0;
      virtual HRESULT __stdcall put_TriggerDelayTime (
        /*[in]*/ float TriggerDelayTime ) = 0;
      virtual HRESULT __stdcall get_TriggerShape (
        /*[out,retval]*/ struct Shape * * TriggerShape ) = 0;
      virtual HRESULT __stdcall put_TriggerShape (
        /*[in]*/ struct Shape * TriggerShape ) = 0;
      virtual HRESULT __stdcall get_RepeatCount (
        /*[out,retval]*/ int * RepeatCount ) = 0;
      virtual HRESULT __stdcall put_RepeatCount (
        /*[in]*/ int RepeatCount ) = 0;
      virtual HRESULT __stdcall get_RepeatDuration (
        /*[out,retval]*/ float * RepeatDuration ) = 0;
      virtual HRESULT __stdcall put_RepeatDuration (
        /*[in]*/ float RepeatDuration ) = 0;
      virtual HRESULT __stdcall get_Speed (
        /*[out,retval]*/ float * Speed ) = 0;
      virtual HRESULT __stdcall put_Speed (
        /*[in]*/ float Speed ) = 0;
      virtual HRESULT __stdcall get_Accelerate (
        /*[out,retval]*/ float * Accelerate ) = 0;
      virtual HRESULT __stdcall put_Accelerate (
        /*[in]*/ float Accelerate ) = 0;
      virtual HRESULT __stdcall get_Decelerate (
        /*[out,retval]*/ float * Decelerate ) = 0;
      virtual HRESULT __stdcall put_Decelerate (
        /*[in]*/ float Decelerate ) = 0;
      virtual HRESULT __stdcall get_AutoReverse (
        /*[out,retval]*/ enum Office::MsoTriState * AutoReverse ) = 0;
      virtual HRESULT __stdcall put_AutoReverse (
        /*[in]*/ enum Office::MsoTriState AutoReverse ) = 0;
      virtual HRESULT __stdcall get_SmoothStart (
        /*[out,retval]*/ enum Office::MsoTriState * SmoothStart ) = 0;
      virtual HRESULT __stdcall put_SmoothStart (
        /*[in]*/ enum Office::MsoTriState SmoothStart ) = 0;
      virtual HRESULT __stdcall get_SmoothEnd (
        /*[out,retval]*/ enum Office::MsoTriState * SmoothEnd ) = 0;
      virtual HRESULT __stdcall put_SmoothEnd (
        /*[in]*/ enum Office::MsoTriState SmoothEnd ) = 0;
      virtual HRESULT __stdcall get_RewindAtEnd (
        /*[out,retval]*/ enum Office::MsoTriState * RewindAtEnd ) = 0;
      virtual HRESULT __stdcall put_RewindAtEnd (
        /*[in]*/ enum Office::MsoTriState RewindAtEnd ) = 0;
      virtual HRESULT __stdcall get_Restart (
        /*[out,retval]*/ enum MsoAnimEffectRestart * Restart ) = 0;
      virtual HRESULT __stdcall put_Restart (
        /*[in]*/ enum MsoAnimEffectRestart Restart ) = 0;
};

struct __declspec(uuid("914934e4-5a91-11cf-8700-00aa0060263b"))
AnimationBehavior : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAdditive,put=PutAdditive))
    enum MsoAnimAdditive Additive;
    __declspec(property(get=GetAccumulate,put=PutAccumulate))
    enum MsoAnimAccumulate Accumulate;
    __declspec(property(get=GetType,put=PutType))
    enum MsoAnimType Type;
    __declspec(property(get=GetMotionEffect))
    MotionEffectPtr MotionEffect;
    __declspec(property(get=GetColorEffect))
    ColorEffectPtr ColorEffect;
    __declspec(property(get=GetScaleEffect))
    ScaleEffectPtr ScaleEffect;
    __declspec(property(get=GetRotationEffect))
    RotationEffectPtr RotationEffect;
    __declspec(property(get=GetPropertyEffect))
    PropertyEffectPtr PropertyEffect;
    __declspec(property(get=GetTiming))
    TimingPtr Timing;
    __declspec(property(get=GetCommandEffect))
    CommandEffectPtr CommandEffect;
    __declspec(property(get=GetFilterEffect))
    FilterEffectPtr FilterEffect;
    __declspec(property(get=GetSetEffect))
    SetEffectPtr SetEffect;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum MsoAnimAdditive GetAdditive ( );
    void PutAdditive (
        enum MsoAnimAdditive Additive );
    enum MsoAnimAccumulate GetAccumulate ( );
    void PutAccumulate (
        enum MsoAnimAccumulate Accumulate );
    enum MsoAnimType GetType ( );
    void PutType (
        enum MsoAnimType Type );
    MotionEffectPtr GetMotionEffect ( );
    ColorEffectPtr GetColorEffect ( );
    ScaleEffectPtr GetScaleEffect ( );
    RotationEffectPtr GetRotationEffect ( );
    PropertyEffectPtr GetPropertyEffect ( );
    TimingPtr GetTiming ( );
    HRESULT Delete ( );
    CommandEffectPtr GetCommandEffect ( );
    FilterEffectPtr GetFilterEffect ( );
    SetEffectPtr GetSetEffect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Additive (
        /*[out,retval]*/ enum MsoAnimAdditive * Additive ) = 0;
      virtual HRESULT __stdcall put_Additive (
        /*[in]*/ enum MsoAnimAdditive Additive ) = 0;
      virtual HRESULT __stdcall get_Accumulate (
        /*[out,retval]*/ enum MsoAnimAccumulate * Accumulate ) = 0;
      virtual HRESULT __stdcall put_Accumulate (
        /*[in]*/ enum MsoAnimAccumulate Accumulate ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoAnimType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum MsoAnimType Type ) = 0;
      virtual HRESULT __stdcall get_MotionEffect (
        /*[out,retval]*/ struct MotionEffect * * MotionEffect ) = 0;
      virtual HRESULT __stdcall get_ColorEffect (
        /*[out,retval]*/ struct ColorEffect * * ColorEffect ) = 0;
      virtual HRESULT __stdcall get_ScaleEffect (
        /*[out,retval]*/ struct ScaleEffect * * ScaleEffect ) = 0;
      virtual HRESULT __stdcall get_RotationEffect (
        /*[out,retval]*/ struct RotationEffect * * RotationEffect ) = 0;
      virtual HRESULT __stdcall get_PropertyEffect (
        /*[out,retval]*/ struct PropertyEffect * * PropertyEffect ) = 0;
      virtual HRESULT __stdcall get_Timing (
        /*[out,retval]*/ struct Timing * * Timing ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_CommandEffect (
        /*[out,retval]*/ struct CommandEffect * * CommandEffect ) = 0;
      virtual HRESULT __stdcall get_FilterEffect (
        /*[out,retval]*/ struct FilterEffect * * FilterEffect ) = 0;
      virtual HRESULT __stdcall get_SetEffect (
        /*[out,retval]*/ struct SetEffect * * SetEffect ) = 0;
};

struct __declspec(uuid("914934e3-5a91-11cf-8700-00aa0060263b"))
AnimationBehaviors : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    AnimationBehaviorPtr Item (
        int Index );
    AnimationBehaviorPtr Add (
        enum MsoAnimType Type,
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct AnimationBehavior * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum MsoAnimType Type,
        /*[in]*/ int Index,
        /*[out,retval]*/ struct AnimationBehavior * * Add ) = 0;
};

struct __declspec(uuid("914934df-5a91-11cf-8700-00aa0060263b"))
Effect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBehaviors))
    AnimationBehaviorsPtr Behaviors;
    __declspec(property(get=GetEffectInformation))
    EffectInformationPtr EffectInformation;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShape,put=PutShape))
    ShapePtr Shape;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetTiming))
    TimingPtr Timing;
    __declspec(property(get=GetEffectType,put=PutEffectType))
    enum MsoAnimEffect EffectType;
    __declspec(property(get=GetEffectParameters))
    EffectParametersPtr EffectParameters;
    __declspec(property(get=GetTextRangeStart))
    int TextRangeStart;
    __declspec(property(get=GetTextRangeLength))
    int TextRangeLength;
    __declspec(property(get=GetParagraph,put=PutParagraph))
    int Paragraph;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapePtr GetShape ( );
    void PutShape (
        struct Shape * Shape );
    HRESULT MoveTo (
        int toPos );
    HRESULT MoveBefore (
        struct Effect * Effect );
    HRESULT MoveAfter (
        struct Effect * Effect );
    HRESULT Delete ( );
    int GetIndex ( );
    TimingPtr GetTiming ( );
    enum MsoAnimEffect GetEffectType ( );
    void PutEffectType (
        enum MsoAnimEffect EffectType );
    EffectParametersPtr GetEffectParameters ( );
    int GetTextRangeStart ( );
    int GetTextRangeLength ( );
    int GetParagraph ( );
    void PutParagraph (
        int Paragraph );
    _bstr_t GetDisplayName ( );
    enum Office::MsoTriState GetExit ( );
    void PutExit (
        enum Office::MsoTriState Exit );
    AnimationBehaviorsPtr GetBehaviors ( );
    EffectInformationPtr GetEffectInformation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall put_Shape (
        /*[in]*/ struct Shape * Shape ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ int toPos ) = 0;
      virtual HRESULT __stdcall raw_MoveBefore (
        /*[in]*/ struct Effect * Effect ) = 0;
      virtual HRESULT __stdcall raw_MoveAfter (
        /*[in]*/ struct Effect * Effect ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * Index ) = 0;
      virtual HRESULT __stdcall get_Timing (
        /*[out,retval]*/ struct Timing * * Timing ) = 0;
      virtual HRESULT __stdcall get_EffectType (
        /*[out,retval]*/ enum MsoAnimEffect * EffectType ) = 0;
      virtual HRESULT __stdcall put_EffectType (
        /*[in]*/ enum MsoAnimEffect EffectType ) = 0;
      virtual HRESULT __stdcall get_EffectParameters (
        /*[out,retval]*/ struct EffectParameters * * EffectParameters ) = 0;
      virtual HRESULT __stdcall get_TextRangeStart (
        /*[out,retval]*/ int * TextRangeStart ) = 0;
      virtual HRESULT __stdcall get_TextRangeLength (
        /*[out,retval]*/ int * TextRangeLength ) = 0;
      virtual HRESULT __stdcall get_Paragraph (
        /*[out,retval]*/ int * Paragraph ) = 0;
      virtual HRESULT __stdcall put_Paragraph (
        /*[in]*/ int Paragraph ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * DisplayName ) = 0;
      virtual HRESULT __stdcall get_Exit (
        /*[out,retval]*/ enum Office::MsoTriState * Exit ) = 0;
      virtual HRESULT __stdcall put_Exit (
        /*[in]*/ enum Office::MsoTriState Exit ) = 0;
      virtual HRESULT __stdcall get_Behaviors (
        /*[out,retval]*/ struct AnimationBehaviors * * Behaviors ) = 0;
      virtual HRESULT __stdcall get_EffectInformation (
        /*[out,retval]*/ struct EffectInformation * * EffectInformation ) = 0;
};

struct __declspec(uuid("914934c2-5a91-11cf-8700-00aa0060263b"))
EApplication : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT WindowSelectionChange (
        struct Selection * Sel );
    HRESULT WindowBeforeRightClick (
        struct Selection * Sel,
        VARIANT_BOOL * Cancel );
    HRESULT WindowBeforeDoubleClick (
        struct Selection * Sel,
        VARIANT_BOOL * Cancel );
    HRESULT PresentationClose (
        struct _Presentation * Pres );
    HRESULT PresentationSave (
        struct _Presentation * Pres );
    HRESULT PresentationOpen (
        struct _Presentation * Pres );
    HRESULT NewPresentation (
        struct _Presentation * Pres );
    HRESULT PresentationNewSlide (
        struct _Slide * Sld );
    HRESULT WindowActivate (
        struct _Presentation * Pres,
        struct DocumentWindow * Wn );
    HRESULT WindowDeactivate (
        struct _Presentation * Pres,
        struct DocumentWindow * Wn );
    HRESULT SlideShowBegin (
        struct SlideShowWindow * Wn );
    HRESULT SlideShowNextBuild (
        struct SlideShowWindow * Wn );
    HRESULT SlideShowNextSlide (
        struct SlideShowWindow * Wn );
    HRESULT SlideShowEnd (
        struct _Presentation * Pres );
    HRESULT PresentationPrint (
        struct _Presentation * Pres );
    HRESULT SlideSelectionChanged (
        struct SlideRange * SldRange );
    HRESULT ColorSchemeChanged (
        struct SlideRange * SldRange );
    HRESULT PresentationBeforeSave (
        struct _Presentation * Pres,
        VARIANT_BOOL * Cancel );
    HRESULT SlideShowNextClick (
        struct SlideShowWindow * Wn,
        struct Effect * nEffect );
    HRESULT AfterNewPresentation (
        struct _Presentation * Pres );
    HRESULT AfterPresentationOpen (
        struct _Presentation * Pres );
    HRESULT PresentationSync (
        struct _Presentation * Pres,
        enum Office::MsoSyncEventType SyncEventType );
    HRESULT SlideShowOnNext (
        struct SlideShowWindow * Wn );
    HRESULT SlideShowOnPrevious (
        struct SlideShowWindow * Wn );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_WindowSelectionChange (
        /*[in]*/ struct Selection * Sel ) = 0;
      virtual HRESULT __stdcall raw_WindowBeforeRightClick (
        /*[in]*/ struct Selection * Sel,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WindowBeforeDoubleClick (
        /*[in]*/ struct Selection * Sel,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_PresentationClose (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationSave (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationOpen (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_NewPresentation (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationNewSlide (
        /*[in]*/ struct _Slide * Sld ) = 0;
      virtual HRESULT __stdcall raw_WindowActivate (
        /*[in]*/ struct _Presentation * Pres,
        /*[in]*/ struct DocumentWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowDeactivate (
        /*[in]*/ struct _Presentation * Pres,
        /*[in]*/ struct DocumentWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowBegin (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowNextBuild (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowNextSlide (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowEnd (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationPrint (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_SlideSelectionChanged (
        /*[in]*/ struct SlideRange * SldRange ) = 0;
      virtual HRESULT __stdcall raw_ColorSchemeChanged (
        /*[in]*/ struct SlideRange * SldRange ) = 0;
      virtual HRESULT __stdcall raw_PresentationBeforeSave (
        /*[in]*/ struct _Presentation * Pres,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SlideShowNextClick (
        /*[in]*/ struct SlideShowWindow * Wn,
        /*[in]*/ struct Effect * nEffect ) = 0;
      virtual HRESULT __stdcall raw_AfterNewPresentation (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_AfterPresentationOpen (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationSync (
        /*[in]*/ struct _Presentation * Pres,
        /*[in]*/ enum Office::MsoSyncEventType SyncEventType ) = 0;
      virtual HRESULT __stdcall raw_SlideShowOnNext (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowOnPrevious (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
};

struct __declspec(uuid("914934de-5a91-11cf-8700-00aa0060263b"))
Sequence : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    EffectPtr Item (
        int Index );
    EffectPtr AddEffect (
        struct Shape * Shape,
        enum MsoAnimEffect effectId,
        enum MsoAnimateByLevel Level,
        enum MsoAnimTriggerType trigger,
        int Index );
    EffectPtr Clone (
        struct Effect * Effect,
        int Index );
    EffectPtr FindFirstAnimationFor (
        struct Shape * Shape );
    EffectPtr FindFirstAnimationForClick (
        int click );
    EffectPtr ConvertToBuildLevel (
        struct Effect * Effect,
        enum MsoAnimateByLevel Level );
    EffectPtr ConvertToAfterEffect (
        struct Effect * Effect,
        enum MsoAnimAfterEffect After,
        Office::MsoRGBType DimColor,
        enum PpColorSchemeIndex DimSchemeColor );
    EffectPtr ConvertToAnimateBackground (
        struct Effect * Effect,
        enum Office::MsoTriState AnimateBackground );
    EffectPtr ConvertToAnimateInReverse (
        struct Effect * Effect,
        enum Office::MsoTriState animateInReverse );
    EffectPtr ConvertToTextUnitEffect (
        struct Effect * Effect,
        enum MsoAnimTextUnitEffect unitEffect );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Effect * * Item ) = 0;
      virtual HRESULT __stdcall raw_AddEffect (
        /*[in]*/ struct Shape * Shape,
        /*[in]*/ enum MsoAnimEffect effectId,
        /*[in]*/ enum MsoAnimateByLevel Level,
        /*[in]*/ enum MsoAnimTriggerType trigger,
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Effect * * Effect ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[in]*/ struct Effect * Effect,
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Effect * * Clone ) = 0;
      virtual HRESULT __stdcall raw_FindFirstAnimationFor (
        /*[in]*/ struct Shape * Shape,
        /*[out,retval]*/ struct Effect * * FindFirstAnimationFor ) = 0;
      virtual HRESULT __stdcall raw_FindFirstAnimationForClick (
        /*[in]*/ int click,
        /*[out,retval]*/ struct Effect * * FindFirstAnimationForClick ) = 0;
      virtual HRESULT __stdcall raw_ConvertToBuildLevel (
        /*[in]*/ struct Effect * Effect,
        /*[in]*/ enum MsoAnimateByLevel Level,
        /*[out,retval]*/ struct Effect * * ConvertToBuildLevel ) = 0;
      virtual HRESULT __stdcall raw_ConvertToAfterEffect (
        /*[in]*/ struct Effect * Effect,
        /*[in]*/ enum MsoAnimAfterEffect After,
        /*[in]*/ Office::MsoRGBType DimColor,
        /*[in]*/ enum PpColorSchemeIndex DimSchemeColor,
        /*[out,retval]*/ struct Effect * * ConvertToAfterEffect ) = 0;
      virtual HRESULT __stdcall raw_ConvertToAnimateBackground (
        /*[in]*/ struct Effect * Effect,
        /*[in]*/ enum Office::MsoTriState AnimateBackground,
        /*[out,retval]*/ struct Effect * * ConvertToAnimateBackground ) = 0;
      virtual HRESULT __stdcall raw_ConvertToAnimateInReverse (
        /*[in]*/ struct Effect * Effect,
        /*[in]*/ enum Office::MsoTriState animateInReverse,
        /*[out,retval]*/ struct Effect * * ConvertToAnimateInReverse ) = 0;
      virtual HRESULT __stdcall raw_ConvertToTextUnitEffect (
        /*[in]*/ struct Effect * Effect,
        /*[in]*/ enum MsoAnimTextUnitEffect unitEffect,
        /*[out,retval]*/ struct Effect * * ConvertToTextUnitEffect ) = 0;
};

struct __declspec(uuid("914934dd-5a91-11cf-8700-00aa0060263b"))
Sequences : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SequencePtr Item (
        int Index );
    SequencePtr Add (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Sequence * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct Sequence * * Add ) = 0;
};

struct __declspec(uuid("914934dc-5a91-11cf-8700-00aa0060263b"))
TimeLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMainSequence))
    SequencePtr MainSequence;
    __declspec(property(get=GetInteractiveSequences))
    SequencesPtr InteractiveSequences;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SequencePtr GetMainSequence ( );
    SequencesPtr GetInteractiveSequences ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_MainSequence (
        /*[out,retval]*/ struct Sequence * * MainSequence ) = 0;
      virtual HRESULT __stdcall get_InteractiveSequences (
        /*[out,retval]*/ struct Sequences * * InteractiveSequences ) = 0;
};

struct __declspec(uuid("9149347a-5a91-11cf-8700-00aa0060263b"))
ShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetPlaceholderFormat))
    PlaceholderFormatPtr PlaceholderFormat;
    __declspec(property(get=GetAnimationSettings))
    AnimationSettingsPtr AnimationSettings;
    __declspec(property(get=GetActionSettings))
    ActionSettingsPtr ActionSettings;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetMediaType))
    enum PpMediaType MediaType;
    __declspec(property(get=GetHasTextFrame))
    enum Office::MsoTriState HasTextFrame;
    __declspec(property(get=GetSoundFormat))
    SoundFormatPtr SoundFormat;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCanvasItems))
    CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetHasTable))
    enum Office::MsoTriState HasTable;
    __declspec(property(get=GetTable))
    TablePtr Table;
    __declspec(property(get=GetId))
    int Id;
    __declspec(property(put=PutRTF))
    _bstr_t RTF;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;
    __declspec(property(get=GetTextFrame2))
    TextFrame2Ptr TextFrame2;
    __declspec(property(get=GetHasChart))
    enum Office::MsoTriState HasChart;
    __declspec(property(get=GetSoftEdge))
    Office::SoftEdgeFormatPtr SoftEdge;
    __declspec(property(get=GetGlow))
    Office::GlowFormatPtr Glow;
    __declspec(property(get=GetReflection))
    Office::ReflectionFormatPtr Reflection;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    int ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom fScale );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom fScale );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType AutoShapeType );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode BlackWhiteMode );
    CalloutFormatPtr GetCallout ( );
    int GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float Height );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState LockAspectRatio );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float Rotation );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    TextFramePtr GetTextFrame ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float Top );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    OLEFormatPtr GetOLEFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    PlaceholderFormatPtr GetPlaceholderFormat ( );
    AnimationSettingsPtr GetAnimationSettings ( );
    ActionSettingsPtr GetActionSettings ( );
    TagsPtr GetTags ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Select (
        enum Office::MsoTriState Replace );
    ShapeRangePtr Duplicate ( );
    enum PpMediaType GetMediaType ( );
    enum Office::MsoTriState GetHasTextFrame ( );
    SoundFormatPtr GetSoundFormat ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    _variant_t _Index (
        int Index );
    long GetCount ( );
    ShapePtr Group ( );
    ShapePtr Regroup ( );
    HRESULT Align (
        enum Office::MsoAlignCmd AlignCmd,
        enum Office::MsoTriState RelativeTo );
    HRESULT Distribute (
        enum Office::MsoDistributeCmd DistributeCmd,
        enum Office::MsoTriState RelativeTo );
    HRESULT GetPolygonalRepresentation (
        unsigned long maxPointsInBuffer,
        float * pPoints,
        unsigned long * numPointsInPolygon,
        enum Office::MsoTriState * IsOpen );
    Office::ScriptPtr GetScript ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t AlternativeText );
    enum Office::MsoTriState GetHasTable ( );
    TablePtr GetTable ( );
    HRESULT Export (
        _bstr_t PathName,
        enum PpShapeFormat Filter,
        int ScaleWidth,
        int ScaleHeight,
        enum PpExportMode ExportMode );
    enum Office::MsoTriState GetHasDiagram ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    CanvasShapesPtr GetCanvasItems ( );
    int GetId ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );
    void PutRTF (
        _bstr_t _arg1 );
    CustomerDataPtr GetCustomerData ( );
    TextFrame2Ptr GetTextFrame2 ( );
    enum Office::MsoTriState GetHasChart ( );
    enum Office::MsoShapeStyleIndex GetShapeStyle ( );
    void PutShapeStyle (
        enum Office::MsoShapeStyleIndex ShapeStyle );
    enum Office::MsoBackgroundStyleIndex GetBackgroundStyle ( );
    void PutBackgroundStyle (
        enum Office::MsoBackgroundStyleIndex BackgroundStyle );
    Office::SoftEdgeFormatPtr GetSoftEdge ( );
    Office::GlowFormatPtr GetGlow ( );
    Office::ReflectionFormatPtr GetReflection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum Office::MsoFlipCmd FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ enum Office::MsoScaleFrom fScale ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ enum Office::MsoScaleFrom fScale ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * Ungroup ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * Adjustments ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ enum Office::MsoAutoShapeType * AutoShapeType ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ enum Office::MsoAutoShapeType AutoShapeType ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ enum Office::MsoBlackWhiteMode * BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ enum Office::MsoBlackWhiteMode BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * Callout ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ int * ConnectionSiteCount ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum Office::MsoTriState * Connector ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * ConnectorFormat ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * Fill ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * GroupItems ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * HorizontalFlip ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * Line ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum Office::MsoTriState * LockAspectRatio ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum Office::MsoTriState LockAspectRatio ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * Nodes ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * Rotation ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float Rotation ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * Picture ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * Shadow ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * TextEffect ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * TextFrame ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * ThreeD ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShapeType * Type ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * VerticalFlip ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * Vertices ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ int * ZOrderPosition ) = 0;
      virtual HRESULT __stdcall get_OLEFormat (
        /*[out,retval]*/ struct OLEFormat * * OLEFormat ) = 0;
      virtual HRESULT __stdcall get_LinkFormat (
        /*[out,retval]*/ struct LinkFormat * * LinkFormat ) = 0;
      virtual HRESULT __stdcall get_PlaceholderFormat (
        /*[out,retval]*/ struct PlaceholderFormat * * PlaceholderFormat ) = 0;
      virtual HRESULT __stdcall get_AnimationSettings (
        /*[out,retval]*/ struct AnimationSettings * * AnimationSettings ) = 0;
      virtual HRESULT __stdcall get_ActionSettings (
        /*[out,retval]*/ struct ActionSettings * * ActionSettings ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ enum Office::MsoTriState Replace ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct ShapeRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall get_MediaType (
        /*[out,retval]*/ enum PpMediaType * MediaType ) = 0;
      virtual HRESULT __stdcall get_HasTextFrame (
        /*[out,retval]*/ enum Office::MsoTriState * HasTextFrame ) = 0;
      virtual HRESULT __stdcall get_SoundFormat (
        /*[out,retval]*/ struct SoundFormat * * SoundFormat ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw__Index (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT * _Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct Shape * * Group ) = 0;
      virtual HRESULT __stdcall raw_Regroup (
        /*[out,retval]*/ struct Shape * * Regroup ) = 0;
      virtual HRESULT __stdcall raw_Align (
        /*[in]*/ enum Office::MsoAlignCmd AlignCmd,
        /*[in]*/ enum Office::MsoTriState RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_Distribute (
        /*[in]*/ enum Office::MsoDistributeCmd DistributeCmd,
        /*[in]*/ enum Office::MsoTriState RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_GetPolygonalRepresentation (
        /*[in]*/ unsigned long maxPointsInBuffer,
        /*[in]*/ float * pPoints,
        /*[out]*/ unsigned long * numPointsInPolygon,
        /*[out]*/ enum Office::MsoTriState * IsOpen ) = 0;
      virtual HRESULT __stdcall get_Script (
        /*[out,retval]*/ struct Office::Script * * Script ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * AlternativeText ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR AlternativeText ) = 0;
      virtual HRESULT __stdcall get_HasTable (
        /*[out,retval]*/ enum Office::MsoTriState * HasTable ) = 0;
      virtual HRESULT __stdcall get_Table (
        /*[out,retval]*/ struct Table * * Table ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR PathName,
        /*[in]*/ enum PpShapeFormat Filter,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight,
        /*[in]*/ enum PpExportMode ExportMode ) = 0;
      virtual HRESULT __stdcall get_HasDiagram (
        /*[out,retval]*/ enum Office::MsoTriState * pHasDiagram ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct Diagram * * Diagram ) = 0;
      virtual HRESULT __stdcall get_HasDiagramNode (
        /*[out,retval]*/ enum Office::MsoTriState * pHasDiagram ) = 0;
      virtual HRESULT __stdcall get_DiagramNode (
        /*[out,retval]*/ struct DiagramNode * * DiagramNode ) = 0;
      virtual HRESULT __stdcall get_Child (
        /*[out,retval]*/ enum Office::MsoTriState * Child ) = 0;
      virtual HRESULT __stdcall get_ParentGroup (
        /*[out,retval]*/ struct Shape * * Parent ) = 0;
      virtual HRESULT __stdcall get_CanvasItems (
        /*[out,retval]*/ struct CanvasShapes * * CanvasShapes ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ int * pid ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropRight (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropBottom (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall put_RTF (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
      virtual HRESULT __stdcall get_TextFrame2 (
        /*[out,retval]*/ struct TextFrame2 * * Frame ) = 0;
      virtual HRESULT __stdcall get_HasChart (
        /*[out,retval]*/ enum Office::MsoTriState * pHasChart ) = 0;
      virtual HRESULT __stdcall get_ShapeStyle (
        /*[out,retval]*/ enum Office::MsoShapeStyleIndex * ShapeStyle ) = 0;
      virtual HRESULT __stdcall put_ShapeStyle (
        /*[in]*/ enum Office::MsoShapeStyleIndex ShapeStyle ) = 0;
      virtual HRESULT __stdcall get_BackgroundStyle (
        /*[out,retval]*/ enum Office::MsoBackgroundStyleIndex * BackgroundStyle ) = 0;
      virtual HRESULT __stdcall put_BackgroundStyle (
        /*[in]*/ enum Office::MsoBackgroundStyleIndex BackgroundStyle ) = 0;
      virtual HRESULT __stdcall get_SoftEdge (
        /*[out,retval]*/ struct Office::SoftEdgeFormat * * SoftEdge ) = 0;
      virtual HRESULT __stdcall get_Glow (
        /*[out,retval]*/ struct Office::GlowFormat * * Glow ) = 0;
      virtual HRESULT __stdcall get_Reflection (
        /*[out,retval]*/ struct Office::ReflectionFormat * * Reflection ) = 0;
};

struct __declspec(uuid("9149347b-5a91-11cf-8700-00aa0060263b"))
GroupShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapeRangePtr Range (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pnShapes ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * Range ) = 0;
};

struct __declspec(uuid("914934ec-5a91-11cf-8700-00aa0060263b"))
CanvasShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetBackground))
    ShapePtr Background;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t FileName,
        enum Office::MsoTriState LinkToFile,
        enum Office::MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum Office::MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr Range (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr GetBackground ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_AddCallout (
        /*[in]*/ enum Office::MsoCalloutType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Callout ) = 0;
      virtual HRESULT __stdcall raw_AddConnector (
        /*[in]*/ enum Office::MsoConnectorType Type,
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Connector ) = 0;
      virtual HRESULT __stdcall raw_AddCurve (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Curve ) = 0;
      virtual HRESULT __stdcall raw_AddLabel (
        /*[in]*/ enum Office::MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Label ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Line ) = 0;
      virtual HRESULT __stdcall raw_AddPicture (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum Office::MsoTriState LinkToFile,
        /*[in]*/ enum Office::MsoTriState SaveWithDocument,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Picture ) = 0;
      virtual HRESULT __stdcall raw_AddPolyline (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Polyline ) = 0;
      virtual HRESULT __stdcall raw_AddShape (
        /*[in]*/ enum Office::MsoAutoShapeType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall raw_AddTextEffect (
        /*[in]*/ enum Office::MsoPresetTextEffect PresetTextEffect,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR FontName,
        /*[in]*/ float FontSize,
        /*[in]*/ enum Office::MsoTriState FontBold,
        /*[in]*/ enum Office::MsoTriState FontItalic,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[out,retval]*/ struct Shape * * TextEffect ) = 0;
      virtual HRESULT __stdcall raw_AddTextbox (
        /*[in]*/ enum Office::MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Textbox ) = 0;
      virtual HRESULT __stdcall raw_BuildFreeform (
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[out,retval]*/ struct FreeformBuilder * * FreeformBuilder ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * Range ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct Shape * * Background ) = 0;
};

struct __declspec(uuid("914934f3-5a91-11cf-8700-00aa0060263b"))
CustomLayout : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetThemeColorScheme))
    Office::ThemeColorSchemePtr ThemeColorScheme;
    __declspec(property(get=GetCustomerData))
    CustomerDataPtr CustomerData;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetHeadersFooters))
    HeadersFootersPtr HeadersFooters;
    __declspec(property(get=GetBackground))
    ShapeRangePtr Background;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHeight))
    float Height;
    __declspec(property(get=GetWidth))
    float Width;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetDesign))
    DesignPtr Design;
    __declspec(property(get=GetTimeLine))
    TimeLinePtr TimeLine;
    __declspec(property(get=GetSlideShowTransition))
    SlideShowTransitionPtr SlideShowTransition;
    __declspec(property(get=GetMatchingName,put=PutMatchingName))
    _bstr_t MatchingName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapesPtr GetShapes ( );
    HeadersFootersPtr GetHeadersFooters ( );
    ShapeRangePtr GetBackground ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    HRESULT Delete ( );
    float GetHeight ( );
    float GetWidth ( );
    HyperlinksPtr GetHyperlinks ( );
    DesignPtr GetDesign ( );
    TimeLinePtr GetTimeLine ( );
    SlideShowTransitionPtr GetSlideShowTransition ( );
    _bstr_t GetMatchingName ( );
    void PutMatchingName (
        _bstr_t MatchingName );
    enum Office::MsoTriState GetPreserved ( );
    void PutPreserved (
        enum Office::MsoTriState Preserved );
    int GetIndex ( );
    HRESULT Select ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    CustomLayoutPtr Duplicate ( );
    HRESULT MoveTo (
        int toPos );
    enum Office::MsoTriState GetDisplayMasterShapes ( );
    void PutDisplayMasterShapes (
        enum Office::MsoTriState DisplayMasterShapes );
    enum Office::MsoTriState GetFollowMasterBackground ( );
    void PutFollowMasterBackground (
        enum Office::MsoTriState FollowMasterBackground );
    Office::ThemeColorSchemePtr GetThemeColorScheme ( );
    CustomerDataPtr GetCustomerData ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * Shapes ) = 0;
      virtual HRESULT __stdcall get_HeadersFooters (
        /*[out,retval]*/ struct HeadersFooters * * HeadersFooters ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct ShapeRange * * Background ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * Hyperlinks ) = 0;
      virtual HRESULT __stdcall get_Design (
        /*[out,retval]*/ struct Design * * Design ) = 0;
      virtual HRESULT __stdcall get_TimeLine (
        /*[out,retval]*/ struct TimeLine * * TimeLine ) = 0;
      virtual HRESULT __stdcall get_SlideShowTransition (
        /*[out,retval]*/ struct SlideShowTransition * * SlideShowTransition ) = 0;
      virtual HRESULT __stdcall get_MatchingName (
        /*[out,retval]*/ BSTR * MatchingName ) = 0;
      virtual HRESULT __stdcall put_MatchingName (
        /*[in]*/ BSTR MatchingName ) = 0;
      virtual HRESULT __stdcall get_Preserved (
        /*[out,retval]*/ enum Office::MsoTriState * Preserved ) = 0;
      virtual HRESULT __stdcall put_Preserved (
        /*[in]*/ enum Office::MsoTriState Preserved ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * Index ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct CustomLayout * * Duplicate ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ int toPos ) = 0;
      virtual HRESULT __stdcall get_DisplayMasterShapes (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall put_DisplayMasterShapes (
        /*[in]*/ enum Office::MsoTriState DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall get_FollowMasterBackground (
        /*[out,retval]*/ enum Office::MsoTriState * FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall put_FollowMasterBackground (
        /*[in]*/ enum Office::MsoTriState FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall get_ThemeColorScheme (
        /*[out,retval]*/ struct Office::ThemeColorScheme * * ThemeColorScheme ) = 0;
      virtual HRESULT __stdcall get_CustomerData (
        /*[out,retval]*/ struct CustomerData * * CustomerData ) = 0;
};

struct __declspec(uuid("914934f2-5a91-11cf-8700-00aa0060263b"))
CustomLayouts : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CustomLayoutPtr Item (
        const _variant_t & Index );
    CustomLayoutPtr Add (
        int Index );
    CustomLayoutPtr Paste (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CustomLayout * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct CustomLayout * * Add ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct CustomLayout * * Paste ) = 0;
};

struct __declspec(uuid("914934d8-5a91-11cf-8700-00aa0060263b"))
DiagramNode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChildren))
    DiagramNodeChildrenPtr Children;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetRoot))
    DiagramNodePtr Root;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetTextShape))
    ShapePtr TextShape;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    DiagramNodePtr AddNode (
        enum Office::MsoRelativeNodePosition Pos,
        enum Office::MsoDiagramNodeType NodeType );
    HRESULT Delete ( );
    HRESULT MoveNode (
        struct DiagramNode * TargetNode,
        enum Office::MsoRelativeNodePosition Pos );
    HRESULT ReplaceNode (
        struct DiagramNode * TargetNode );
    HRESULT SwapNode (
        struct DiagramNode * TargetNode,
        VARIANT_BOOL SwapChildren );
    DiagramNodePtr CloneNode (
        VARIANT_BOOL CopyChildren,
        struct DiagramNode * TargetNode,
        enum Office::MsoRelativeNodePosition Pos );
    HRESULT TransferChildren (
        struct DiagramNode * ReceivingNode );
    DiagramNodePtr NextNode ( );
    DiagramNodePtr PrevNode ( );
    IDispatchPtr GetParent ( );
    DiagramNodeChildrenPtr GetChildren ( );
    ShapePtr GetShape ( );
    DiagramNodePtr GetRoot ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoOrgChartLayoutType GetLayout ( );
    void PutLayout (
        enum Office::MsoOrgChartLayoutType Type );
    ShapePtr GetTextShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall raw_AddNode (
        /*[in]*/ enum Office::MsoRelativeNodePosition Pos,
        /*[in]*/ enum Office::MsoDiagramNodeType NodeType,
        /*[out,retval]*/ struct DiagramNode * * NewNode ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_MoveNode (
        /*[in]*/ struct DiagramNode * TargetNode,
        /*[in]*/ enum Office::MsoRelativeNodePosition Pos ) = 0;
      virtual HRESULT __stdcall raw_ReplaceNode (
        /*[in]*/ struct DiagramNode * TargetNode ) = 0;
      virtual HRESULT __stdcall raw_SwapNode (
        /*[in]*/ struct DiagramNode * TargetNode,
        /*[in]*/ VARIANT_BOOL SwapChildren ) = 0;
      virtual HRESULT __stdcall raw_CloneNode (
        /*[in]*/ VARIANT_BOOL CopyChildren,
        /*[in]*/ struct DiagramNode * TargetNode,
        /*[in]*/ enum Office::MsoRelativeNodePosition Pos,
        /*[out,retval]*/ struct DiagramNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_TransferChildren (
        /*[in]*/ struct DiagramNode * ReceivingNode ) = 0;
      virtual HRESULT __stdcall raw_NextNode (
        /*[out,retval]*/ struct DiagramNode * * NextNode ) = 0;
      virtual HRESULT __stdcall raw_PrevNode (
        /*[out,retval]*/ struct DiagramNode * * PrevNode ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct DiagramNodeChildren * * Children ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct DiagramNode * * Root ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct Diagram * * Diagram ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum Office::MsoOrgChartLayoutType * Type ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ enum Office::MsoOrgChartLayoutType Type ) = 0;
      virtual HRESULT __stdcall get_TextShape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
};

struct __declspec(uuid("914934d9-5a91-11cf-8700-00aa0060263b"))
DiagramNodeChildren : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetFirstChild))
    DiagramNodePtr FirstChild;
    __declspec(property(get=GetLastChild))
    DiagramNodePtr LastChild;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IUnknownPtr Get_NewEnum ( );
    DiagramNodePtr Item (
        const _variant_t & Index );
    DiagramNodePtr AddNode (
        const _variant_t & Index,
        enum Office::MsoDiagramNodeType NodeType );
    HRESULT SelectAll ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    DiagramNodePtr GetFirstChild ( );
    DiagramNodePtr GetLastChild ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DiagramNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_AddNode (
        /*[in]*/ VARIANT Index,
        /*[in]*/ enum Office::MsoDiagramNodeType NodeType,
        /*[out,retval]*/ struct DiagramNode * * NewNode ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * iDiagramNodes ) = 0;
      virtual HRESULT __stdcall get_FirstChild (
        /*[out,retval]*/ struct DiagramNode * * First ) = 0;
      virtual HRESULT __stdcall get_LastChild (
        /*[out,retval]*/ struct DiagramNode * * Last ) = 0;
};

struct __declspec(uuid("914934da-5a91-11cf-8700-00aa0060263b"))
DiagramNodes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IUnknownPtr Get_NewEnum ( );
    DiagramNodePtr Item (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DiagramNode * * ppdn ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * iDiagramNodes ) = 0;
};

struct __declspec(uuid("914934db-5a91-11cf-8700-00aa0060263b"))
Diagram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNodes))
    DiagramNodesPtr Nodes;
    __declspec(property(get=GetType))
    enum Office::MsoDiagramType Type;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    DiagramNodesPtr GetNodes ( );
    enum Office::MsoDiagramType GetType ( );
    enum Office::MsoTriState GetAutoLayout ( );
    void PutAutoLayout (
        enum Office::MsoTriState AutoLayout );
    enum Office::MsoTriState GetReverse ( );
    void PutReverse (
        enum Office::MsoTriState Reverse );
    enum Office::MsoTriState GetAutoFormat ( );
    void PutAutoFormat (
        enum Office::MsoTriState AutoFormat );
    HRESULT Convert (
        enum Office::MsoDiagramType Type );
    HRESULT FitText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct DiagramNodes * * Nodes ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoDiagramType * Type ) = 0;
      virtual HRESULT __stdcall get_AutoLayout (
        /*[out,retval]*/ enum Office::MsoTriState * AutoLayout ) = 0;
      virtual HRESULT __stdcall put_AutoLayout (
        /*[in]*/ enum Office::MsoTriState AutoLayout ) = 0;
      virtual HRESULT __stdcall get_Reverse (
        /*[out,retval]*/ enum Office::MsoTriState * Reverse ) = 0;
      virtual HRESULT __stdcall put_Reverse (
        /*[in]*/ enum Office::MsoTriState Reverse ) = 0;
      virtual HRESULT __stdcall get_AutoFormat (
        /*[out,retval]*/ enum Office::MsoTriState * AutoFormat ) = 0;
      virtual HRESULT __stdcall put_AutoFormat (
        /*[in]*/ enum Office::MsoTriState AutoFormat ) = 0;
      virtual HRESULT __stdcall raw_Convert (
        /*[in]*/ enum Office::MsoDiagramType Type ) = 0;
      virtual HRESULT __stdcall raw_FitText ( ) = 0;
};

//
// Wrapper method implementations
//

#include "msppt.tli"

} // namespace MSPpt

#pragma pack(pop)
