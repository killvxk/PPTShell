// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (de5828a5).
//
// e:\my project\ppttransition\debug\msppt.tli
//
// Wrapper implementations for Win32 type library C:\\Program Files\\Microsoft Office\\Office12\\MSPPT.OLB
// compiler-generated file created 11/22/11 at 18:23:18 - DO NOT EDIT!

#pragma once

//
// interface Collection wrapper method implementations
//

#pragma implementation_key(1)
inline IUnknownPtr MSPpt::Collection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2)
inline _variant_t MSPpt::Collection::_Index ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Index(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3)
inline long MSPpt::Collection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ColorFormat wrapper method implementations
//

#pragma implementation_key(4)
inline IDispatchPtr MSPpt::ColorFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5)
inline long MSPpt::ColorFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6)
inline IDispatchPtr MSPpt::ColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7)
inline Office::MsoRGBType MSPpt::ColorFormat::Get__RGB ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get___RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(8)
inline void MSPpt::ColorFormat::Put__RGB ( Office::MsoRGBType __RGB ) {
    HRESULT _hr = put___RGB(__RGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(9)
inline enum Office::MsoColorType MSPpt::ColorFormat::GetType ( ) {
    enum Office::MsoColorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(10)
inline enum MSPpt::PpColorSchemeIndex MSPpt::ColorFormat::GetSchemeColor ( ) {
    enum PpColorSchemeIndex _result;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(11)
inline void MSPpt::ColorFormat::PutSchemeColor ( enum PpColorSchemeIndex SchemeColor ) {
    HRESULT _hr = put_SchemeColor(SchemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(12)
inline float MSPpt::ColorFormat::GetTintAndShade ( ) {
    float _result = 0;
    HRESULT _hr = get_TintAndShade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(13)
inline void MSPpt::ColorFormat::PutTintAndShade ( float pValue ) {
    HRESULT _hr = put_TintAndShade(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(14)
inline enum Office::MsoThemeColorIndex MSPpt::ColorFormat::GetObjectThemeColor ( ) {
    enum Office::MsoThemeColorIndex _result;
    HRESULT _hr = get_ObjectThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(15)
inline void MSPpt::ColorFormat::PutObjectThemeColor ( enum Office::MsoThemeColorIndex ObjectThemeColor ) {
    HRESULT _hr = put_ObjectThemeColor(ObjectThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface NamedSlideShow wrapper method implementations
//

#pragma implementation_key(16)
inline MSPpt::_ApplicationPtr MSPpt::NamedSlideShow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(17)
inline IDispatchPtr MSPpt::NamedSlideShow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(18)
inline _bstr_t MSPpt::NamedSlideShow::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(19)
inline HRESULT MSPpt::NamedSlideShow::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(20)
inline _variant_t MSPpt::NamedSlideShow::GetSlideIDs ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SlideIDs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(21)
inline long MSPpt::NamedSlideShow::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface NamedSlideShows wrapper method implementations
//

#pragma implementation_key(22)
inline MSPpt::_ApplicationPtr MSPpt::NamedSlideShows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(23)
inline IDispatchPtr MSPpt::NamedSlideShows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(24)
inline MSPpt::NamedSlideShowPtr MSPpt::NamedSlideShows::Item ( const _variant_t & Index ) {
    struct NamedSlideShow * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamedSlideShowPtr(_result, false);
}

#pragma implementation_key(25)
inline MSPpt::NamedSlideShowPtr MSPpt::NamedSlideShows::Add ( _bstr_t Name, const _variant_t & safeArrayOfSlideIDs ) {
    struct NamedSlideShow * _result = 0;
    HRESULT _hr = raw_Add(Name, safeArrayOfSlideIDs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamedSlideShowPtr(_result, false);
}

//
// interface PrintRange wrapper method implementations
//

#pragma implementation_key(26)
inline MSPpt::_ApplicationPtr MSPpt::PrintRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(27)
inline IDispatchPtr MSPpt::PrintRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(28)
inline int MSPpt::PrintRange::GetStart ( ) {
    int _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(29)
inline int MSPpt::PrintRange::GetEnd ( ) {
    int _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(30)
inline HRESULT MSPpt::PrintRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PrintRanges wrapper method implementations
//

#pragma implementation_key(31)
inline MSPpt::PrintRangePtr MSPpt::PrintRanges::Add ( int Start, int End ) {
    struct PrintRange * _result = 0;
    HRESULT _hr = raw_Add(Start, End, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintRangePtr(_result, false);
}

#pragma implementation_key(32)
inline MSPpt::_ApplicationPtr MSPpt::PrintRanges::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(33)
inline HRESULT MSPpt::PrintRanges::ClearAll ( ) {
    HRESULT _hr = raw_ClearAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(34)
inline MSPpt::PrintRangePtr MSPpt::PrintRanges::Item ( int Index ) {
    struct PrintRange * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintRangePtr(_result, false);
}

#pragma implementation_key(35)
inline IDispatchPtr MSPpt::PrintRanges::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface PrintOptions wrapper method implementations
//

#pragma implementation_key(36)
inline MSPpt::_ApplicationPtr MSPpt::PrintOptions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(37)
inline enum MSPpt::PpPrintColorType MSPpt::PrintOptions::GetPrintColorType ( ) {
    enum PpPrintColorType _result;
    HRESULT _hr = get_PrintColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(38)
inline void MSPpt::PrintOptions::PutPrintColorType ( enum PpPrintColorType PrintColorType ) {
    HRESULT _hr = put_PrintColorType(PrintColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(39)
inline enum Office::MsoTriState MSPpt::PrintOptions::GetCollate ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Collate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(40)
inline void MSPpt::PrintOptions::PutCollate ( enum Office::MsoTriState Collate ) {
    HRESULT _hr = put_Collate(Collate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(41)
inline enum Office::MsoTriState MSPpt::PrintOptions::GetFitToPage ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FitToPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(42)
inline void MSPpt::PrintOptions::PutFitToPage ( enum Office::MsoTriState FitToPage ) {
    HRESULT _hr = put_FitToPage(FitToPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(43)
inline enum Office::MsoTriState MSPpt::PrintOptions::GetFrameSlides ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FrameSlides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(44)
inline void MSPpt::PrintOptions::PutFrameSlides ( enum Office::MsoTriState FrameSlides ) {
    HRESULT _hr = put_FrameSlides(FrameSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(45)
inline int MSPpt::PrintOptions::GetNumberOfCopies ( ) {
    int _result = 0;
    HRESULT _hr = get_NumberOfCopies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline void MSPpt::PrintOptions::PutNumberOfCopies ( int NumberOfCopies ) {
    HRESULT _hr = put_NumberOfCopies(NumberOfCopies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(47)
inline enum MSPpt::PpPrintOutputType MSPpt::PrintOptions::GetOutputType ( ) {
    enum PpPrintOutputType _result;
    HRESULT _hr = get_OutputType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(48)
inline void MSPpt::PrintOptions::PutOutputType ( enum PpPrintOutputType OutputType ) {
    HRESULT _hr = put_OutputType(OutputType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(49)
inline IDispatchPtr MSPpt::PrintOptions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(50)
inline enum Office::MsoTriState MSPpt::PrintOptions::GetPrintHiddenSlides ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PrintHiddenSlides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(51)
inline void MSPpt::PrintOptions::PutPrintHiddenSlides ( enum Office::MsoTriState PrintHiddenSlides ) {
    HRESULT _hr = put_PrintHiddenSlides(PrintHiddenSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(52)
inline enum Office::MsoTriState MSPpt::PrintOptions::GetPrintInBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PrintInBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(53)
inline void MSPpt::PrintOptions::PutPrintInBackground ( enum Office::MsoTriState PrintInBackground ) {
    HRESULT _hr = put_PrintInBackground(PrintInBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(54)
inline enum MSPpt::PpPrintRangeType MSPpt::PrintOptions::GetRangeType ( ) {
    enum PpPrintRangeType _result;
    HRESULT _hr = get_RangeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(55)
inline void MSPpt::PrintOptions::PutRangeType ( enum PpPrintRangeType RangeType ) {
    HRESULT _hr = put_RangeType(RangeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(56)
inline MSPpt::PrintRangesPtr MSPpt::PrintOptions::GetRanges ( ) {
    struct PrintRanges * _result = 0;
    HRESULT _hr = get_Ranges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintRangesPtr(_result, false);
}

#pragma implementation_key(57)
inline enum Office::MsoTriState MSPpt::PrintOptions::GetPrintFontsAsGraphics ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PrintFontsAsGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(58)
inline void MSPpt::PrintOptions::PutPrintFontsAsGraphics ( enum Office::MsoTriState PrintFontsAsGraphics ) {
    HRESULT _hr = put_PrintFontsAsGraphics(PrintFontsAsGraphics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(59)
inline _bstr_t MSPpt::PrintOptions::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(60)
inline void MSPpt::PrintOptions::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(61)
inline _bstr_t MSPpt::PrintOptions::GetActivePrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(62)
inline void MSPpt::PrintOptions::PutActivePrinter ( _bstr_t ActivePrinter ) {
    HRESULT _hr = put_ActivePrinter(ActivePrinter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(63)
inline enum MSPpt::PpPrintHandoutOrder MSPpt::PrintOptions::GetHandoutOrder ( ) {
    enum PpPrintHandoutOrder _result;
    HRESULT _hr = get_HandoutOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(64)
inline void MSPpt::PrintOptions::PutHandoutOrder ( enum PpPrintHandoutOrder HandoutOrder ) {
    HRESULT _hr = put_HandoutOrder(HandoutOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(65)
inline enum Office::MsoTriState MSPpt::PrintOptions::GetPrintComments ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PrintComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(66)
inline void MSPpt::PrintOptions::PutPrintComments ( enum Office::MsoTriState PrintComments ) {
    HRESULT _hr = put_PrintComments(PrintComments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AddIn wrapper method implementations
//

#pragma implementation_key(67)
inline MSPpt::_ApplicationPtr MSPpt::AddIn::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(68)
inline IDispatchPtr MSPpt::AddIn::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(69)
inline _bstr_t MSPpt::AddIn::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(70)
inline _bstr_t MSPpt::AddIn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(71)
inline _bstr_t MSPpt::AddIn::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(72)
inline enum Office::MsoTriState MSPpt::AddIn::GetRegistered ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Registered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(73)
inline void MSPpt::AddIn::PutRegistered ( enum Office::MsoTriState Registered ) {
    HRESULT _hr = put_Registered(Registered);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(74)
inline enum Office::MsoTriState MSPpt::AddIn::GetAutoLoad ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLoad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(75)
inline void MSPpt::AddIn::PutAutoLoad ( enum Office::MsoTriState AutoLoad ) {
    HRESULT _hr = put_AutoLoad(AutoLoad);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(76)
inline enum Office::MsoTriState MSPpt::AddIn::GetLoaded ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Loaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(77)
inline void MSPpt::AddIn::PutLoaded ( enum Office::MsoTriState Loaded ) {
    HRESULT _hr = put_Loaded(Loaded);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(78)
inline enum Office::MsoTriState MSPpt::AddIn::GetDisplayAlerts ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(79)
inline void MSPpt::AddIn::PutDisplayAlerts ( enum Office::MsoTriState DisplayAlerts ) {
    HRESULT _hr = put_DisplayAlerts(DisplayAlerts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(80)
inline enum Office::MsoTriState MSPpt::AddIn::GetRegisteredInHKLM ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RegisteredInHKLM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface AddIns wrapper method implementations
//

#pragma implementation_key(81)
inline MSPpt::_ApplicationPtr MSPpt::AddIns::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(82)
inline IDispatchPtr MSPpt::AddIns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(83)
inline MSPpt::AddInPtr MSPpt::AddIns::Item ( VARIANT * Index ) {
    struct AddIn * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

#pragma implementation_key(84)
inline MSPpt::AddInPtr MSPpt::AddIns::Add ( _bstr_t FileName ) {
    struct AddIn * _result = 0;
    HRESULT _hr = raw_Add(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

#pragma implementation_key(85)
inline HRESULT MSPpt::AddIns::Remove ( VARIANT * Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Presentations wrapper method implementations
//

#pragma implementation_key(86)
inline MSPpt::_ApplicationPtr MSPpt::Presentations::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(87)
inline IDispatchPtr MSPpt::Presentations::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(88)
inline MSPpt::_PresentationPtr MSPpt::Presentations::Item ( const _variant_t & Index ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(89)
inline MSPpt::_PresentationPtr MSPpt::Presentations::Add ( enum Office::MsoTriState WithWindow ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Add(WithWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(90)
inline MSPpt::_PresentationPtr MSPpt::Presentations::OpenOld ( _bstr_t FileName, enum Office::MsoTriState ReadOnly, enum Office::MsoTriState Untitled, enum Office::MsoTriState WithWindow ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_OpenOld(FileName, ReadOnly, Untitled, WithWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(91)
inline MSPpt::_PresentationPtr MSPpt::Presentations::Open ( _bstr_t FileName, enum Office::MsoTriState ReadOnly, enum Office::MsoTriState Untitled, enum Office::MsoTriState WithWindow ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Open(FileName, ReadOnly, Untitled, WithWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(92)
inline HRESULT MSPpt::Presentations::CheckOut ( _bstr_t FileName ) {
    HRESULT _hr = raw_CheckOut(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(93)
inline VARIANT_BOOL MSPpt::Presentations::CanCheckOut ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanCheckOut(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(94)
inline MSPpt::_PresentationPtr MSPpt::Presentations::Open2007 ( _bstr_t FileName, enum Office::MsoTriState ReadOnly, enum Office::MsoTriState Untitled, enum Office::MsoTriState WithWindow, enum Office::MsoTriState OpenAndRepair ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Open2007(FileName, ReadOnly, Untitled, WithWindow, OpenAndRepair, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

//
// interface Hyperlink wrapper method implementations
//

#pragma implementation_key(95)
inline MSPpt::_ApplicationPtr MSPpt::Hyperlink::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(96)
inline IDispatchPtr MSPpt::Hyperlink::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(97)
inline enum Office::MsoHyperlinkType MSPpt::Hyperlink::GetType ( ) {
    enum Office::MsoHyperlinkType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(98)
inline _bstr_t MSPpt::Hyperlink::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(99)
inline void MSPpt::Hyperlink::PutAddress ( _bstr_t Address ) {
    HRESULT _hr = put_Address(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(100)
inline _bstr_t MSPpt::Hyperlink::GetSubAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(101)
inline void MSPpt::Hyperlink::PutSubAddress ( _bstr_t SubAddress ) {
    HRESULT _hr = put_SubAddress(SubAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(102)
inline HRESULT MSPpt::Hyperlink::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(103)
inline _bstr_t MSPpt::Hyperlink::GetEmailSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EmailSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(104)
inline void MSPpt::Hyperlink::PutEmailSubject ( _bstr_t EmailSubject ) {
    HRESULT _hr = put_EmailSubject(EmailSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(105)
inline _bstr_t MSPpt::Hyperlink::GetScreenTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScreenTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(106)
inline void MSPpt::Hyperlink::PutScreenTip ( _bstr_t ScreenTip ) {
    HRESULT _hr = put_ScreenTip(ScreenTip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(107)
inline _bstr_t MSPpt::Hyperlink::GetTextToDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextToDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(108)
inline void MSPpt::Hyperlink::PutTextToDisplay ( _bstr_t TextToDisplay ) {
    HRESULT _hr = put_TextToDisplay(TextToDisplay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(109)
inline enum Office::MsoTriState MSPpt::Hyperlink::GetShowAndReturn ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowAndReturn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(110)
inline void MSPpt::Hyperlink::PutShowAndReturn ( enum Office::MsoTriState ShowAndReturn ) {
    HRESULT _hr = put_ShowAndReturn(ShowAndReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(111)
inline HRESULT MSPpt::Hyperlink::Follow ( ) {
    HRESULT _hr = raw_Follow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(112)
inline HRESULT MSPpt::Hyperlink::CreateNewDocument ( _bstr_t FileName, enum Office::MsoTriState EditNow, enum Office::MsoTriState Overwrite ) {
    HRESULT _hr = raw_CreateNewDocument(FileName, EditNow, Overwrite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(113)
inline HRESULT MSPpt::Hyperlink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Hyperlinks wrapper method implementations
//

#pragma implementation_key(114)
inline MSPpt::_ApplicationPtr MSPpt::Hyperlinks::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(115)
inline IDispatchPtr MSPpt::Hyperlinks::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(116)
inline MSPpt::HyperlinkPtr MSPpt::Hyperlinks::Item ( int Index ) {
    struct Hyperlink * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

//
// interface PageSetup wrapper method implementations
//

#pragma implementation_key(117)
inline MSPpt::_ApplicationPtr MSPpt::PageSetup::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(118)
inline IDispatchPtr MSPpt::PageSetup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(119)
inline int MSPpt::PageSetup::GetFirstSlideNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_FirstSlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(120)
inline void MSPpt::PageSetup::PutFirstSlideNumber ( int FirstSlideNumber ) {
    HRESULT _hr = put_FirstSlideNumber(FirstSlideNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(121)
inline float MSPpt::PageSetup::GetSlideHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_SlideHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(122)
inline void MSPpt::PageSetup::PutSlideHeight ( float SlideHeight ) {
    HRESULT _hr = put_SlideHeight(SlideHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(123)
inline float MSPpt::PageSetup::GetSlideWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_SlideWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(124)
inline void MSPpt::PageSetup::PutSlideWidth ( float SlideWidth ) {
    HRESULT _hr = put_SlideWidth(SlideWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(125)
inline enum MSPpt::PpSlideSizeType MSPpt::PageSetup::GetSlideSize ( ) {
    enum PpSlideSizeType _result;
    HRESULT _hr = get_SlideSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(126)
inline void MSPpt::PageSetup::PutSlideSize ( enum PpSlideSizeType SlideSize ) {
    HRESULT _hr = put_SlideSize(SlideSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(127)
inline enum Office::MsoOrientation MSPpt::PageSetup::GetNotesOrientation ( ) {
    enum Office::MsoOrientation _result;
    HRESULT _hr = get_NotesOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(128)
inline void MSPpt::PageSetup::PutNotesOrientation ( enum Office::MsoOrientation NotesOrientation ) {
    HRESULT _hr = put_NotesOrientation(NotesOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(129)
inline enum Office::MsoOrientation MSPpt::PageSetup::GetSlideOrientation ( ) {
    enum Office::MsoOrientation _result;
    HRESULT _hr = get_SlideOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(130)
inline void MSPpt::PageSetup::PutSlideOrientation ( enum Office::MsoOrientation SlideOrientation ) {
    HRESULT _hr = put_SlideOrientation(SlideOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ExtraColors wrapper method implementations
//

#pragma implementation_key(131)
inline MSPpt::_ApplicationPtr MSPpt::ExtraColors::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(132)
inline IDispatchPtr MSPpt::ExtraColors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(133)
inline Office::MsoRGBType MSPpt::ExtraColors::Item ( int Index ) {
    Office::MsoRGBType _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(134)
inline HRESULT MSPpt::ExtraColors::Add ( Office::MsoRGBType Type ) {
    HRESULT _hr = raw_Add(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(135)
inline HRESULT MSPpt::ExtraColors::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface RGBColor wrapper method implementations
//

#pragma implementation_key(136)
inline MSPpt::_ApplicationPtr MSPpt::RGBColor::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(137)
inline IDispatchPtr MSPpt::RGBColor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(138)
inline Office::MsoRGBType MSPpt::RGBColor::Get__RGB ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get___RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(139)
inline void MSPpt::RGBColor::Put__RGB ( Office::MsoRGBType __RGB ) {
    HRESULT _hr = put___RGB(__RGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorScheme wrapper method implementations
//

#pragma implementation_key(140)
inline MSPpt::_ApplicationPtr MSPpt::ColorScheme::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(141)
inline IDispatchPtr MSPpt::ColorScheme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(142)
inline MSPpt::RGBColorPtr MSPpt::ColorScheme::Colors ( enum PpColorSchemeIndex SchemeColor ) {
    struct RGBColor * _result = 0;
    HRESULT _hr = raw_Colors(SchemeColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RGBColorPtr(_result, false);
}

#pragma implementation_key(143)
inline HRESULT MSPpt::ColorScheme::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ColorSchemes wrapper method implementations
//

#pragma implementation_key(144)
inline MSPpt::_ApplicationPtr MSPpt::ColorSchemes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(145)
inline IDispatchPtr MSPpt::ColorSchemes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(146)
inline MSPpt::ColorSchemePtr MSPpt::ColorSchemes::Item ( int Index ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(147)
inline MSPpt::ColorSchemePtr MSPpt::ColorSchemes::Add ( struct ColorScheme * Scheme ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = raw_Add(Scheme, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

//
// interface SoundEffect wrapper method implementations
//

#pragma implementation_key(148)
inline MSPpt::_ApplicationPtr MSPpt::SoundEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(149)
inline IDispatchPtr MSPpt::SoundEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(150)
inline _bstr_t MSPpt::SoundEffect::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(151)
inline void MSPpt::SoundEffect::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(152)
inline enum MSPpt::PpSoundEffectType MSPpt::SoundEffect::GetType ( ) {
    enum PpSoundEffectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(153)
inline void MSPpt::SoundEffect::PutType ( enum PpSoundEffectType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(154)
inline HRESULT MSPpt::SoundEffect::ImportFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_ImportFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(155)
inline HRESULT MSPpt::SoundEffect::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SlideShowTransition wrapper method implementations
//

#pragma implementation_key(156)
inline MSPpt::_ApplicationPtr MSPpt::SlideShowTransition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(157)
inline IDispatchPtr MSPpt::SlideShowTransition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(158)
inline enum Office::MsoTriState MSPpt::SlideShowTransition::GetAdvanceOnClick ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AdvanceOnClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(159)
inline void MSPpt::SlideShowTransition::PutAdvanceOnClick ( enum Office::MsoTriState AdvanceOnClick ) {
    HRESULT _hr = put_AdvanceOnClick(AdvanceOnClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(160)
inline enum Office::MsoTriState MSPpt::SlideShowTransition::GetAdvanceOnTime ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AdvanceOnTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(161)
inline void MSPpt::SlideShowTransition::PutAdvanceOnTime ( enum Office::MsoTriState AdvanceOnTime ) {
    HRESULT _hr = put_AdvanceOnTime(AdvanceOnTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(162)
inline float MSPpt::SlideShowTransition::GetAdvanceTime ( ) {
    float _result = 0;
    HRESULT _hr = get_AdvanceTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline void MSPpt::SlideShowTransition::PutAdvanceTime ( float AdvanceTime ) {
    HRESULT _hr = put_AdvanceTime(AdvanceTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(164)
inline enum MSPpt::PpEntryEffect MSPpt::SlideShowTransition::GetEntryEffect ( ) {
    enum PpEntryEffect _result;
    HRESULT _hr = get_EntryEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline void MSPpt::SlideShowTransition::PutEntryEffect ( enum PpEntryEffect EntryEffect ) {
    HRESULT _hr = put_EntryEffect(EntryEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline enum Office::MsoTriState MSPpt::SlideShowTransition::GetHidden ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline void MSPpt::SlideShowTransition::PutHidden ( enum Office::MsoTriState Hidden ) {
    HRESULT _hr = put_Hidden(Hidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(168)
inline enum Office::MsoTriState MSPpt::SlideShowTransition::GetLoopSoundUntilNext ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LoopSoundUntilNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(169)
inline void MSPpt::SlideShowTransition::PutLoopSoundUntilNext ( enum Office::MsoTriState LoopSoundUntilNext ) {
    HRESULT _hr = put_LoopSoundUntilNext(LoopSoundUntilNext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(170)
inline MSPpt::SoundEffectPtr MSPpt::SlideShowTransition::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(171)
inline enum MSPpt::PpTransitionSpeed MSPpt::SlideShowTransition::GetSpeed ( ) {
    enum PpTransitionSpeed _result;
    HRESULT _hr = get_Speed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(172)
inline void MSPpt::SlideShowTransition::PutSpeed ( enum PpTransitionSpeed Speed ) {
    HRESULT _hr = put_Speed(Speed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SoundFormat wrapper method implementations
//

#pragma implementation_key(173)
inline HRESULT MSPpt::SoundFormat::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(174)
inline HRESULT MSPpt::SoundFormat::Import ( _bstr_t FileName ) {
    HRESULT _hr = raw_Import(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(175)
inline enum MSPpt::PpSoundFormatType MSPpt::SoundFormat::Export ( _bstr_t FileName ) {
    enum PpSoundFormatType _result;
    HRESULT _hr = raw_Export(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(176)
inline enum MSPpt::PpSoundFormatType MSPpt::SoundFormat::GetType ( ) {
    enum PpSoundFormatType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(177)
inline _bstr_t MSPpt::SoundFormat::GetSourceFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceFullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface PlaceholderFormat wrapper method implementations
//

#pragma implementation_key(178)
inline MSPpt::_ApplicationPtr MSPpt::PlaceholderFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(179)
inline IDispatchPtr MSPpt::PlaceholderFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(180)
inline enum MSPpt::PpPlaceholderType MSPpt::PlaceholderFormat::GetType ( ) {
    enum PpPlaceholderType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(181)
inline _bstr_t MSPpt::PlaceholderFormat::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(182)
inline void MSPpt::PlaceholderFormat::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(183)
inline enum Office::MsoShapeType MSPpt::PlaceholderFormat::GetContainedType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_ContainedType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Adjustments wrapper method implementations
//

#pragma implementation_key(184)
inline IDispatchPtr MSPpt::Adjustments::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(185)
inline long MSPpt::Adjustments::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(186)
inline IDispatchPtr MSPpt::Adjustments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(187)
inline int MSPpt::Adjustments::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(188)
inline float MSPpt::Adjustments::GetItem ( int Index ) {
    float _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(189)
inline void MSPpt::Adjustments::PutItem ( int Index, float Val ) {
    HRESULT _hr = put_Item(Index, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PictureFormat wrapper method implementations
//

#pragma implementation_key(190)
inline IDispatchPtr MSPpt::PictureFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(191)
inline long MSPpt::PictureFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(192)
inline IDispatchPtr MSPpt::PictureFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(193)
inline HRESULT MSPpt::PictureFormat::IncrementBrightness ( float Increment ) {
    HRESULT _hr = raw_IncrementBrightness(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(194)
inline HRESULT MSPpt::PictureFormat::IncrementContrast ( float Increment ) {
    HRESULT _hr = raw_IncrementContrast(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(195)
inline float MSPpt::PictureFormat::GetBrightness ( ) {
    float _result = 0;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(196)
inline void MSPpt::PictureFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(197)
inline enum Office::MsoPictureColorType MSPpt::PictureFormat::GetColorType ( ) {
    enum Office::MsoPictureColorType _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(198)
inline void MSPpt::PictureFormat::PutColorType ( enum Office::MsoPictureColorType ColorType ) {
    HRESULT _hr = put_ColorType(ColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(199)
inline float MSPpt::PictureFormat::GetContrast ( ) {
    float _result = 0;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(200)
inline void MSPpt::PictureFormat::PutContrast ( float Contrast ) {
    HRESULT _hr = put_Contrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(201)
inline float MSPpt::PictureFormat::GetCropBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_CropBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(202)
inline void MSPpt::PictureFormat::PutCropBottom ( float CropBottom ) {
    HRESULT _hr = put_CropBottom(CropBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(203)
inline float MSPpt::PictureFormat::GetCropLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_CropLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(204)
inline void MSPpt::PictureFormat::PutCropLeft ( float CropLeft ) {
    HRESULT _hr = put_CropLeft(CropLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(205)
inline float MSPpt::PictureFormat::GetCropRight ( ) {
    float _result = 0;
    HRESULT _hr = get_CropRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(206)
inline void MSPpt::PictureFormat::PutCropRight ( float CropRight ) {
    HRESULT _hr = put_CropRight(CropRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(207)
inline float MSPpt::PictureFormat::GetCropTop ( ) {
    float _result = 0;
    HRESULT _hr = get_CropTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(208)
inline void MSPpt::PictureFormat::PutCropTop ( float CropTop ) {
    HRESULT _hr = put_CropTop(CropTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(209)
inline Office::MsoRGBType MSPpt::PictureFormat::GetTransparencyColor ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_TransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(210)
inline void MSPpt::PictureFormat::PutTransparencyColor ( Office::MsoRGBType TransparencyColor ) {
    HRESULT _hr = put_TransparencyColor(TransparencyColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(211)
inline enum Office::MsoTriState MSPpt::PictureFormat::GetTransparentBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_TransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(212)
inline void MSPpt::PictureFormat::PutTransparentBackground ( enum Office::MsoTriState TransparentBackground ) {
    HRESULT _hr = put_TransparentBackground(TransparentBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FillFormat wrapper method implementations
//

#pragma implementation_key(213)
inline IDispatchPtr MSPpt::FillFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(214)
inline long MSPpt::FillFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(215)
inline IDispatchPtr MSPpt::FillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(216)
inline HRESULT MSPpt::FillFormat::Background ( ) {
    HRESULT _hr = raw_Background();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(217)
inline HRESULT MSPpt::FillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, int Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(218)
inline HRESULT MSPpt::FillFormat::Patterned ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(219)
inline HRESULT MSPpt::FillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, int Variant, enum Office::MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(220)
inline HRESULT MSPpt::FillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(221)
inline HRESULT MSPpt::FillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(222)
inline HRESULT MSPpt::FillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, int Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(223)
inline HRESULT MSPpt::FillFormat::UserPicture ( _bstr_t PictureFile ) {
    HRESULT _hr = raw_UserPicture(PictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(224)
inline HRESULT MSPpt::FillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(225)
inline MSPpt::ColorFormatPtr MSPpt::FillFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(226)
inline void MSPpt::FillFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(227)
inline MSPpt::ColorFormatPtr MSPpt::FillFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(228)
inline void MSPpt::FillFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(229)
inline enum Office::MsoGradientColorType MSPpt::FillFormat::GetGradientColorType ( ) {
    enum Office::MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(230)
inline float MSPpt::FillFormat::GetGradientDegree ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(231)
inline enum Office::MsoGradientStyle MSPpt::FillFormat::GetGradientStyle ( ) {
    enum Office::MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(232)
inline int MSPpt::FillFormat::GetGradientVariant ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(233)
inline enum Office::MsoPatternType MSPpt::FillFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(234)
inline enum Office::MsoPresetGradientType MSPpt::FillFormat::GetPresetGradientType ( ) {
    enum Office::MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(235)
inline enum Office::MsoPresetTexture MSPpt::FillFormat::GetPresetTexture ( ) {
    enum Office::MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(236)
inline _bstr_t MSPpt::FillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(237)
inline enum Office::MsoTextureType MSPpt::FillFormat::GetTextureType ( ) {
    enum Office::MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(238)
inline float MSPpt::FillFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(239)
inline void MSPpt::FillFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(240)
inline enum Office::MsoFillType MSPpt::FillFormat::GetType ( ) {
    enum Office::MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(241)
inline enum Office::MsoTriState MSPpt::FillFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(242)
inline void MSPpt::FillFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(243)
inline Office::GradientStopsPtr MSPpt::FillFormat::GetGradientStops ( ) {
    struct Office::GradientStops * _result = 0;
    HRESULT _hr = get_GradientStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::GradientStopsPtr(_result, false);
}

#pragma implementation_key(244)
inline float MSPpt::FillFormat::GetTextureOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureOffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(245)
inline void MSPpt::FillFormat::PutTextureOffsetX ( float TextureOffsetX ) {
    HRESULT _hr = put_TextureOffsetX(TextureOffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(246)
inline float MSPpt::FillFormat::GetTextureOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureOffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(247)
inline void MSPpt::FillFormat::PutTextureOffsetY ( float TextureOffsetY ) {
    HRESULT _hr = put_TextureOffsetY(TextureOffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(248)
inline enum Office::MsoTextureAlignment MSPpt::FillFormat::GetTextureAlignment ( ) {
    enum Office::MsoTextureAlignment _result;
    HRESULT _hr = get_TextureAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(249)
inline void MSPpt::FillFormat::PutTextureAlignment ( enum Office::MsoTextureAlignment TextureAlignment ) {
    HRESULT _hr = put_TextureAlignment(TextureAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(250)
inline float MSPpt::FillFormat::GetTextureHorizontalScale ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureHorizontalScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(251)
inline void MSPpt::FillFormat::PutTextureHorizontalScale ( float HorizontalScale ) {
    HRESULT _hr = put_TextureHorizontalScale(HorizontalScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(252)
inline float MSPpt::FillFormat::GetTextureVerticalScale ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureVerticalScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline void MSPpt::FillFormat::PutTextureVerticalScale ( float VerticalScale ) {
    HRESULT _hr = put_TextureVerticalScale(VerticalScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(254)
inline enum Office::MsoTriState MSPpt::FillFormat::GetTextureTile ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_TextureTile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline void MSPpt::FillFormat::PutTextureTile ( enum Office::MsoTriState TextureTile ) {
    HRESULT _hr = put_TextureTile(TextureTile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline enum Office::MsoTriState MSPpt::FillFormat::GetRotateWithObject ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RotateWithObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline void MSPpt::FillFormat::PutRotateWithObject ( enum Office::MsoTriState RotateWithObject ) {
    HRESULT _hr = put_RotateWithObject(RotateWithObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LineFormat wrapper method implementations
//

#pragma implementation_key(258)
inline IDispatchPtr MSPpt::LineFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(259)
inline long MSPpt::LineFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(260)
inline IDispatchPtr MSPpt::LineFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(261)
inline MSPpt::ColorFormatPtr MSPpt::LineFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(262)
inline void MSPpt::LineFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(263)
inline enum Office::MsoArrowheadLength MSPpt::LineFormat::GetBeginArrowheadLength ( ) {
    enum Office::MsoArrowheadLength _result;
    HRESULT _hr = get_BeginArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(264)
inline void MSPpt::LineFormat::PutBeginArrowheadLength ( enum Office::MsoArrowheadLength BeginArrowheadLength ) {
    HRESULT _hr = put_BeginArrowheadLength(BeginArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(265)
inline enum Office::MsoArrowheadStyle MSPpt::LineFormat::GetBeginArrowheadStyle ( ) {
    enum Office::MsoArrowheadStyle _result;
    HRESULT _hr = get_BeginArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(266)
inline void MSPpt::LineFormat::PutBeginArrowheadStyle ( enum Office::MsoArrowheadStyle BeginArrowheadStyle ) {
    HRESULT _hr = put_BeginArrowheadStyle(BeginArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(267)
inline enum Office::MsoArrowheadWidth MSPpt::LineFormat::GetBeginArrowheadWidth ( ) {
    enum Office::MsoArrowheadWidth _result;
    HRESULT _hr = get_BeginArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(268)
inline void MSPpt::LineFormat::PutBeginArrowheadWidth ( enum Office::MsoArrowheadWidth BeginArrowheadWidth ) {
    HRESULT _hr = put_BeginArrowheadWidth(BeginArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(269)
inline enum Office::MsoLineDashStyle MSPpt::LineFormat::GetDashStyle ( ) {
    enum Office::MsoLineDashStyle _result;
    HRESULT _hr = get_DashStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(270)
inline void MSPpt::LineFormat::PutDashStyle ( enum Office::MsoLineDashStyle DashStyle ) {
    HRESULT _hr = put_DashStyle(DashStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(271)
inline enum Office::MsoArrowheadLength MSPpt::LineFormat::GetEndArrowheadLength ( ) {
    enum Office::MsoArrowheadLength _result;
    HRESULT _hr = get_EndArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(272)
inline void MSPpt::LineFormat::PutEndArrowheadLength ( enum Office::MsoArrowheadLength EndArrowheadLength ) {
    HRESULT _hr = put_EndArrowheadLength(EndArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(273)
inline enum Office::MsoArrowheadStyle MSPpt::LineFormat::GetEndArrowheadStyle ( ) {
    enum Office::MsoArrowheadStyle _result;
    HRESULT _hr = get_EndArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(274)
inline void MSPpt::LineFormat::PutEndArrowheadStyle ( enum Office::MsoArrowheadStyle EndArrowheadStyle ) {
    HRESULT _hr = put_EndArrowheadStyle(EndArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(275)
inline enum Office::MsoArrowheadWidth MSPpt::LineFormat::GetEndArrowheadWidth ( ) {
    enum Office::MsoArrowheadWidth _result;
    HRESULT _hr = get_EndArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(276)
inline void MSPpt::LineFormat::PutEndArrowheadWidth ( enum Office::MsoArrowheadWidth EndArrowheadWidth ) {
    HRESULT _hr = put_EndArrowheadWidth(EndArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(277)
inline MSPpt::ColorFormatPtr MSPpt::LineFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(278)
inline void MSPpt::LineFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(279)
inline enum Office::MsoPatternType MSPpt::LineFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(280)
inline void MSPpt::LineFormat::PutPattern ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = put_Pattern(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(281)
inline enum Office::MsoLineStyle MSPpt::LineFormat::GetStyle ( ) {
    enum Office::MsoLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(282)
inline void MSPpt::LineFormat::PutStyle ( enum Office::MsoLineStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(283)
inline float MSPpt::LineFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(284)
inline void MSPpt::LineFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(285)
inline enum Office::MsoTriState MSPpt::LineFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(286)
inline void MSPpt::LineFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(287)
inline float MSPpt::LineFormat::GetWeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(288)
inline void MSPpt::LineFormat::PutWeight ( float Weight ) {
    HRESULT _hr = put_Weight(Weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(289)
inline enum Office::MsoTriState MSPpt::LineFormat::GetInsetPen ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_InsetPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(290)
inline void MSPpt::LineFormat::PutInsetPen ( enum Office::MsoTriState InsetPen ) {
    HRESULT _hr = put_InsetPen(InsetPen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShadowFormat wrapper method implementations
//

#pragma implementation_key(291)
inline IDispatchPtr MSPpt::ShadowFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(292)
inline long MSPpt::ShadowFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(293)
inline IDispatchPtr MSPpt::ShadowFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(294)
inline HRESULT MSPpt::ShadowFormat::IncrementOffsetX ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(295)
inline HRESULT MSPpt::ShadowFormat::IncrementOffsetY ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(296)
inline MSPpt::ColorFormatPtr MSPpt::ShadowFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(297)
inline void MSPpt::ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(298)
inline enum Office::MsoTriState MSPpt::ShadowFormat::GetObscured ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Obscured(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(299)
inline void MSPpt::ShadowFormat::PutObscured ( enum Office::MsoTriState Obscured ) {
    HRESULT _hr = put_Obscured(Obscured);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(300)
inline float MSPpt::ShadowFormat::GetOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(301)
inline void MSPpt::ShadowFormat::PutOffsetX ( float OffsetX ) {
    HRESULT _hr = put_OffsetX(OffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(302)
inline float MSPpt::ShadowFormat::GetOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(303)
inline void MSPpt::ShadowFormat::PutOffsetY ( float OffsetY ) {
    HRESULT _hr = put_OffsetY(OffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(304)
inline float MSPpt::ShadowFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(305)
inline void MSPpt::ShadowFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(306)
inline enum Office::MsoShadowType MSPpt::ShadowFormat::GetType ( ) {
    enum Office::MsoShadowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(307)
inline void MSPpt::ShadowFormat::PutType ( enum Office::MsoShadowType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(308)
inline enum Office::MsoTriState MSPpt::ShadowFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(309)
inline void MSPpt::ShadowFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(310)
inline enum Office::MsoShadowStyle MSPpt::ShadowFormat::GetStyle ( ) {
    enum Office::MsoShadowStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(311)
inline void MSPpt::ShadowFormat::PutStyle ( enum Office::MsoShadowStyle ShadowStyle ) {
    HRESULT _hr = put_Style(ShadowStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(312)
inline float MSPpt::ShadowFormat::GetBlur ( ) {
    float _result = 0;
    HRESULT _hr = get_Blur(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(313)
inline void MSPpt::ShadowFormat::PutBlur ( float Blur ) {
    HRESULT _hr = put_Blur(Blur);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(314)
inline float MSPpt::ShadowFormat::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(315)
inline void MSPpt::ShadowFormat::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(316)
inline enum Office::MsoTriState MSPpt::ShadowFormat::GetRotateWithShape ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RotateWithShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(317)
inline void MSPpt::ShadowFormat::PutRotateWithShape ( enum Office::MsoTriState RotateWithShape ) {
    HRESULT _hr = put_RotateWithShape(RotateWithShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextEffectFormat wrapper method implementations
//

#pragma implementation_key(318)
inline IDispatchPtr MSPpt::TextEffectFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(319)
inline long MSPpt::TextEffectFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(320)
inline IDispatchPtr MSPpt::TextEffectFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(321)
inline HRESULT MSPpt::TextEffectFormat::ToggleVerticalText ( ) {
    HRESULT _hr = raw_ToggleVerticalText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(322)
inline enum Office::MsoTextEffectAlignment MSPpt::TextEffectFormat::GetAlignment ( ) {
    enum Office::MsoTextEffectAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(323)
inline void MSPpt::TextEffectFormat::PutAlignment ( enum Office::MsoTextEffectAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(324)
inline enum Office::MsoTriState MSPpt::TextEffectFormat::GetFontBold ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(325)
inline void MSPpt::TextEffectFormat::PutFontBold ( enum Office::MsoTriState FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(326)
inline enum Office::MsoTriState MSPpt::TextEffectFormat::GetFontItalic ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(327)
inline void MSPpt::TextEffectFormat::PutFontItalic ( enum Office::MsoTriState FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(328)
inline _bstr_t MSPpt::TextEffectFormat::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(329)
inline void MSPpt::TextEffectFormat::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(330)
inline float MSPpt::TextEffectFormat::GetFontSize ( ) {
    float _result = 0;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(331)
inline void MSPpt::TextEffectFormat::PutFontSize ( float FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(332)
inline enum Office::MsoTriState MSPpt::TextEffectFormat::GetKernedPairs ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_KernedPairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(333)
inline void MSPpt::TextEffectFormat::PutKernedPairs ( enum Office::MsoTriState KernedPairs ) {
    HRESULT _hr = put_KernedPairs(KernedPairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(334)
inline enum Office::MsoTriState MSPpt::TextEffectFormat::GetNormalizedHeight ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_NormalizedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(335)
inline void MSPpt::TextEffectFormat::PutNormalizedHeight ( enum Office::MsoTriState NormalizedHeight ) {
    HRESULT _hr = put_NormalizedHeight(NormalizedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(336)
inline enum Office::MsoPresetTextEffectShape MSPpt::TextEffectFormat::GetPresetShape ( ) {
    enum Office::MsoPresetTextEffectShape _result;
    HRESULT _hr = get_PresetShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline void MSPpt::TextEffectFormat::PutPresetShape ( enum Office::MsoPresetTextEffectShape PresetShape ) {
    HRESULT _hr = put_PresetShape(PresetShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(338)
inline enum Office::MsoPresetTextEffect MSPpt::TextEffectFormat::GetPresetTextEffect ( ) {
    enum Office::MsoPresetTextEffect _result;
    HRESULT _hr = get_PresetTextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(339)
inline void MSPpt::TextEffectFormat::PutPresetTextEffect ( enum Office::MsoPresetTextEffect Preset ) {
    HRESULT _hr = put_PresetTextEffect(Preset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(340)
inline enum Office::MsoTriState MSPpt::TextEffectFormat::GetRotatedChars ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RotatedChars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(341)
inline void MSPpt::TextEffectFormat::PutRotatedChars ( enum Office::MsoTriState RotatedChars ) {
    HRESULT _hr = put_RotatedChars(RotatedChars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(342)
inline _bstr_t MSPpt::TextEffectFormat::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(343)
inline void MSPpt::TextEffectFormat::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(344)
inline float MSPpt::TextEffectFormat::GetTracking ( ) {
    float _result = 0;
    HRESULT _hr = get_Tracking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(345)
inline void MSPpt::TextEffectFormat::PutTracking ( float Tracking ) {
    HRESULT _hr = put_Tracking(Tracking);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ThreeDFormat wrapper method implementations
//

#pragma implementation_key(346)
inline IDispatchPtr MSPpt::ThreeDFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(347)
inline long MSPpt::ThreeDFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(348)
inline IDispatchPtr MSPpt::ThreeDFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(349)
inline HRESULT MSPpt::ThreeDFormat::IncrementRotationX ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(350)
inline HRESULT MSPpt::ThreeDFormat::IncrementRotationY ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(351)
inline HRESULT MSPpt::ThreeDFormat::ResetRotation ( ) {
    HRESULT _hr = raw_ResetRotation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(352)
inline HRESULT MSPpt::ThreeDFormat::SetThreeDFormat ( enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) {
    HRESULT _hr = raw_SetThreeDFormat(PresetThreeDFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(353)
inline HRESULT MSPpt::ThreeDFormat::SetExtrusionDirection ( enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) {
    HRESULT _hr = raw_SetExtrusionDirection(PresetExtrusionDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(354)
inline float MSPpt::ThreeDFormat::GetDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(355)
inline void MSPpt::ThreeDFormat::PutDepth ( float Depth ) {
    HRESULT _hr = put_Depth(Depth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(356)
inline MSPpt::ColorFormatPtr MSPpt::ThreeDFormat::GetExtrusionColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ExtrusionColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(357)
inline enum Office::MsoExtrusionColorType MSPpt::ThreeDFormat::GetExtrusionColorType ( ) {
    enum Office::MsoExtrusionColorType _result;
    HRESULT _hr = get_ExtrusionColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(358)
inline void MSPpt::ThreeDFormat::PutExtrusionColorType ( enum Office::MsoExtrusionColorType ExtrusionColorType ) {
    HRESULT _hr = put_ExtrusionColorType(ExtrusionColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(359)
inline enum Office::MsoTriState MSPpt::ThreeDFormat::GetPerspective ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(360)
inline void MSPpt::ThreeDFormat::PutPerspective ( enum Office::MsoTriState Perspective ) {
    HRESULT _hr = put_Perspective(Perspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(361)
inline enum Office::MsoPresetExtrusionDirection MSPpt::ThreeDFormat::GetPresetExtrusionDirection ( ) {
    enum Office::MsoPresetExtrusionDirection _result;
    HRESULT _hr = get_PresetExtrusionDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(362)
inline enum Office::MsoPresetLightingDirection MSPpt::ThreeDFormat::GetPresetLightingDirection ( ) {
    enum Office::MsoPresetLightingDirection _result;
    HRESULT _hr = get_PresetLightingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(363)
inline void MSPpt::ThreeDFormat::PutPresetLightingDirection ( enum Office::MsoPresetLightingDirection PresetLightingDirection ) {
    HRESULT _hr = put_PresetLightingDirection(PresetLightingDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(364)
inline enum Office::MsoPresetLightingSoftness MSPpt::ThreeDFormat::GetPresetLightingSoftness ( ) {
    enum Office::MsoPresetLightingSoftness _result;
    HRESULT _hr = get_PresetLightingSoftness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(365)
inline void MSPpt::ThreeDFormat::PutPresetLightingSoftness ( enum Office::MsoPresetLightingSoftness PresetLightingSoftness ) {
    HRESULT _hr = put_PresetLightingSoftness(PresetLightingSoftness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(366)
inline enum Office::MsoPresetMaterial MSPpt::ThreeDFormat::GetPresetMaterial ( ) {
    enum Office::MsoPresetMaterial _result;
    HRESULT _hr = get_PresetMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(367)
inline void MSPpt::ThreeDFormat::PutPresetMaterial ( enum Office::MsoPresetMaterial PresetMaterial ) {
    HRESULT _hr = put_PresetMaterial(PresetMaterial);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(368)
inline enum Office::MsoPresetThreeDFormat MSPpt::ThreeDFormat::GetPresetThreeDFormat ( ) {
    enum Office::MsoPresetThreeDFormat _result;
    HRESULT _hr = get_PresetThreeDFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(369)
inline float MSPpt::ThreeDFormat::GetRotationX ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(370)
inline void MSPpt::ThreeDFormat::PutRotationX ( float RotationX ) {
    HRESULT _hr = put_RotationX(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(371)
inline float MSPpt::ThreeDFormat::GetRotationY ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(372)
inline void MSPpt::ThreeDFormat::PutRotationY ( float RotationY ) {
    HRESULT _hr = put_RotationY(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(373)
inline enum Office::MsoTriState MSPpt::ThreeDFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline void MSPpt::ThreeDFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(375)
inline HRESULT MSPpt::ThreeDFormat::SetPresetCamera ( enum Office::MsoPresetCamera PresetCamera ) {
    HRESULT _hr = raw_SetPresetCamera(PresetCamera);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(376)
inline HRESULT MSPpt::ThreeDFormat::IncrementRotationZ ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationZ(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(377)
inline HRESULT MSPpt::ThreeDFormat::IncrementRotationHorizontal ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationHorizontal(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(378)
inline HRESULT MSPpt::ThreeDFormat::IncrementRotationVertical ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationVertical(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(379)
inline enum Office::MsoLightRigType MSPpt::ThreeDFormat::GetPresetLighting ( ) {
    enum Office::MsoLightRigType _result;
    HRESULT _hr = get_PresetLighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(380)
inline void MSPpt::ThreeDFormat::PutPresetLighting ( enum Office::MsoLightRigType PresetLightRigType ) {
    HRESULT _hr = put_PresetLighting(PresetLightRigType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(381)
inline float MSPpt::ThreeDFormat::GetZ ( ) {
    float _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline void MSPpt::ThreeDFormat::PutZ ( float Z ) {
    HRESULT _hr = put_Z(Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(383)
inline enum Office::MsoBevelType MSPpt::ThreeDFormat::GetBevelTopType ( ) {
    enum Office::MsoBevelType _result;
    HRESULT _hr = get_BevelTopType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(384)
inline void MSPpt::ThreeDFormat::PutBevelTopType ( enum Office::MsoBevelType BevelTopType ) {
    HRESULT _hr = put_BevelTopType(BevelTopType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(385)
inline float MSPpt::ThreeDFormat::GetBevelTopInset ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelTopInset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(386)
inline void MSPpt::ThreeDFormat::PutBevelTopInset ( float BevelTopInset ) {
    HRESULT _hr = put_BevelTopInset(BevelTopInset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(387)
inline float MSPpt::ThreeDFormat::GetBevelTopDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelTopDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(388)
inline void MSPpt::ThreeDFormat::PutBevelTopDepth ( float BevelTopDepth ) {
    HRESULT _hr = put_BevelTopDepth(BevelTopDepth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(389)
inline enum Office::MsoBevelType MSPpt::ThreeDFormat::GetBevelBottomType ( ) {
    enum Office::MsoBevelType _result;
    HRESULT _hr = get_BevelBottomType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(390)
inline void MSPpt::ThreeDFormat::PutBevelBottomType ( enum Office::MsoBevelType BevelBottomType ) {
    HRESULT _hr = put_BevelBottomType(BevelBottomType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(391)
inline float MSPpt::ThreeDFormat::GetBevelBottomInset ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelBottomInset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(392)
inline void MSPpt::ThreeDFormat::PutBevelBottomInset ( float BevelBottomInset ) {
    HRESULT _hr = put_BevelBottomInset(BevelBottomInset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(393)
inline float MSPpt::ThreeDFormat::GetBevelBottomDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelBottomDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(394)
inline void MSPpt::ThreeDFormat::PutBevelBottomDepth ( float BevelBottomDepth ) {
    HRESULT _hr = put_BevelBottomDepth(BevelBottomDepth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(395)
inline enum Office::MsoPresetCamera MSPpt::ThreeDFormat::GetPresetCamera ( ) {
    enum Office::MsoPresetCamera _result;
    HRESULT _hr = get_PresetCamera(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(396)
inline float MSPpt::ThreeDFormat::GetRotationZ ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(397)
inline void MSPpt::ThreeDFormat::PutRotationZ ( float RotationZ ) {
    HRESULT _hr = put_RotationZ(RotationZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(398)
inline float MSPpt::ThreeDFormat::GetContourWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_ContourWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(399)
inline void MSPpt::ThreeDFormat::PutContourWidth ( float Width ) {
    HRESULT _hr = put_ContourWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(400)
inline MSPpt::ColorFormatPtr MSPpt::ThreeDFormat::GetContourColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ContourColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(401)
inline float MSPpt::ThreeDFormat::GetFieldOfView ( ) {
    float _result = 0;
    HRESULT _hr = get_FieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(402)
inline void MSPpt::ThreeDFormat::PutFieldOfView ( float FOV ) {
    HRESULT _hr = put_FieldOfView(FOV);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(403)
inline enum Office::MsoTriState MSPpt::ThreeDFormat::GetProjectText ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ProjectText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(404)
inline void MSPpt::ThreeDFormat::PutProjectText ( enum Office::MsoTriState ProjectText ) {
    HRESULT _hr = put_ProjectText(ProjectText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(405)
inline float MSPpt::ThreeDFormat::GetLightAngle ( ) {
    float _result = 0;
    HRESULT _hr = get_LightAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(406)
inline void MSPpt::ThreeDFormat::PutLightAngle ( float LightAngle ) {
    HRESULT _hr = put_LightAngle(LightAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CalloutFormat wrapper method implementations
//

#pragma implementation_key(407)
inline IDispatchPtr MSPpt::CalloutFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(408)
inline long MSPpt::CalloutFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(409)
inline IDispatchPtr MSPpt::CalloutFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(410)
inline HRESULT MSPpt::CalloutFormat::AutomaticLength ( ) {
    HRESULT _hr = raw_AutomaticLength();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(411)
inline HRESULT MSPpt::CalloutFormat::CustomDrop ( float Drop ) {
    HRESULT _hr = raw_CustomDrop(Drop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(412)
inline HRESULT MSPpt::CalloutFormat::CustomLength ( float Length ) {
    HRESULT _hr = raw_CustomLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(413)
inline HRESULT MSPpt::CalloutFormat::PresetDrop ( enum Office::MsoCalloutDropType DropType ) {
    HRESULT _hr = raw_PresetDrop(DropType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(414)
inline enum Office::MsoTriState MSPpt::CalloutFormat::GetAccent ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Accent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline void MSPpt::CalloutFormat::PutAccent ( enum Office::MsoTriState Accent ) {
    HRESULT _hr = put_Accent(Accent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline enum Office::MsoCalloutAngleType MSPpt::CalloutFormat::GetAngle ( ) {
    enum Office::MsoCalloutAngleType _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(417)
inline void MSPpt::CalloutFormat::PutAngle ( enum Office::MsoCalloutAngleType Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(418)
inline enum Office::MsoTriState MSPpt::CalloutFormat::GetAutoAttach ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoAttach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(419)
inline void MSPpt::CalloutFormat::PutAutoAttach ( enum Office::MsoTriState AutoAttach ) {
    HRESULT _hr = put_AutoAttach(AutoAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(420)
inline enum Office::MsoTriState MSPpt::CalloutFormat::GetAutoLength ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(421)
inline enum Office::MsoTriState MSPpt::CalloutFormat::GetBorder ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(422)
inline void MSPpt::CalloutFormat::PutBorder ( enum Office::MsoTriState Border ) {
    HRESULT _hr = put_Border(Border);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(423)
inline float MSPpt::CalloutFormat::GetDrop ( ) {
    float _result = 0;
    HRESULT _hr = get_Drop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(424)
inline enum Office::MsoCalloutDropType MSPpt::CalloutFormat::GetDropType ( ) {
    enum Office::MsoCalloutDropType _result;
    HRESULT _hr = get_DropType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(425)
inline float MSPpt::CalloutFormat::GetGap ( ) {
    float _result = 0;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(426)
inline void MSPpt::CalloutFormat::PutGap ( float Gap ) {
    HRESULT _hr = put_Gap(Gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(427)
inline float MSPpt::CalloutFormat::GetLength ( ) {
    float _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(428)
inline enum Office::MsoCalloutType MSPpt::CalloutFormat::GetType ( ) {
    enum Office::MsoCalloutType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(429)
inline void MSPpt::CalloutFormat::PutType ( enum Office::MsoCalloutType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeNode wrapper method implementations
//

#pragma implementation_key(430)
inline IDispatchPtr MSPpt::ShapeNode::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(431)
inline long MSPpt::ShapeNode::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(432)
inline IDispatchPtr MSPpt::ShapeNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(433)
inline enum Office::MsoEditingType MSPpt::ShapeNode::GetEditingType ( ) {
    enum Office::MsoEditingType _result;
    HRESULT _hr = get_EditingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline _variant_t MSPpt::ShapeNode::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(435)
inline enum Office::MsoSegmentType MSPpt::ShapeNode::GetSegmentType ( ) {
    enum Office::MsoSegmentType _result;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeNodes wrapper method implementations
//

#pragma implementation_key(436)
inline IDispatchPtr MSPpt::ShapeNodes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(437)
inline long MSPpt::ShapeNodes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline IDispatchPtr MSPpt::ShapeNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(439)
inline int MSPpt::ShapeNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(440)
inline MSPpt::ShapeNodePtr MSPpt::ShapeNodes::Item ( const _variant_t & Index ) {
    struct ShapeNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodePtr(_result, false);
}

#pragma implementation_key(441)
inline IUnknownPtr MSPpt::ShapeNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(442)
inline HRESULT MSPpt::ShapeNodes::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(443)
inline HRESULT MSPpt::ShapeNodes::Insert ( int Index, enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_Insert(Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(444)
inline HRESULT MSPpt::ShapeNodes::SetEditingType ( int Index, enum Office::MsoEditingType EditingType ) {
    HRESULT _hr = raw_SetEditingType(Index, EditingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(445)
inline HRESULT MSPpt::ShapeNodes::SetPosition ( int Index, float X1, float Y1 ) {
    HRESULT _hr = raw_SetPosition(Index, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(446)
inline HRESULT MSPpt::ShapeNodes::SetSegmentType ( int Index, enum Office::MsoSegmentType SegmentType ) {
    HRESULT _hr = raw_SetSegmentType(Index, SegmentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface LinkFormat wrapper method implementations
//

#pragma implementation_key(447)
inline MSPpt::_ApplicationPtr MSPpt::LinkFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(448)
inline IDispatchPtr MSPpt::LinkFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(449)
inline _bstr_t MSPpt::LinkFormat::GetSourceFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceFullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(450)
inline void MSPpt::LinkFormat::PutSourceFullName ( _bstr_t SourceFullName ) {
    HRESULT _hr = put_SourceFullName(SourceFullName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(451)
inline enum MSPpt::PpUpdateOption MSPpt::LinkFormat::GetAutoUpdate ( ) {
    enum PpUpdateOption _result;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(452)
inline void MSPpt::LinkFormat::PutAutoUpdate ( enum PpUpdateOption AutoUpdate ) {
    HRESULT _hr = put_AutoUpdate(AutoUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(453)
inline HRESULT MSPpt::LinkFormat::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(454)
inline HRESULT MSPpt::LinkFormat::BreakLink ( ) {
    HRESULT _hr = raw_BreakLink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ObjectVerbs wrapper method implementations
//

#pragma implementation_key(455)
inline MSPpt::_ApplicationPtr MSPpt::ObjectVerbs::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(456)
inline IDispatchPtr MSPpt::ObjectVerbs::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(457)
inline _bstr_t MSPpt::ObjectVerbs::Item ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface OLEFormat wrapper method implementations
//

#pragma implementation_key(458)
inline MSPpt::_ApplicationPtr MSPpt::OLEFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(459)
inline IDispatchPtr MSPpt::OLEFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(460)
inline MSPpt::ObjectVerbsPtr MSPpt::OLEFormat::GetObjectVerbs ( ) {
    struct ObjectVerbs * _result = 0;
    HRESULT _hr = get_ObjectVerbs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ObjectVerbsPtr(_result, false);
}

#pragma implementation_key(461)
inline IDispatchPtr MSPpt::OLEFormat::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(462)
inline _bstr_t MSPpt::OLEFormat::GetProgID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(463)
inline enum MSPpt::PpFollowColors MSPpt::OLEFormat::GetFollowColors ( ) {
    enum PpFollowColors _result;
    HRESULT _hr = get_FollowColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(464)
inline void MSPpt::OLEFormat::PutFollowColors ( enum PpFollowColors FollowColors ) {
    HRESULT _hr = put_FollowColors(FollowColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(465)
inline HRESULT MSPpt::OLEFormat::DoVerb ( int Index ) {
    HRESULT _hr = raw_DoVerb(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(466)
inline HRESULT MSPpt::OLEFormat::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ActionSetting wrapper method implementations
//

#pragma implementation_key(467)
inline MSPpt::_ApplicationPtr MSPpt::ActionSetting::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(468)
inline IDispatchPtr MSPpt::ActionSetting::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(469)
inline enum MSPpt::PpActionType MSPpt::ActionSetting::GetAction ( ) {
    enum PpActionType _result;
    HRESULT _hr = get_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(470)
inline void MSPpt::ActionSetting::PutAction ( enum PpActionType Action ) {
    HRESULT _hr = put_Action(Action);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(471)
inline _bstr_t MSPpt::ActionSetting::GetActionVerb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionVerb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(472)
inline void MSPpt::ActionSetting::PutActionVerb ( _bstr_t ActionVerb ) {
    HRESULT _hr = put_ActionVerb(ActionVerb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(473)
inline enum Office::MsoTriState MSPpt::ActionSetting::GetAnimateAction ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(474)
inline void MSPpt::ActionSetting::PutAnimateAction ( enum Office::MsoTriState AnimateAction ) {
    HRESULT _hr = put_AnimateAction(AnimateAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(475)
inline _bstr_t MSPpt::ActionSetting::GetRun ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(476)
inline void MSPpt::ActionSetting::PutRun ( _bstr_t Run ) {
    HRESULT _hr = put_Run(Run);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(477)
inline _bstr_t MSPpt::ActionSetting::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(478)
inline void MSPpt::ActionSetting::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(479)
inline MSPpt::HyperlinkPtr MSPpt::ActionSetting::GetHyperlink ( ) {
    struct Hyperlink * _result = 0;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(480)
inline MSPpt::SoundEffectPtr MSPpt::ActionSetting::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(481)
inline enum Office::MsoTriState MSPpt::ActionSetting::GetShowAndReturn ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowAndReturn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline void MSPpt::ActionSetting::PutShowAndReturn ( enum Office::MsoTriState ShowAndReturn ) {
    HRESULT _hr = put_ShowAndReturn(ShowAndReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ActionSettings wrapper method implementations
//

#pragma implementation_key(483)
inline MSPpt::_ApplicationPtr MSPpt::ActionSettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(484)
inline IDispatchPtr MSPpt::ActionSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(485)
inline MSPpt::ActionSettingPtr MSPpt::ActionSettings::Item ( enum PpMouseActivation Index ) {
    struct ActionSetting * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingPtr(_result, false);
}

//
// interface PlaySettings wrapper method implementations
//

#pragma implementation_key(486)
inline MSPpt::_ApplicationPtr MSPpt::PlaySettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(487)
inline IDispatchPtr MSPpt::PlaySettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(488)
inline _bstr_t MSPpt::PlaySettings::GetActionVerb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionVerb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(489)
inline void MSPpt::PlaySettings::PutActionVerb ( _bstr_t ActionVerb ) {
    HRESULT _hr = put_ActionVerb(ActionVerb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(490)
inline enum Office::MsoTriState MSPpt::PlaySettings::GetHideWhileNotPlaying ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HideWhileNotPlaying(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(491)
inline void MSPpt::PlaySettings::PutHideWhileNotPlaying ( enum Office::MsoTriState HideWhileNotPlaying ) {
    HRESULT _hr = put_HideWhileNotPlaying(HideWhileNotPlaying);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(492)
inline enum Office::MsoTriState MSPpt::PlaySettings::GetLoopUntilStopped ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LoopUntilStopped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(493)
inline void MSPpt::PlaySettings::PutLoopUntilStopped ( enum Office::MsoTriState LoopUntilStopped ) {
    HRESULT _hr = put_LoopUntilStopped(LoopUntilStopped);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(494)
inline enum Office::MsoTriState MSPpt::PlaySettings::GetPlayOnEntry ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PlayOnEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(495)
inline void MSPpt::PlaySettings::PutPlayOnEntry ( enum Office::MsoTriState PlayOnEntry ) {
    HRESULT _hr = put_PlayOnEntry(PlayOnEntry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(496)
inline enum Office::MsoTriState MSPpt::PlaySettings::GetRewindMovie ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RewindMovie(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(497)
inline void MSPpt::PlaySettings::PutRewindMovie ( enum Office::MsoTriState RewindMovie ) {
    HRESULT _hr = put_RewindMovie(RewindMovie);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(498)
inline enum Office::MsoTriState MSPpt::PlaySettings::GetPauseAnimation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PauseAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(499)
inline void MSPpt::PlaySettings::PutPauseAnimation ( enum Office::MsoTriState PauseAnimation ) {
    HRESULT _hr = put_PauseAnimation(PauseAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(500)
inline int MSPpt::PlaySettings::GetStopAfterSlides ( ) {
    int _result = 0;
    HRESULT _hr = get_StopAfterSlides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(501)
inline void MSPpt::PlaySettings::PutStopAfterSlides ( int StopAfterSlides ) {
    HRESULT _hr = put_StopAfterSlides(StopAfterSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationSettings wrapper method implementations
//

#pragma implementation_key(502)
inline MSPpt::_ApplicationPtr MSPpt::AnimationSettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(503)
inline IDispatchPtr MSPpt::AnimationSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(504)
inline MSPpt::ColorFormatPtr MSPpt::AnimationSettings::GetDimColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_DimColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(505)
inline MSPpt::SoundEffectPtr MSPpt::AnimationSettings::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(506)
inline enum MSPpt::PpEntryEffect MSPpt::AnimationSettings::GetEntryEffect ( ) {
    enum PpEntryEffect _result;
    HRESULT _hr = get_EntryEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(507)
inline void MSPpt::AnimationSettings::PutEntryEffect ( enum PpEntryEffect EntryEffect ) {
    HRESULT _hr = put_EntryEffect(EntryEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(508)
inline enum MSPpt::PpAfterEffect MSPpt::AnimationSettings::GetAfterEffect ( ) {
    enum PpAfterEffect _result;
    HRESULT _hr = get_AfterEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(509)
inline void MSPpt::AnimationSettings::PutAfterEffect ( enum PpAfterEffect AfterEffect ) {
    HRESULT _hr = put_AfterEffect(AfterEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(510)
inline int MSPpt::AnimationSettings::GetAnimationOrder ( ) {
    int _result = 0;
    HRESULT _hr = get_AnimationOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(511)
inline void MSPpt::AnimationSettings::PutAnimationOrder ( int AnimationOrder ) {
    HRESULT _hr = put_AnimationOrder(AnimationOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(512)
inline enum MSPpt::PpAdvanceMode MSPpt::AnimationSettings::GetAdvanceMode ( ) {
    enum PpAdvanceMode _result;
    HRESULT _hr = get_AdvanceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(513)
inline void MSPpt::AnimationSettings::PutAdvanceMode ( enum PpAdvanceMode AdvanceMode ) {
    HRESULT _hr = put_AdvanceMode(AdvanceMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(514)
inline float MSPpt::AnimationSettings::GetAdvanceTime ( ) {
    float _result = 0;
    HRESULT _hr = get_AdvanceTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(515)
inline void MSPpt::AnimationSettings::PutAdvanceTime ( float AdvanceTime ) {
    HRESULT _hr = put_AdvanceTime(AdvanceTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(516)
inline MSPpt::PlaySettingsPtr MSPpt::AnimationSettings::GetPlaySettings ( ) {
    struct PlaySettings * _result = 0;
    HRESULT _hr = get_PlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaySettingsPtr(_result, false);
}

#pragma implementation_key(517)
inline enum MSPpt::PpTextLevelEffect MSPpt::AnimationSettings::GetTextLevelEffect ( ) {
    enum PpTextLevelEffect _result;
    HRESULT _hr = get_TextLevelEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(518)
inline void MSPpt::AnimationSettings::PutTextLevelEffect ( enum PpTextLevelEffect TextLevelEffect ) {
    HRESULT _hr = put_TextLevelEffect(TextLevelEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(519)
inline enum MSPpt::PpTextUnitEffect MSPpt::AnimationSettings::GetTextUnitEffect ( ) {
    enum PpTextUnitEffect _result;
    HRESULT _hr = get_TextUnitEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(520)
inline void MSPpt::AnimationSettings::PutTextUnitEffect ( enum PpTextUnitEffect TextUnitEffect ) {
    HRESULT _hr = put_TextUnitEffect(TextUnitEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(521)
inline enum Office::MsoTriState MSPpt::AnimationSettings::GetAnimate ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Animate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(522)
inline void MSPpt::AnimationSettings::PutAnimate ( enum Office::MsoTriState Animate ) {
    HRESULT _hr = put_Animate(Animate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(523)
inline enum Office::MsoTriState MSPpt::AnimationSettings::GetAnimateBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(524)
inline void MSPpt::AnimationSettings::PutAnimateBackground ( enum Office::MsoTriState AnimateBackground ) {
    HRESULT _hr = put_AnimateBackground(AnimateBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(525)
inline enum Office::MsoTriState MSPpt::AnimationSettings::GetAnimateTextInReverse ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateTextInReverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(526)
inline void MSPpt::AnimationSettings::PutAnimateTextInReverse ( enum Office::MsoTriState AnimateTextInReverse ) {
    HRESULT _hr = put_AnimateTextInReverse(AnimateTextInReverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(527)
inline enum MSPpt::PpChartUnitEffect MSPpt::AnimationSettings::GetChartUnitEffect ( ) {
    enum PpChartUnitEffect _result;
    HRESULT _hr = get_ChartUnitEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(528)
inline void MSPpt::AnimationSettings::PutChartUnitEffect ( enum PpChartUnitEffect ChartUnitEffect ) {
    HRESULT _hr = put_ChartUnitEffect(ChartUnitEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RulerLevel wrapper method implementations
//

#pragma implementation_key(529)
inline MSPpt::_ApplicationPtr MSPpt::RulerLevel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(530)
inline IDispatchPtr MSPpt::RulerLevel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(531)
inline float MSPpt::RulerLevel::GetFirstMargin ( ) {
    float _result = 0;
    HRESULT _hr = get_FirstMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(532)
inline void MSPpt::RulerLevel::PutFirstMargin ( float FirstMargin ) {
    HRESULT _hr = put_FirstMargin(FirstMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(533)
inline float MSPpt::RulerLevel::GetLeftMargin ( ) {
    float _result = 0;
    HRESULT _hr = get_LeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(534)
inline void MSPpt::RulerLevel::PutLeftMargin ( float LeftMargin ) {
    HRESULT _hr = put_LeftMargin(LeftMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RulerLevels wrapper method implementations
//

#pragma implementation_key(535)
inline MSPpt::_ApplicationPtr MSPpt::RulerLevels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(536)
inline IDispatchPtr MSPpt::RulerLevels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(537)
inline MSPpt::RulerLevelPtr MSPpt::RulerLevels::Item ( int Index ) {
    struct RulerLevel * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerLevelPtr(_result, false);
}

//
// interface TabStop wrapper method implementations
//

#pragma implementation_key(538)
inline MSPpt::_ApplicationPtr MSPpt::TabStop::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(539)
inline IDispatchPtr MSPpt::TabStop::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(540)
inline enum MSPpt::PpTabStopType MSPpt::TabStop::GetType ( ) {
    enum PpTabStopType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(541)
inline void MSPpt::TabStop::PutType ( enum PpTabStopType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(542)
inline float MSPpt::TabStop::GetPosition ( ) {
    float _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(543)
inline void MSPpt::TabStop::PutPosition ( float Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(544)
inline HRESULT MSPpt::TabStop::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TabStops wrapper method implementations
//

#pragma implementation_key(545)
inline MSPpt::_ApplicationPtr MSPpt::TabStops::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(546)
inline IDispatchPtr MSPpt::TabStops::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(547)
inline MSPpt::TabStopPtr MSPpt::TabStops::Item ( int Index ) {
    struct TabStop * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

#pragma implementation_key(548)
inline float MSPpt::TabStops::GetDefaultSpacing ( ) {
    float _result = 0;
    HRESULT _hr = get_DefaultSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(549)
inline void MSPpt::TabStops::PutDefaultSpacing ( float DefaultSpacing ) {
    HRESULT _hr = put_DefaultSpacing(DefaultSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(550)
inline MSPpt::TabStopPtr MSPpt::TabStops::Add ( enum PpTabStopType Type, float Position ) {
    struct TabStop * _result = 0;
    HRESULT _hr = raw_Add(Type, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

//
// interface Ruler wrapper method implementations
//

#pragma implementation_key(551)
inline MSPpt::_ApplicationPtr MSPpt::Ruler::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(552)
inline IDispatchPtr MSPpt::Ruler::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(553)
inline MSPpt::TabStopsPtr MSPpt::Ruler::GetTabStops ( ) {
    struct TabStops * _result = 0;
    HRESULT _hr = get_TabStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopsPtr(_result, false);
}

#pragma implementation_key(554)
inline MSPpt::RulerLevelsPtr MSPpt::Ruler::GetLevels ( ) {
    struct RulerLevels * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerLevelsPtr(_result, false);
}

//
// interface Font wrapper method implementations
//

#pragma implementation_key(555)
inline MSPpt::_ApplicationPtr MSPpt::Font::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(556)
inline IDispatchPtr MSPpt::Font::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(557)
inline MSPpt::ColorFormatPtr MSPpt::Font::GetColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(558)
inline enum Office::MsoTriState MSPpt::Font::GetBold ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(559)
inline void MSPpt::Font::PutBold ( enum Office::MsoTriState Bold ) {
    HRESULT _hr = put_Bold(Bold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(560)
inline enum Office::MsoTriState MSPpt::Font::GetItalic ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(561)
inline void MSPpt::Font::PutItalic ( enum Office::MsoTriState Italic ) {
    HRESULT _hr = put_Italic(Italic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(562)
inline enum Office::MsoTriState MSPpt::Font::GetShadow ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(563)
inline void MSPpt::Font::PutShadow ( enum Office::MsoTriState Shadow ) {
    HRESULT _hr = put_Shadow(Shadow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(564)
inline enum Office::MsoTriState MSPpt::Font::GetEmboss ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Emboss(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(565)
inline void MSPpt::Font::PutEmboss ( enum Office::MsoTriState Emboss ) {
    HRESULT _hr = put_Emboss(Emboss);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(566)
inline enum Office::MsoTriState MSPpt::Font::GetUnderline ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(567)
inline void MSPpt::Font::PutUnderline ( enum Office::MsoTriState Underline ) {
    HRESULT _hr = put_Underline(Underline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(568)
inline enum Office::MsoTriState MSPpt::Font::GetSubscript ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Subscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(569)
inline void MSPpt::Font::PutSubscript ( enum Office::MsoTriState Subscript ) {
    HRESULT _hr = put_Subscript(Subscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(570)
inline enum Office::MsoTriState MSPpt::Font::GetSuperscript ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Superscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(571)
inline void MSPpt::Font::PutSuperscript ( enum Office::MsoTriState Superscript ) {
    HRESULT _hr = put_Superscript(Superscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(572)
inline float MSPpt::Font::GetBaselineOffset ( ) {
    float _result = 0;
    HRESULT _hr = get_BaselineOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(573)
inline void MSPpt::Font::PutBaselineOffset ( float BaselineOffset ) {
    HRESULT _hr = put_BaselineOffset(BaselineOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(574)
inline enum Office::MsoTriState MSPpt::Font::GetEmbedded ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Embedded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(575)
inline enum Office::MsoTriState MSPpt::Font::GetEmbeddable ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Embeddable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(576)
inline float MSPpt::Font::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(577)
inline void MSPpt::Font::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(578)
inline _bstr_t MSPpt::Font::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(579)
inline void MSPpt::Font::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(580)
inline _bstr_t MSPpt::Font::GetNameFarEast ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(581)
inline void MSPpt::Font::PutNameFarEast ( _bstr_t NameFarEast ) {
    HRESULT _hr = put_NameFarEast(NameFarEast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline _bstr_t MSPpt::Font::GetNameAscii ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameAscii(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(583)
inline void MSPpt::Font::PutNameAscii ( _bstr_t NameAscii ) {
    HRESULT _hr = put_NameAscii(NameAscii);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(584)
inline enum Office::MsoTriState MSPpt::Font::GetAutoRotateNumbers ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoRotateNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(585)
inline void MSPpt::Font::PutAutoRotateNumbers ( enum Office::MsoTriState AutoRotateNumbers ) {
    HRESULT _hr = put_AutoRotateNumbers(AutoRotateNumbers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(586)
inline _bstr_t MSPpt::Font::GetNameOther ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameOther(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(587)
inline void MSPpt::Font::PutNameOther ( _bstr_t NameOther ) {
    HRESULT _hr = put_NameOther(NameOther);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(588)
inline _bstr_t MSPpt::Font::GetNameComplexScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameComplexScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(589)
inline void MSPpt::Font::PutNameComplexScript ( _bstr_t NameComplexScript ) {
    HRESULT _hr = put_NameComplexScript(NameComplexScript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Fonts wrapper method implementations
//

#pragma implementation_key(590)
inline MSPpt::_ApplicationPtr MSPpt::Fonts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(591)
inline IDispatchPtr MSPpt::Fonts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(592)
inline MSPpt::FontPtr MSPpt::Fonts::Item ( const _variant_t & Index ) {
    struct Font * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(593)
inline HRESULT MSPpt::Fonts::Replace ( _bstr_t Original, _bstr_t Replacement ) {
    HRESULT _hr = raw_Replace(Original, Replacement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface HeaderFooter wrapper method implementations
//

#pragma implementation_key(594)
inline MSPpt::_ApplicationPtr MSPpt::HeaderFooter::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(595)
inline IDispatchPtr MSPpt::HeaderFooter::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(596)
inline enum Office::MsoTriState MSPpt::HeaderFooter::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(597)
inline void MSPpt::HeaderFooter::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(598)
inline _bstr_t MSPpt::HeaderFooter::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(599)
inline void MSPpt::HeaderFooter::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(600)
inline enum Office::MsoTriState MSPpt::HeaderFooter::GetUseFormat ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(601)
inline void MSPpt::HeaderFooter::PutUseFormat ( enum Office::MsoTriState UseFormat ) {
    HRESULT _hr = put_UseFormat(UseFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(602)
inline enum MSPpt::PpDateTimeFormat MSPpt::HeaderFooter::GetFormat ( ) {
    enum PpDateTimeFormat _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(603)
inline void MSPpt::HeaderFooter::PutFormat ( enum PpDateTimeFormat Format ) {
    HRESULT _hr = put_Format(Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface HeadersFooters wrapper method implementations
//

#pragma implementation_key(604)
inline MSPpt::_ApplicationPtr MSPpt::HeadersFooters::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(605)
inline IDispatchPtr MSPpt::HeadersFooters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(606)
inline MSPpt::HeaderFooterPtr MSPpt::HeadersFooters::GetDateAndTime ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_DateAndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(607)
inline MSPpt::HeaderFooterPtr MSPpt::HeadersFooters::GetSlideNumber ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_SlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(608)
inline MSPpt::HeaderFooterPtr MSPpt::HeadersFooters::GetHeader ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_Header(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(609)
inline MSPpt::HeaderFooterPtr MSPpt::HeadersFooters::GetFooter ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_Footer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(610)
inline enum Office::MsoTriState MSPpt::HeadersFooters::GetDisplayOnTitleSlide ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayOnTitleSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(611)
inline void MSPpt::HeadersFooters::PutDisplayOnTitleSlide ( enum Office::MsoTriState DisplayOnTitleSlide ) {
    HRESULT _hr = put_DisplayOnTitleSlide(DisplayOnTitleSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(612)
inline HRESULT MSPpt::HeadersFooters::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Tags wrapper method implementations
//

#pragma implementation_key(613)
inline MSPpt::_ApplicationPtr MSPpt::Tags::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(614)
inline IDispatchPtr MSPpt::Tags::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(615)
inline _bstr_t MSPpt::Tags::Item ( _bstr_t Name ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(616)
inline HRESULT MSPpt::Tags::Add ( _bstr_t Name, _bstr_t Value ) {
    HRESULT _hr = raw_Add(Name, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(617)
inline HRESULT MSPpt::Tags::Delete ( _bstr_t Name ) {
    HRESULT _hr = raw_Delete(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(618)
inline HRESULT MSPpt::Tags::AddBinary ( _bstr_t Name, _bstr_t FilePath ) {
    HRESULT _hr = raw_AddBinary(Name, FilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(619)
inline long MSPpt::Tags::BinaryValue ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_BinaryValue(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(620)
inline _bstr_t MSPpt::Tags::Name ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Name(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(621)
inline _bstr_t MSPpt::Tags::Value ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Value(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface MouseTracker wrapper method implementations
//

#pragma implementation_key(622)
inline HRESULT MSPpt::MouseTracker::OnTrack ( float X, float Y ) {
    HRESULT _hr = raw_OnTrack(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(623)
inline HRESULT MSPpt::MouseTracker::EndTrack ( float X, float Y ) {
    HRESULT _hr = raw_EndTrack(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SlideShowView wrapper method implementations
//

#pragma implementation_key(624)
inline MSPpt::_ApplicationPtr MSPpt::SlideShowView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(625)
inline IDispatchPtr MSPpt::SlideShowView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(626)
inline int MSPpt::SlideShowView::GetZoom ( ) {
    int _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(627)
inline MSPpt::_SlidePtr MSPpt::SlideShowView::GetSlide ( ) {
    struct _Slide * _result = 0;
    HRESULT _hr = get_Slide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(628)
inline enum MSPpt::PpSlideShowPointerType MSPpt::SlideShowView::GetPointerType ( ) {
    enum PpSlideShowPointerType _result;
    HRESULT _hr = get_PointerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(629)
inline void MSPpt::SlideShowView::PutPointerType ( enum PpSlideShowPointerType PointerType ) {
    HRESULT _hr = put_PointerType(PointerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(630)
inline enum MSPpt::PpSlideShowState MSPpt::SlideShowView::GetState ( ) {
    enum PpSlideShowState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(631)
inline void MSPpt::SlideShowView::PutState ( enum PpSlideShowState State ) {
    HRESULT _hr = put_State(State);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(632)
inline enum Office::MsoTriState MSPpt::SlideShowView::GetAcceleratorsEnabled ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AcceleratorsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(633)
inline void MSPpt::SlideShowView::PutAcceleratorsEnabled ( enum Office::MsoTriState AcceleratorsEnabled ) {
    HRESULT _hr = put_AcceleratorsEnabled(AcceleratorsEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(634)
inline float MSPpt::SlideShowView::GetPresentationElapsedTime ( ) {
    float _result = 0;
    HRESULT _hr = get_PresentationElapsedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(635)
inline float MSPpt::SlideShowView::GetSlideElapsedTime ( ) {
    float _result = 0;
    HRESULT _hr = get_SlideElapsedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(636)
inline void MSPpt::SlideShowView::PutSlideElapsedTime ( float SlideElapsedTime ) {
    HRESULT _hr = put_SlideElapsedTime(SlideElapsedTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(637)
inline MSPpt::_SlidePtr MSPpt::SlideShowView::GetLastSlideViewed ( ) {
    struct _Slide * _result = 0;
    HRESULT _hr = get_LastSlideViewed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(638)
inline enum MSPpt::PpSlideShowAdvanceMode MSPpt::SlideShowView::GetAdvanceMode ( ) {
    enum PpSlideShowAdvanceMode _result;
    HRESULT _hr = get_AdvanceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(639)
inline MSPpt::ColorFormatPtr MSPpt::SlideShowView::GetPointerColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_PointerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(640)
inline enum Office::MsoTriState MSPpt::SlideShowView::GetIsNamedShow ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsNamedShow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(641)
inline _bstr_t MSPpt::SlideShowView::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(642)
inline HRESULT MSPpt::SlideShowView::DrawLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    HRESULT _hr = raw_DrawLine(BeginX, BeginY, EndX, EndY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(643)
inline HRESULT MSPpt::SlideShowView::EraseDrawing ( ) {
    HRESULT _hr = raw_EraseDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(644)
inline HRESULT MSPpt::SlideShowView::First ( ) {
    HRESULT _hr = raw_First();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(645)
inline HRESULT MSPpt::SlideShowView::Last ( ) {
    HRESULT _hr = raw_Last();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(646)
inline HRESULT MSPpt::SlideShowView::Next ( ) {
    HRESULT _hr = raw_Next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(647)
inline HRESULT MSPpt::SlideShowView::Previous ( ) {
    HRESULT _hr = raw_Previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(648)
inline HRESULT MSPpt::SlideShowView::GotoSlide ( int Index, enum Office::MsoTriState ResetSlide ) {
    HRESULT _hr = raw_GotoSlide(Index, ResetSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(649)
inline HRESULT MSPpt::SlideShowView::GotoNamedShow ( _bstr_t SlideShowName ) {
    HRESULT _hr = raw_GotoNamedShow(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(650)
inline HRESULT MSPpt::SlideShowView::EndNamedShow ( ) {
    HRESULT _hr = raw_EndNamedShow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(651)
inline HRESULT MSPpt::SlideShowView::ResetSlideTime ( ) {
    HRESULT _hr = raw_ResetSlideTime();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(652)
inline HRESULT MSPpt::SlideShowView::Exit ( ) {
    HRESULT _hr = raw_Exit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(653)
inline HRESULT MSPpt::SlideShowView::InstallTracker ( struct MouseTracker * pTracker, enum Office::MsoTriState Presenter ) {
    HRESULT _hr = raw_InstallTracker(pTracker, Presenter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(654)
inline int MSPpt::SlideShowView::GetCurrentShowPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_CurrentShowPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(655)
inline HRESULT MSPpt::SlideShowView::GotoClick ( int Index ) {
    HRESULT _hr = raw_GotoClick(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(656)
inline int MSPpt::SlideShowView::GetClickIndex ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetClickIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(657)
inline int MSPpt::SlideShowView::GetClickCount ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetClickCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline VARIANT_BOOL MSPpt::SlideShowView::FirstAnimationIsAutomatic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_FirstAnimationIsAutomatic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SlideShowWindow wrapper method implementations
//

#pragma implementation_key(659)
inline MSPpt::_ApplicationPtr MSPpt::SlideShowWindow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(660)
inline IDispatchPtr MSPpt::SlideShowWindow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(661)
inline MSPpt::SlideShowViewPtr MSPpt::SlideShowWindow::GetView ( ) {
    struct SlideShowView * _result = 0;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowViewPtr(_result, false);
}

#pragma implementation_key(662)
inline MSPpt::_PresentationPtr MSPpt::SlideShowWindow::GetPresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_Presentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(663)
inline enum Office::MsoTriState MSPpt::SlideShowWindow::GetIsFullScreen ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsFullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(664)
inline float MSPpt::SlideShowWindow::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(665)
inline void MSPpt::SlideShowWindow::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(666)
inline float MSPpt::SlideShowWindow::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(667)
inline void MSPpt::SlideShowWindow::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(668)
inline float MSPpt::SlideShowWindow::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(669)
inline void MSPpt::SlideShowWindow::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(670)
inline float MSPpt::SlideShowWindow::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(671)
inline void MSPpt::SlideShowWindow::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(672)
inline long MSPpt::SlideShowWindow::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(673)
inline enum Office::MsoTriState MSPpt::SlideShowWindow::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(674)
inline HRESULT MSPpt::SlideShowWindow::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SlideShowWindows wrapper method implementations
//

#pragma implementation_key(675)
inline MSPpt::_ApplicationPtr MSPpt::SlideShowWindows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(676)
inline IDispatchPtr MSPpt::SlideShowWindows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(677)
inline MSPpt::SlideShowWindowPtr MSPpt::SlideShowWindows::Item ( int Index ) {
    struct SlideShowWindow * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowPtr(_result, false);
}

//
// interface SlideShowSettings wrapper method implementations
//

#pragma implementation_key(678)
inline MSPpt::_ApplicationPtr MSPpt::SlideShowSettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(679)
inline IDispatchPtr MSPpt::SlideShowSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(680)
inline MSPpt::ColorFormatPtr MSPpt::SlideShowSettings::GetPointerColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_PointerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(681)
inline MSPpt::NamedSlideShowsPtr MSPpt::SlideShowSettings::GetNamedSlideShows ( ) {
    struct NamedSlideShows * _result = 0;
    HRESULT _hr = get_NamedSlideShows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamedSlideShowsPtr(_result, false);
}

#pragma implementation_key(682)
inline int MSPpt::SlideShowSettings::GetStartingSlide ( ) {
    int _result = 0;
    HRESULT _hr = get_StartingSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(683)
inline void MSPpt::SlideShowSettings::PutStartingSlide ( int StartingSlide ) {
    HRESULT _hr = put_StartingSlide(StartingSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(684)
inline int MSPpt::SlideShowSettings::GetEndingSlide ( ) {
    int _result = 0;
    HRESULT _hr = get_EndingSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(685)
inline void MSPpt::SlideShowSettings::PutEndingSlide ( int EndingSlide ) {
    HRESULT _hr = put_EndingSlide(EndingSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(686)
inline enum MSPpt::PpSlideShowAdvanceMode MSPpt::SlideShowSettings::GetAdvanceMode ( ) {
    enum PpSlideShowAdvanceMode _result;
    HRESULT _hr = get_AdvanceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(687)
inline void MSPpt::SlideShowSettings::PutAdvanceMode ( enum PpSlideShowAdvanceMode AdvanceMode ) {
    HRESULT _hr = put_AdvanceMode(AdvanceMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(688)
inline MSPpt::SlideShowWindowPtr MSPpt::SlideShowSettings::Run ( ) {
    struct SlideShowWindow * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowPtr(_result, false);
}

#pragma implementation_key(689)
inline enum Office::MsoTriState MSPpt::SlideShowSettings::GetLoopUntilStopped ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LoopUntilStopped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(690)
inline void MSPpt::SlideShowSettings::PutLoopUntilStopped ( enum Office::MsoTriState LoopUntilStopped ) {
    HRESULT _hr = put_LoopUntilStopped(LoopUntilStopped);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(691)
inline enum MSPpt::PpSlideShowType MSPpt::SlideShowSettings::GetShowType ( ) {
    enum PpSlideShowType _result;
    HRESULT _hr = get_ShowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(692)
inline void MSPpt::SlideShowSettings::PutShowType ( enum PpSlideShowType ShowType ) {
    HRESULT _hr = put_ShowType(ShowType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(693)
inline enum Office::MsoTriState MSPpt::SlideShowSettings::GetShowWithNarration ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowWithNarration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(694)
inline void MSPpt::SlideShowSettings::PutShowWithNarration ( enum Office::MsoTriState ShowWithNarration ) {
    HRESULT _hr = put_ShowWithNarration(ShowWithNarration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(695)
inline enum Office::MsoTriState MSPpt::SlideShowSettings::GetShowWithAnimation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowWithAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(696)
inline void MSPpt::SlideShowSettings::PutShowWithAnimation ( enum Office::MsoTriState ShowWithAnimation ) {
    HRESULT _hr = put_ShowWithAnimation(ShowWithAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(697)
inline _bstr_t MSPpt::SlideShowSettings::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(698)
inline void MSPpt::SlideShowSettings::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(699)
inline enum MSPpt::PpSlideShowRangeType MSPpt::SlideShowSettings::GetRangeType ( ) {
    enum PpSlideShowRangeType _result;
    HRESULT _hr = get_RangeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(700)
inline void MSPpt::SlideShowSettings::PutRangeType ( enum PpSlideShowRangeType RangeType ) {
    HRESULT _hr = put_RangeType(RangeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(701)
inline enum Office::MsoTriState MSPpt::SlideShowSettings::GetShowScrollbar ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowScrollbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(702)
inline void MSPpt::SlideShowSettings::PutShowScrollbar ( enum Office::MsoTriState ShowScrollbar ) {
    HRESULT _hr = put_ShowScrollbar(ShowScrollbar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface MouseDownHandler wrapper method implementations
//

#pragma implementation_key(703)
inline HRESULT MSPpt::MouseDownHandler::OnMouseDown ( IUnknown * activeWin ) {
    HRESULT _hr = raw_OnMouseDown(activeWin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface OCXExtender wrapper method implementations
//

#pragma implementation_key(704)
inline VARIANT_BOOL MSPpt::OCXExtender::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(705)
inline void MSPpt::OCXExtender::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(706)
inline float MSPpt::OCXExtender::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(707)
inline void MSPpt::OCXExtender::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(708)
inline float MSPpt::OCXExtender::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(709)
inline void MSPpt::OCXExtender::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(710)
inline float MSPpt::OCXExtender::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(711)
inline void MSPpt::OCXExtender::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(712)
inline float MSPpt::OCXExtender::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(713)
inline void MSPpt::OCXExtender::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(714)
inline int MSPpt::OCXExtender::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(715)
inline _bstr_t MSPpt::OCXExtender::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(716)
inline void MSPpt::OCXExtender::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(717)
inline _bstr_t MSPpt::OCXExtender::GetAltHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(718)
inline void MSPpt::OCXExtender::PutAltHTML ( _bstr_t AltHTML ) {
    HRESULT _hr = put_AltHTML(AltHTML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface OCXExtenderEvents wrapper method implementations
//

#pragma implementation_key(719)
inline HRESULT MSPpt::OCXExtenderEvents::GotFocus ( ) {
    HRESULT _hr = raw_GotFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(720)
inline HRESULT MSPpt::OCXExtenderEvents::LostFocus ( ) {
    HRESULT _hr = raw_LostFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface BulletFormat wrapper method implementations
//

#pragma implementation_key(721)
inline MSPpt::_ApplicationPtr MSPpt::BulletFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(722)
inline IDispatchPtr MSPpt::BulletFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(723)
inline enum Office::MsoTriState MSPpt::BulletFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(724)
inline void MSPpt::BulletFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(725)
inline int MSPpt::BulletFormat::GetCharacter ( ) {
    int _result = 0;
    HRESULT _hr = get_Character(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(726)
inline void MSPpt::BulletFormat::PutCharacter ( int Character ) {
    HRESULT _hr = put_Character(Character);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(727)
inline float MSPpt::BulletFormat::GetRelativeSize ( ) {
    float _result = 0;
    HRESULT _hr = get_RelativeSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(728)
inline void MSPpt::BulletFormat::PutRelativeSize ( float RelativeSize ) {
    HRESULT _hr = put_RelativeSize(RelativeSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline enum Office::MsoTriState MSPpt::BulletFormat::GetUseTextColor ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(730)
inline void MSPpt::BulletFormat::PutUseTextColor ( enum Office::MsoTriState UseTextColor ) {
    HRESULT _hr = put_UseTextColor(UseTextColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(731)
inline enum Office::MsoTriState MSPpt::BulletFormat::GetUseTextFont ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseTextFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(732)
inline void MSPpt::BulletFormat::PutUseTextFont ( enum Office::MsoTriState UseTextFont ) {
    HRESULT _hr = put_UseTextFont(UseTextFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(733)
inline MSPpt::FontPtr MSPpt::BulletFormat::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(734)
inline enum MSPpt::PpBulletType MSPpt::BulletFormat::GetType ( ) {
    enum PpBulletType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(735)
inline void MSPpt::BulletFormat::PutType ( enum PpBulletType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(736)
inline enum MSPpt::PpNumberedBulletStyle MSPpt::BulletFormat::GetStyle ( ) {
    enum PpNumberedBulletStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(737)
inline void MSPpt::BulletFormat::PutStyle ( enum PpNumberedBulletStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(738)
inline int MSPpt::BulletFormat::GetStartValue ( ) {
    int _result = 0;
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(739)
inline void MSPpt::BulletFormat::PutStartValue ( int StartValue ) {
    HRESULT _hr = put_StartValue(StartValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(740)
inline HRESULT MSPpt::BulletFormat::Picture ( _bstr_t Picture ) {
    HRESULT _hr = raw_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(741)
inline int MSPpt::BulletFormat::GetNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ParagraphFormat wrapper method implementations
//

#pragma implementation_key(742)
inline MSPpt::_ApplicationPtr MSPpt::ParagraphFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(743)
inline IDispatchPtr MSPpt::ParagraphFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(744)
inline enum MSPpt::PpParagraphAlignment MSPpt::ParagraphFormat::GetAlignment ( ) {
    enum PpParagraphAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(745)
inline void MSPpt::ParagraphFormat::PutAlignment ( enum PpParagraphAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(746)
inline MSPpt::BulletFormatPtr MSPpt::ParagraphFormat::GetBullet ( ) {
    struct BulletFormat * _result = 0;
    HRESULT _hr = get_Bullet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BulletFormatPtr(_result, false);
}

#pragma implementation_key(747)
inline enum Office::MsoTriState MSPpt::ParagraphFormat::GetLineRuleBefore ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LineRuleBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(748)
inline void MSPpt::ParagraphFormat::PutLineRuleBefore ( enum Office::MsoTriState LineRuleBefore ) {
    HRESULT _hr = put_LineRuleBefore(LineRuleBefore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(749)
inline enum Office::MsoTriState MSPpt::ParagraphFormat::GetLineRuleAfter ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LineRuleAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(750)
inline void MSPpt::ParagraphFormat::PutLineRuleAfter ( enum Office::MsoTriState LineRuleAfter ) {
    HRESULT _hr = put_LineRuleAfter(LineRuleAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(751)
inline enum Office::MsoTriState MSPpt::ParagraphFormat::GetLineRuleWithin ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LineRuleWithin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(752)
inline void MSPpt::ParagraphFormat::PutLineRuleWithin ( enum Office::MsoTriState LineRuleWithin ) {
    HRESULT _hr = put_LineRuleWithin(LineRuleWithin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(753)
inline float MSPpt::ParagraphFormat::GetSpaceBefore ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(754)
inline void MSPpt::ParagraphFormat::PutSpaceBefore ( float SpaceBefore ) {
    HRESULT _hr = put_SpaceBefore(SpaceBefore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(755)
inline float MSPpt::ParagraphFormat::GetSpaceAfter ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(756)
inline void MSPpt::ParagraphFormat::PutSpaceAfter ( float SpaceAfter ) {
    HRESULT _hr = put_SpaceAfter(SpaceAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(757)
inline float MSPpt::ParagraphFormat::GetSpaceWithin ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceWithin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(758)
inline void MSPpt::ParagraphFormat::PutSpaceWithin ( float SpaceWithin ) {
    HRESULT _hr = put_SpaceWithin(SpaceWithin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(759)
inline enum MSPpt::PpBaselineAlignment MSPpt::ParagraphFormat::GetBaseLineAlignment ( ) {
    enum PpBaselineAlignment _result;
    HRESULT _hr = get_BaseLineAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(760)
inline void MSPpt::ParagraphFormat::PutBaseLineAlignment ( enum PpBaselineAlignment BaseLineAlignment ) {
    HRESULT _hr = put_BaseLineAlignment(BaseLineAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(761)
inline enum Office::MsoTriState MSPpt::ParagraphFormat::GetFarEastLineBreakControl ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FarEastLineBreakControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(762)
inline void MSPpt::ParagraphFormat::PutFarEastLineBreakControl ( enum Office::MsoTriState FarEastLineBreakControl ) {
    HRESULT _hr = put_FarEastLineBreakControl(FarEastLineBreakControl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(763)
inline enum Office::MsoTriState MSPpt::ParagraphFormat::GetWordWrap ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(764)
inline void MSPpt::ParagraphFormat::PutWordWrap ( enum Office::MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(765)
inline enum Office::MsoTriState MSPpt::ParagraphFormat::GetHangingPunctuation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HangingPunctuation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(766)
inline void MSPpt::ParagraphFormat::PutHangingPunctuation ( enum Office::MsoTriState HangingPunctuation ) {
    HRESULT _hr = put_HangingPunctuation(HangingPunctuation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(767)
inline enum MSPpt::PpDirection MSPpt::ParagraphFormat::GetTextDirection ( ) {
    enum PpDirection _result;
    HRESULT _hr = get_TextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(768)
inline void MSPpt::ParagraphFormat::PutTextDirection ( enum PpDirection TextDirection ) {
    HRESULT _hr = put_TextDirection(TextDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextStyleLevel wrapper method implementations
//

#pragma implementation_key(769)
inline MSPpt::_ApplicationPtr MSPpt::TextStyleLevel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(770)
inline IDispatchPtr MSPpt::TextStyleLevel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(771)
inline MSPpt::ParagraphFormatPtr MSPpt::TextStyleLevel::GetParagraphFormat ( ) {
    struct ParagraphFormat * _result = 0;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(772)
inline MSPpt::FontPtr MSPpt::TextStyleLevel::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

//
// interface TextStyleLevels wrapper method implementations
//

#pragma implementation_key(773)
inline MSPpt::_ApplicationPtr MSPpt::TextStyleLevels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(774)
inline IDispatchPtr MSPpt::TextStyleLevels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(775)
inline MSPpt::TextStyleLevelPtr MSPpt::TextStyleLevels::Item ( int Level ) {
    struct TextStyleLevel * _result = 0;
    HRESULT _hr = raw_Item(Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStyleLevelPtr(_result, false);
}

//
// interface Borders wrapper method implementations
//

#pragma implementation_key(776)
inline MSPpt::_ApplicationPtr MSPpt::Borders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(777)
inline IDispatchPtr MSPpt::Borders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(778)
inline MSPpt::LineFormatPtr MSPpt::Borders::Item ( enum PpBorderType BorderType ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = raw_Item(BorderType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

//
// interface Pane wrapper method implementations
//

#pragma implementation_key(779)
inline IDispatchPtr MSPpt::Pane::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(780)
inline HRESULT MSPpt::Pane::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(781)
inline enum Office::MsoTriState MSPpt::Pane::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(782)
inline MSPpt::_ApplicationPtr MSPpt::Pane::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(783)
inline enum MSPpt::PpViewType MSPpt::Pane::GetViewType ( ) {
    enum PpViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Panes wrapper method implementations
//

#pragma implementation_key(784)
inline MSPpt::_ApplicationPtr MSPpt::Panes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(785)
inline MSPpt::PanePtr MSPpt::Panes::Item ( int Index ) {
    struct Pane * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(786)
inline IDispatchPtr MSPpt::Panes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DefaultWebOptions wrapper method implementations
//

#pragma implementation_key(787)
inline enum Office::MsoTriState MSPpt::DefaultWebOptions::GetIncludeNavigation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IncludeNavigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline void MSPpt::DefaultWebOptions::PutIncludeNavigation ( enum Office::MsoTriState IncludeNavigation ) {
    HRESULT _hr = put_IncludeNavigation(IncludeNavigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(789)
inline enum MSPpt::PpFrameColors MSPpt::DefaultWebOptions::GetFrameColors ( ) {
    enum PpFrameColors _result;
    HRESULT _hr = get_FrameColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(790)
inline void MSPpt::DefaultWebOptions::PutFrameColors ( enum PpFrameColors FrameColors ) {
    HRESULT _hr = put_FrameColors(FrameColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(791)
inline enum Office::MsoTriState MSPpt::DefaultWebOptions::GetResizeGraphics ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ResizeGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(792)
inline void MSPpt::DefaultWebOptions::PutResizeGraphics ( enum Office::MsoTriState ResizeGraphics ) {
    HRESULT _hr = put_ResizeGraphics(ResizeGraphics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(793)
inline enum Office::MsoTriState MSPpt::DefaultWebOptions::GetShowSlideAnimation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowSlideAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(794)
inline void MSPpt::DefaultWebOptions::PutShowSlideAnimation ( enum Office::MsoTriState ShowSlideAnimation ) {
    HRESULT _hr = put_ShowSlideAnimation(ShowSlideAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(795)
inline enum Office::MsoTriState MSPpt::DefaultWebOptions::GetOrganizeInFolder ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(796)
inline void MSPpt::DefaultWebOptions::PutOrganizeInFolder ( enum Office::MsoTriState OrganizeInFolder ) {
    HRESULT _hr = put_OrganizeInFolder(OrganizeInFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(797)
inline enum Office::MsoTriState MSPpt::DefaultWebOptions::GetUseLongFileNames ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(798)
inline void MSPpt::DefaultWebOptions::PutUseLongFileNames ( enum Office::MsoTriState UseLongFileNames ) {
    HRESULT _hr = put_UseLongFileNames(UseLongFileNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(799)
inline enum Office::MsoTriState MSPpt::DefaultWebOptions::GetRelyOnVML ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(800)
inline void MSPpt::DefaultWebOptions::PutRelyOnVML ( enum Office::MsoTriState RelyOnVML ) {
    HRESULT _hr = put_RelyOnVML(RelyOnVML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(801)
inline enum Office::MsoTriState MSPpt::DefaultWebOptions::GetAllowPNG ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(802)
inline void MSPpt::DefaultWebOptions::PutAllowPNG ( enum Office::MsoTriState AllowPNG ) {
    HRESULT _hr = put_AllowPNG(AllowPNG);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(803)
inline enum Office::MsoScreenSize MSPpt::DefaultWebOptions::GetScreenSize ( ) {
    enum Office::MsoScreenSize _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(804)
inline void MSPpt::DefaultWebOptions::PutScreenSize ( enum Office::MsoScreenSize ScreenSize ) {
    HRESULT _hr = put_ScreenSize(ScreenSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(805)
inline enum Office::MsoEncoding MSPpt::DefaultWebOptions::GetEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(806)
inline void MSPpt::DefaultWebOptions::PutEncoding ( enum Office::MsoEncoding Encoding ) {
    HRESULT _hr = put_Encoding(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(807)
inline enum Office::MsoTriState MSPpt::DefaultWebOptions::GetUpdateLinksOnSave ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UpdateLinksOnSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(808)
inline void MSPpt::DefaultWebOptions::PutUpdateLinksOnSave ( enum Office::MsoTriState UpdateLinksOnSave ) {
    HRESULT _hr = put_UpdateLinksOnSave(UpdateLinksOnSave);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(809)
inline enum Office::MsoTriState MSPpt::DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_CheckIfOfficeIsHTMLEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(810)
inline void MSPpt::DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( enum Office::MsoTriState CheckIfOfficeIsHTMLEditor ) {
    HRESULT _hr = put_CheckIfOfficeIsHTMLEditor(CheckIfOfficeIsHTMLEditor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(811)
inline enum Office::MsoTriState MSPpt::DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AlwaysSaveInDefaultEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(812)
inline void MSPpt::DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( enum Office::MsoTriState AlwaysSaveInDefaultEncoding ) {
    HRESULT _hr = put_AlwaysSaveInDefaultEncoding(AlwaysSaveInDefaultEncoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(813)
inline Office::WebPageFontsPtr MSPpt::DefaultWebOptions::GetFonts ( ) {
    struct Office::WebPageFonts * _result = 0;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::WebPageFontsPtr(_result, false);
}

#pragma implementation_key(814)
inline _bstr_t MSPpt::DefaultWebOptions::GetFolderSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(815)
inline enum Office::MsoTargetBrowser MSPpt::DefaultWebOptions::GetTargetBrowser ( ) {
    enum Office::MsoTargetBrowser _result;
    HRESULT _hr = get_TargetBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(816)
inline void MSPpt::DefaultWebOptions::PutTargetBrowser ( enum Office::MsoTargetBrowser TargetBrowser ) {
    HRESULT _hr = put_TargetBrowser(TargetBrowser);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(817)
inline enum Office::MsoTriState MSPpt::DefaultWebOptions::GetSaveNewWebPagesAsWebArchives ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_SaveNewWebPagesAsWebArchives(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(818)
inline void MSPpt::DefaultWebOptions::PutSaveNewWebPagesAsWebArchives ( enum Office::MsoTriState SaveNewWebPagesAsWebArchives ) {
    HRESULT _hr = put_SaveNewWebPagesAsWebArchives(SaveNewWebPagesAsWebArchives);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(819)
inline enum MSPpt::PpHTMLVersion MSPpt::DefaultWebOptions::GetHTMLVersion ( ) {
    enum PpHTMLVersion _result;
    HRESULT _hr = get_HTMLVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(820)
inline void MSPpt::DefaultWebOptions::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion ) {
    HRESULT _hr = put_HTMLVersion(HTMLVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface WebOptions wrapper method implementations
//

#pragma implementation_key(821)
inline enum Office::MsoTriState MSPpt::WebOptions::GetIncludeNavigation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IncludeNavigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(822)
inline void MSPpt::WebOptions::PutIncludeNavigation ( enum Office::MsoTriState IncludeNavigation ) {
    HRESULT _hr = put_IncludeNavigation(IncludeNavigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(823)
inline enum MSPpt::PpFrameColors MSPpt::WebOptions::GetFrameColors ( ) {
    enum PpFrameColors _result;
    HRESULT _hr = get_FrameColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(824)
inline void MSPpt::WebOptions::PutFrameColors ( enum PpFrameColors FrameColors ) {
    HRESULT _hr = put_FrameColors(FrameColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(825)
inline enum Office::MsoTriState MSPpt::WebOptions::GetResizeGraphics ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ResizeGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(826)
inline void MSPpt::WebOptions::PutResizeGraphics ( enum Office::MsoTriState ResizeGraphics ) {
    HRESULT _hr = put_ResizeGraphics(ResizeGraphics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(827)
inline enum Office::MsoTriState MSPpt::WebOptions::GetShowSlideAnimation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowSlideAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(828)
inline void MSPpt::WebOptions::PutShowSlideAnimation ( enum Office::MsoTriState ShowSlideAnimation ) {
    HRESULT _hr = put_ShowSlideAnimation(ShowSlideAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(829)
inline enum Office::MsoTriState MSPpt::WebOptions::GetOrganizeInFolder ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(830)
inline void MSPpt::WebOptions::PutOrganizeInFolder ( enum Office::MsoTriState OrganizeInFolder ) {
    HRESULT _hr = put_OrganizeInFolder(OrganizeInFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(831)
inline enum Office::MsoTriState MSPpt::WebOptions::GetUseLongFileNames ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(832)
inline void MSPpt::WebOptions::PutUseLongFileNames ( enum Office::MsoTriState UseLongFileNames ) {
    HRESULT _hr = put_UseLongFileNames(UseLongFileNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(833)
inline enum Office::MsoTriState MSPpt::WebOptions::GetRelyOnVML ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(834)
inline void MSPpt::WebOptions::PutRelyOnVML ( enum Office::MsoTriState RelyOnVML ) {
    HRESULT _hr = put_RelyOnVML(RelyOnVML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(835)
inline enum Office::MsoTriState MSPpt::WebOptions::GetAllowPNG ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(836)
inline void MSPpt::WebOptions::PutAllowPNG ( enum Office::MsoTriState AllowPNG ) {
    HRESULT _hr = put_AllowPNG(AllowPNG);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(837)
inline enum Office::MsoScreenSize MSPpt::WebOptions::GetScreenSize ( ) {
    enum Office::MsoScreenSize _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(838)
inline void MSPpt::WebOptions::PutScreenSize ( enum Office::MsoScreenSize ScreenSize ) {
    HRESULT _hr = put_ScreenSize(ScreenSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(839)
inline enum Office::MsoEncoding MSPpt::WebOptions::GetEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(840)
inline void MSPpt::WebOptions::PutEncoding ( enum Office::MsoEncoding Encoding ) {
    HRESULT _hr = put_Encoding(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(841)
inline _bstr_t MSPpt::WebOptions::GetFolderSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(842)
inline HRESULT MSPpt::WebOptions::UseDefaultFolderSuffix ( ) {
    HRESULT _hr = raw_UseDefaultFolderSuffix();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(843)
inline enum Office::MsoTargetBrowser MSPpt::WebOptions::GetTargetBrowser ( ) {
    enum Office::MsoTargetBrowser _result;
    HRESULT _hr = get_TargetBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(844)
inline void MSPpt::WebOptions::PutTargetBrowser ( enum Office::MsoTargetBrowser TargetBrowser ) {
    HRESULT _hr = put_TargetBrowser(TargetBrowser);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(845)
inline enum MSPpt::PpHTMLVersion MSPpt::WebOptions::GetHTMLVersion ( ) {
    enum PpHTMLVersion _result;
    HRESULT _hr = get_HTMLVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(846)
inline void MSPpt::WebOptions::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion ) {
    HRESULT _hr = put_HTMLVersion(HTMLVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PublishObject wrapper method implementations
//

#pragma implementation_key(847)
inline MSPpt::_ApplicationPtr MSPpt::PublishObject::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(848)
inline IDispatchPtr MSPpt::PublishObject::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(849)
inline enum MSPpt::PpHTMLVersion MSPpt::PublishObject::GetHTMLVersion ( ) {
    enum PpHTMLVersion _result;
    HRESULT _hr = get_HTMLVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(850)
inline void MSPpt::PublishObject::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion ) {
    HRESULT _hr = put_HTMLVersion(HTMLVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(851)
inline enum MSPpt::PpPublishSourceType MSPpt::PublishObject::GetSourceType ( ) {
    enum PpPublishSourceType _result;
    HRESULT _hr = get_SourceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(852)
inline void MSPpt::PublishObject::PutSourceType ( enum PpPublishSourceType SourceType ) {
    HRESULT _hr = put_SourceType(SourceType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(853)
inline int MSPpt::PublishObject::GetRangeStart ( ) {
    int _result = 0;
    HRESULT _hr = get_RangeStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(854)
inline void MSPpt::PublishObject::PutRangeStart ( int RangeStart ) {
    HRESULT _hr = put_RangeStart(RangeStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(855)
inline int MSPpt::PublishObject::GetRangeEnd ( ) {
    int _result = 0;
    HRESULT _hr = get_RangeEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(856)
inline void MSPpt::PublishObject::PutRangeEnd ( int RangeEnd ) {
    HRESULT _hr = put_RangeEnd(RangeEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(857)
inline _bstr_t MSPpt::PublishObject::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(858)
inline void MSPpt::PublishObject::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(859)
inline enum Office::MsoTriState MSPpt::PublishObject::GetSpeakerNotes ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_SpeakerNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline void MSPpt::PublishObject::PutSpeakerNotes ( enum Office::MsoTriState SpeakerNotes ) {
    HRESULT _hr = put_SpeakerNotes(SpeakerNotes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(861)
inline _bstr_t MSPpt::PublishObject::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(862)
inline void MSPpt::PublishObject::PutFileName ( _bstr_t FileName ) {
    HRESULT _hr = put_FileName(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(863)
inline HRESULT MSPpt::PublishObject::Publish ( ) {
    HRESULT _hr = raw_Publish();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PublishObjects wrapper method implementations
//

#pragma implementation_key(864)
inline MSPpt::_ApplicationPtr MSPpt::PublishObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(865)
inline IDispatchPtr MSPpt::PublishObjects::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(866)
inline MSPpt::PublishObjectPtr MSPpt::PublishObjects::Item ( int Index ) {
    struct PublishObject * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectPtr(_result, false);
}

//
// interface View wrapper method implementations
//

#pragma implementation_key(867)
inline MSPpt::_ApplicationPtr MSPpt::View::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(868)
inline IDispatchPtr MSPpt::View::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(869)
inline enum MSPpt::PpViewType MSPpt::View::GetType ( ) {
    enum PpViewType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(870)
inline int MSPpt::View::GetZoom ( ) {
    int _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(871)
inline void MSPpt::View::PutZoom ( int Zoom ) {
    HRESULT _hr = put_Zoom(Zoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(872)
inline HRESULT MSPpt::View::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(873)
inline IDispatchPtr MSPpt::View::GetSlide ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Slide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(874)
inline void MSPpt::View::PutSlide ( IDispatch * Slide ) {
    HRESULT _hr = put_Slide(Slide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(875)
inline HRESULT MSPpt::View::GotoSlide ( int Index ) {
    HRESULT _hr = raw_GotoSlide(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(876)
inline enum Office::MsoTriState MSPpt::View::GetDisplaySlideMiniature ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplaySlideMiniature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(877)
inline void MSPpt::View::PutDisplaySlideMiniature ( enum Office::MsoTriState DisplaySlideMiniature ) {
    HRESULT _hr = put_DisplaySlideMiniature(DisplaySlideMiniature);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(878)
inline enum Office::MsoTriState MSPpt::View::GetZoomToFit ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ZoomToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(879)
inline void MSPpt::View::PutZoomToFit ( enum Office::MsoTriState ZoomToFit ) {
    HRESULT _hr = put_ZoomToFit(ZoomToFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(880)
inline HRESULT MSPpt::View::PasteSpecial ( enum PpPasteDataType DataType, enum Office::MsoTriState DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, enum Office::MsoTriState Link ) {
    HRESULT _hr = raw_PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(881)
inline MSPpt::PrintOptionsPtr MSPpt::View::GetPrintOptions ( ) {
    struct PrintOptions * _result = 0;
    HRESULT _hr = get_PrintOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintOptionsPtr(_result, false);
}

#pragma implementation_key(882)
inline HRESULT MSPpt::View::PrintOut ( int From, int To, _bstr_t PrintToFile, int Copies, enum Office::MsoTriState Collate ) {
    HRESULT _hr = raw_PrintOut(From, To, PrintToFile, Copies, Collate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TextRange wrapper method implementations
//

#pragma implementation_key(883)
inline MSPpt::_ApplicationPtr MSPpt::TextRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(884)
inline IDispatchPtr MSPpt::TextRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(885)
inline MSPpt::ActionSettingsPtr MSPpt::TextRange::GetActionSettings ( ) {
    struct ActionSettings * _result = 0;
    HRESULT _hr = get_ActionSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingsPtr(_result, false);
}

#pragma implementation_key(886)
inline long MSPpt::TextRange::GetStart ( ) {
    long _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(887)
inline long MSPpt::TextRange::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(888)
inline float MSPpt::TextRange::GetBoundLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(889)
inline float MSPpt::TextRange::GetBoundTop ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(890)
inline float MSPpt::TextRange::GetBoundWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(891)
inline float MSPpt::TextRange::GetBoundHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(892)
inline MSPpt::TextRangePtr MSPpt::TextRange::Paragraphs ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Paragraphs(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(893)
inline MSPpt::TextRangePtr MSPpt::TextRange::Sentences ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Sentences(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(894)
inline MSPpt::TextRangePtr MSPpt::TextRange::Words ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Words(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(895)
inline MSPpt::TextRangePtr MSPpt::TextRange::Characters ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(896)
inline MSPpt::TextRangePtr MSPpt::TextRange::Lines ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Lines(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(897)
inline MSPpt::TextRangePtr MSPpt::TextRange::Runs ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Runs(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(898)
inline MSPpt::TextRangePtr MSPpt::TextRange::TrimText ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_TrimText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(899)
inline _bstr_t MSPpt::TextRange::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(900)
inline void MSPpt::TextRange::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(901)
inline MSPpt::TextRangePtr MSPpt::TextRange::InsertAfter ( _bstr_t NewText ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertAfter(NewText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(902)
inline MSPpt::TextRangePtr MSPpt::TextRange::InsertBefore ( _bstr_t NewText ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertBefore(NewText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(903)
inline MSPpt::TextRangePtr MSPpt::TextRange::InsertDateTime ( enum PpDateTimeFormat DateTimeFormat, enum Office::MsoTriState InsertAsField ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertDateTime(DateTimeFormat, InsertAsField, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(904)
inline MSPpt::TextRangePtr MSPpt::TextRange::InsertSlideNumber ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertSlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(905)
inline MSPpt::TextRangePtr MSPpt::TextRange::InsertSymbol ( _bstr_t FontName, int CharNumber, enum Office::MsoTriState Unicode ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertSymbol(FontName, CharNumber, Unicode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(906)
inline MSPpt::FontPtr MSPpt::TextRange::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(907)
inline MSPpt::ParagraphFormatPtr MSPpt::TextRange::GetParagraphFormat ( ) {
    struct ParagraphFormat * _result = 0;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(908)
inline int MSPpt::TextRange::GetIndentLevel ( ) {
    int _result = 0;
    HRESULT _hr = get_IndentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(909)
inline void MSPpt::TextRange::PutIndentLevel ( int IndentLevel ) {
    HRESULT _hr = put_IndentLevel(IndentLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(910)
inline HRESULT MSPpt::TextRange::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(911)
inline HRESULT MSPpt::TextRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(912)
inline HRESULT MSPpt::TextRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(913)
inline HRESULT MSPpt::TextRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(914)
inline MSPpt::TextRangePtr MSPpt::TextRange::Paste ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(915)
inline HRESULT MSPpt::TextRange::ChangeCase ( enum PpChangeCase Type ) {
    HRESULT _hr = raw_ChangeCase(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(916)
inline HRESULT MSPpt::TextRange::AddPeriods ( ) {
    HRESULT _hr = raw_AddPeriods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(917)
inline HRESULT MSPpt::TextRange::RemovePeriods ( ) {
    HRESULT _hr = raw_RemovePeriods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(918)
inline MSPpt::TextRangePtr MSPpt::TextRange::Find ( _bstr_t FindWhat, int After, enum Office::MsoTriState MatchCase, enum Office::MsoTriState WholeWords ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Find(FindWhat, After, MatchCase, WholeWords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(919)
inline MSPpt::TextRangePtr MSPpt::TextRange::Replace ( _bstr_t FindWhat, _bstr_t ReplaceWhat, int After, enum Office::MsoTriState MatchCase, enum Office::MsoTriState WholeWords ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Replace(FindWhat, ReplaceWhat, After, MatchCase, WholeWords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(920)
inline HRESULT MSPpt::TextRange::RotatedBounds ( float * X1, float * Y1, float * X2, float * Y2, float * X3, float * Y3, float * x4, float * y4 ) {
    HRESULT _hr = raw_RotatedBounds(X1, Y1, X2, Y2, X3, Y3, x4, y4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(921)
inline enum Office::MsoLanguageID MSPpt::TextRange::GetLanguageID ( ) {
    enum Office::MsoLanguageID _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(922)
inline void MSPpt::TextRange::PutLanguageID ( enum Office::MsoLanguageID LanguageID ) {
    HRESULT _hr = put_LanguageID(LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(923)
inline HRESULT MSPpt::TextRange::RtlRun ( ) {
    HRESULT _hr = raw_RtlRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(924)
inline HRESULT MSPpt::TextRange::LtrRun ( ) {
    HRESULT _hr = raw_LtrRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(925)
inline MSPpt::TextRangePtr MSPpt::TextRange::PasteSpecial ( enum PpPasteDataType DataType, enum Office::MsoTriState DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, enum Office::MsoTriState Link ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

//
// interface TextFrame wrapper method implementations
//

#pragma implementation_key(926)
inline IDispatchPtr MSPpt::TextFrame::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(927)
inline long MSPpt::TextFrame::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(928)
inline IDispatchPtr MSPpt::TextFrame::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(929)
inline float MSPpt::TextFrame::GetMarginBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(930)
inline void MSPpt::TextFrame::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(931)
inline float MSPpt::TextFrame::GetMarginLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(932)
inline void MSPpt::TextFrame::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(933)
inline float MSPpt::TextFrame::GetMarginRight ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(934)
inline void MSPpt::TextFrame::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(935)
inline float MSPpt::TextFrame::GetMarginTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(936)
inline void MSPpt::TextFrame::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(937)
inline enum Office::MsoTextOrientation MSPpt::TextFrame::GetOrientation ( ) {
    enum Office::MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(938)
inline void MSPpt::TextFrame::PutOrientation ( enum Office::MsoTextOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(939)
inline enum Office::MsoTriState MSPpt::TextFrame::GetHasText ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(940)
inline MSPpt::TextRangePtr MSPpt::TextFrame::GetTextRange ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = get_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(941)
inline MSPpt::RulerPtr MSPpt::TextFrame::GetRuler ( ) {
    struct Ruler * _result = 0;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerPtr(_result, false);
}

#pragma implementation_key(942)
inline enum Office::MsoHorizontalAnchor MSPpt::TextFrame::GetHorizontalAnchor ( ) {
    enum Office::MsoHorizontalAnchor _result;
    HRESULT _hr = get_HorizontalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(943)
inline void MSPpt::TextFrame::PutHorizontalAnchor ( enum Office::MsoHorizontalAnchor HorizontalAnchor ) {
    HRESULT _hr = put_HorizontalAnchor(HorizontalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(944)
inline enum Office::MsoVerticalAnchor MSPpt::TextFrame::GetVerticalAnchor ( ) {
    enum Office::MsoVerticalAnchor _result;
    HRESULT _hr = get_VerticalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(945)
inline void MSPpt::TextFrame::PutVerticalAnchor ( enum Office::MsoVerticalAnchor VerticalAnchor ) {
    HRESULT _hr = put_VerticalAnchor(VerticalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(946)
inline enum MSPpt::PpAutoSize MSPpt::TextFrame::GetAutoSize ( ) {
    enum PpAutoSize _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(947)
inline void MSPpt::TextFrame::PutAutoSize ( enum PpAutoSize AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(948)
inline enum Office::MsoTriState MSPpt::TextFrame::GetWordWrap ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(949)
inline void MSPpt::TextFrame::PutWordWrap ( enum Office::MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(950)
inline HRESULT MSPpt::TextFrame::DeleteText ( ) {
    HRESULT _hr = raw_DeleteText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TextStyle wrapper method implementations
//

#pragma implementation_key(951)
inline MSPpt::_ApplicationPtr MSPpt::TextStyle::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(952)
inline IDispatchPtr MSPpt::TextStyle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(953)
inline MSPpt::RulerPtr MSPpt::TextStyle::GetRuler ( ) {
    struct Ruler * _result = 0;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerPtr(_result, false);
}

#pragma implementation_key(954)
inline MSPpt::TextFramePtr MSPpt::TextStyle::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(955)
inline MSPpt::TextStyleLevelsPtr MSPpt::TextStyle::GetLevels ( ) {
    struct TextStyleLevels * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStyleLevelsPtr(_result, false);
}

//
// interface TextStyles wrapper method implementations
//

#pragma implementation_key(956)
inline MSPpt::_ApplicationPtr MSPpt::TextStyles::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(957)
inline IDispatchPtr MSPpt::TextStyles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(958)
inline MSPpt::TextStylePtr MSPpt::TextStyles::Item ( enum PpTextStyleType Type ) {
    struct TextStyle * _result = 0;
    HRESULT _hr = raw_Item(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStylePtr(_result, false);
}

//
// interface _PowerRex wrapper method implementations
//

#pragma implementation_key(959)
inline HRESULT MSPpt::_PowerRex::OnAsfEncoderEvent ( const _variant_t & erorCode, const _variant_t & bstrErrorDesc ) {
    HRESULT _hr = raw_OnAsfEncoderEvent(erorCode, bstrErrorDesc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Comment wrapper method implementations
//

#pragma implementation_key(960)
inline MSPpt::_ApplicationPtr MSPpt::Comment::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(961)
inline IDispatchPtr MSPpt::Comment::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(962)
inline _bstr_t MSPpt::Comment::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(963)
inline _bstr_t MSPpt::Comment::GetAuthorInitials ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AuthorInitials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(964)
inline _bstr_t MSPpt::Comment::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(965)
inline DATE MSPpt::Comment::GetDateTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(966)
inline int MSPpt::Comment::GetAuthorIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_AuthorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(967)
inline float MSPpt::Comment::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(968)
inline float MSPpt::Comment::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(969)
inline HRESULT MSPpt::Comment::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Comments wrapper method implementations
//

#pragma implementation_key(970)
inline MSPpt::_ApplicationPtr MSPpt::Comments::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(971)
inline IDispatchPtr MSPpt::Comments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(972)
inline MSPpt::CommentPtr MSPpt::Comments::Item ( int Index ) {
    struct Comment * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

#pragma implementation_key(973)
inline MSPpt::CommentPtr MSPpt::Comments::Add ( float Left, float Top, _bstr_t Author, _bstr_t AuthorInitials, _bstr_t Text ) {
    struct Comment * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Author, AuthorInitials, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

//
// interface EffectParameters wrapper method implementations
//

#pragma implementation_key(974)
inline MSPpt::_ApplicationPtr MSPpt::EffectParameters::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(975)
inline IDispatchPtr MSPpt::EffectParameters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(976)
inline enum MSPpt::MsoAnimDirection MSPpt::EffectParameters::GetDirection ( ) {
    enum MsoAnimDirection _result;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(977)
inline void MSPpt::EffectParameters::PutDirection ( enum MsoAnimDirection Direction ) {
    HRESULT _hr = put_Direction(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(978)
inline float MSPpt::EffectParameters::GetAmount ( ) {
    float _result = 0;
    HRESULT _hr = get_Amount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(979)
inline void MSPpt::EffectParameters::PutAmount ( float Amount ) {
    HRESULT _hr = put_Amount(Amount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(980)
inline float MSPpt::EffectParameters::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(981)
inline void MSPpt::EffectParameters::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(982)
inline MSPpt::ColorFormatPtr MSPpt::EffectParameters::GetColor2 ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(983)
inline enum Office::MsoTriState MSPpt::EffectParameters::GetRelative ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Relative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(984)
inline void MSPpt::EffectParameters::PutRelative ( enum Office::MsoTriState Relative ) {
    HRESULT _hr = put_Relative(Relative);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(985)
inline _bstr_t MSPpt::EffectParameters::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(986)
inline void MSPpt::EffectParameters::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface EffectInformation wrapper method implementations
//

#pragma implementation_key(987)
inline MSPpt::_ApplicationPtr MSPpt::EffectInformation::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(988)
inline IDispatchPtr MSPpt::EffectInformation::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(989)
inline enum MSPpt::MsoAnimAfterEffect MSPpt::EffectInformation::GetAfterEffect ( ) {
    enum MsoAnimAfterEffect _result;
    HRESULT _hr = get_AfterEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(990)
inline enum Office::MsoTriState MSPpt::EffectInformation::GetAnimateBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(991)
inline enum Office::MsoTriState MSPpt::EffectInformation::GetAnimateTextInReverse ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateTextInReverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(992)
inline enum MSPpt::MsoAnimateByLevel MSPpt::EffectInformation::GetBuildByLevelEffect ( ) {
    enum MsoAnimateByLevel _result;
    HRESULT _hr = get_BuildByLevelEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(993)
inline MSPpt::ColorFormatPtr MSPpt::EffectInformation::GetDim ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Dim(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(994)
inline MSPpt::PlaySettingsPtr MSPpt::EffectInformation::GetPlaySettings ( ) {
    struct PlaySettings * _result = 0;
    HRESULT _hr = get_PlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaySettingsPtr(_result, false);
}

#pragma implementation_key(995)
inline MSPpt::SoundEffectPtr MSPpt::EffectInformation::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(996)
inline enum MSPpt::MsoAnimTextUnitEffect MSPpt::EffectInformation::GetTextUnitEffect ( ) {
    enum MsoAnimTextUnitEffect _result;
    HRESULT _hr = get_TextUnitEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface MotionEffect wrapper method implementations
//

#pragma implementation_key(997)
inline MSPpt::_ApplicationPtr MSPpt::MotionEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(998)
inline IDispatchPtr MSPpt::MotionEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(999)
inline float MSPpt::MotionEffect::GetByX ( ) {
    float _result = 0;
    HRESULT _hr = get_ByX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1000)
inline void MSPpt::MotionEffect::PutByX ( float ByX ) {
    HRESULT _hr = put_ByX(ByX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1001)
inline float MSPpt::MotionEffect::GetByY ( ) {
    float _result = 0;
    HRESULT _hr = get_ByY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1002)
inline void MSPpt::MotionEffect::PutByY ( float ByY ) {
    HRESULT _hr = put_ByY(ByY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1003)
inline float MSPpt::MotionEffect::GetFromX ( ) {
    float _result = 0;
    HRESULT _hr = get_FromX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1004)
inline void MSPpt::MotionEffect::PutFromX ( float FromX ) {
    HRESULT _hr = put_FromX(FromX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1005)
inline float MSPpt::MotionEffect::GetFromY ( ) {
    float _result = 0;
    HRESULT _hr = get_FromY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1006)
inline void MSPpt::MotionEffect::PutFromY ( float FromY ) {
    HRESULT _hr = put_FromY(FromY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1007)
inline float MSPpt::MotionEffect::GetToX ( ) {
    float _result = 0;
    HRESULT _hr = get_ToX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1008)
inline void MSPpt::MotionEffect::PutToX ( float ToX ) {
    HRESULT _hr = put_ToX(ToX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1009)
inline float MSPpt::MotionEffect::GetToY ( ) {
    float _result = 0;
    HRESULT _hr = get_ToY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1010)
inline void MSPpt::MotionEffect::PutToY ( float ToY ) {
    HRESULT _hr = put_ToY(ToY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1011)
inline _bstr_t MSPpt::MotionEffect::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1012)
inline void MSPpt::MotionEffect::PutPath ( _bstr_t Path ) {
    HRESULT _hr = put_Path(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorEffect wrapper method implementations
//

#pragma implementation_key(1013)
inline MSPpt::_ApplicationPtr MSPpt::ColorEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1014)
inline IDispatchPtr MSPpt::ColorEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1015)
inline MSPpt::ColorFormatPtr MSPpt::ColorEffect::GetBy ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_By(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1016)
inline MSPpt::ColorFormatPtr MSPpt::ColorEffect::GetFrom ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1017)
inline MSPpt::ColorFormatPtr MSPpt::ColorEffect::GetTo ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

//
// interface ScaleEffect wrapper method implementations
//

#pragma implementation_key(1018)
inline MSPpt::_ApplicationPtr MSPpt::ScaleEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1019)
inline IDispatchPtr MSPpt::ScaleEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1020)
inline float MSPpt::ScaleEffect::GetByX ( ) {
    float _result = 0;
    HRESULT _hr = get_ByX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1021)
inline void MSPpt::ScaleEffect::PutByX ( float ByX ) {
    HRESULT _hr = put_ByX(ByX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1022)
inline float MSPpt::ScaleEffect::GetByY ( ) {
    float _result = 0;
    HRESULT _hr = get_ByY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1023)
inline void MSPpt::ScaleEffect::PutByY ( float ByY ) {
    HRESULT _hr = put_ByY(ByY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1024)
inline float MSPpt::ScaleEffect::GetFromX ( ) {
    float _result = 0;
    HRESULT _hr = get_FromX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1025)
inline void MSPpt::ScaleEffect::PutFromX ( float FromX ) {
    HRESULT _hr = put_FromX(FromX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1026)
inline float MSPpt::ScaleEffect::GetFromY ( ) {
    float _result = 0;
    HRESULT _hr = get_FromY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1027)
inline void MSPpt::ScaleEffect::PutFromY ( float FromY ) {
    HRESULT _hr = put_FromY(FromY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1028)
inline float MSPpt::ScaleEffect::GetToX ( ) {
    float _result = 0;
    HRESULT _hr = get_ToX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1029)
inline void MSPpt::ScaleEffect::PutToX ( float ToX ) {
    HRESULT _hr = put_ToX(ToX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1030)
inline float MSPpt::ScaleEffect::GetToY ( ) {
    float _result = 0;
    HRESULT _hr = get_ToY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1031)
inline void MSPpt::ScaleEffect::PutToY ( float ToY ) {
    HRESULT _hr = put_ToY(ToY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RotationEffect wrapper method implementations
//

#pragma implementation_key(1032)
inline MSPpt::_ApplicationPtr MSPpt::RotationEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1033)
inline IDispatchPtr MSPpt::RotationEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1034)
inline float MSPpt::RotationEffect::GetBy ( ) {
    float _result = 0;
    HRESULT _hr = get_By(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1035)
inline void MSPpt::RotationEffect::PutBy ( float By ) {
    HRESULT _hr = put_By(By);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1036)
inline float MSPpt::RotationEffect::GetFrom ( ) {
    float _result = 0;
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1037)
inline void MSPpt::RotationEffect::PutFrom ( float From ) {
    HRESULT _hr = put_From(From);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1038)
inline float MSPpt::RotationEffect::GetTo ( ) {
    float _result = 0;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1039)
inline void MSPpt::RotationEffect::PutTo ( float To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationPoint wrapper method implementations
//

#pragma implementation_key(1040)
inline MSPpt::_ApplicationPtr MSPpt::AnimationPoint::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1041)
inline IDispatchPtr MSPpt::AnimationPoint::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1042)
inline HRESULT MSPpt::AnimationPoint::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1043)
inline float MSPpt::AnimationPoint::GetTime ( ) {
    float _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1044)
inline void MSPpt::AnimationPoint::PutTime ( float Time ) {
    HRESULT _hr = put_Time(Time);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1045)
inline _variant_t MSPpt::AnimationPoint::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1046)
inline void MSPpt::AnimationPoint::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1047)
inline _bstr_t MSPpt::AnimationPoint::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1048)
inline void MSPpt::AnimationPoint::PutFormula ( _bstr_t Formula ) {
    HRESULT _hr = put_Formula(Formula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationPoints wrapper method implementations
//

#pragma implementation_key(1049)
inline MSPpt::_ApplicationPtr MSPpt::AnimationPoints::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1050)
inline IDispatchPtr MSPpt::AnimationPoints::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1051)
inline MSPpt::AnimationPointPtr MSPpt::AnimationPoints::Item ( int Index ) {
    struct AnimationPoint * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationPointPtr(_result, false);
}

#pragma implementation_key(1052)
inline MSPpt::AnimationPointPtr MSPpt::AnimationPoints::Add ( int Index ) {
    struct AnimationPoint * _result = 0;
    HRESULT _hr = raw_Add(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationPointPtr(_result, false);
}

#pragma implementation_key(1053)
inline enum Office::MsoTriState MSPpt::AnimationPoints::GetSmooth ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1054)
inline void MSPpt::AnimationPoints::PutSmooth ( enum Office::MsoTriState Smooth ) {
    HRESULT _hr = put_Smooth(Smooth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PropertyEffect wrapper method implementations
//

#pragma implementation_key(1055)
inline MSPpt::_ApplicationPtr MSPpt::PropertyEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1056)
inline IDispatchPtr MSPpt::PropertyEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1057)
inline enum MSPpt::MsoAnimProperty MSPpt::PropertyEffect::GetProperty ( ) {
    enum MsoAnimProperty _result;
    HRESULT _hr = get_Property(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1058)
inline void MSPpt::PropertyEffect::PutProperty ( enum MsoAnimProperty Property ) {
    HRESULT _hr = put_Property(Property);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1059)
inline MSPpt::AnimationPointsPtr MSPpt::PropertyEffect::GetPoints ( ) {
    struct AnimationPoints * _result = 0;
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationPointsPtr(_result, false);
}

#pragma implementation_key(1060)
inline _variant_t MSPpt::PropertyEffect::GetFrom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1061)
inline void MSPpt::PropertyEffect::PutFrom ( const _variant_t & From ) {
    HRESULT _hr = put_From(From);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1062)
inline _variant_t MSPpt::PropertyEffect::GetTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1063)
inline void MSPpt::PropertyEffect::PutTo ( const _variant_t & To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AutoCorrect wrapper method implementations
//

#pragma implementation_key(1064)
inline VARIANT_BOOL MSPpt::AutoCorrect::GetDisplayAutoCorrectOptions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayAutoCorrectOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1065)
inline void MSPpt::AutoCorrect::PutDisplayAutoCorrectOptions ( VARIANT_BOOL DisplayAutoCorrectOptions ) {
    HRESULT _hr = put_DisplayAutoCorrectOptions(DisplayAutoCorrectOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1066)
inline VARIANT_BOOL MSPpt::AutoCorrect::GetDisplayAutoLayoutOptions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayAutoLayoutOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1067)
inline void MSPpt::AutoCorrect::PutDisplayAutoLayoutOptions ( VARIANT_BOOL DisplayAutoLayoutOptions ) {
    HRESULT _hr = put_DisplayAutoLayoutOptions(DisplayAutoLayoutOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Options wrapper method implementations
//

#pragma implementation_key(1068)
inline enum Office::MsoTriState MSPpt::Options::GetDisplayPasteOptions ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayPasteOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1069)
inline void MSPpt::Options::PutDisplayPasteOptions ( enum Office::MsoTriState DisplayPasteOptions ) {
    HRESULT _hr = put_DisplayPasteOptions(DisplayPasteOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1070)
inline enum Office::MsoTriState MSPpt::Options::GetDoNotPromptForConvert ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DoNotPromptForConvert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1071)
inline void MSPpt::Options::PutDoNotPromptForConvert ( enum Office::MsoTriState DoNotPromptForConvert ) {
    HRESULT _hr = put_DoNotPromptForConvert(DoNotPromptForConvert);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CommandEffect wrapper method implementations
//

#pragma implementation_key(1072)
inline MSPpt::_ApplicationPtr MSPpt::CommandEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1073)
inline IDispatchPtr MSPpt::CommandEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1074)
inline enum MSPpt::MsoAnimCommandType MSPpt::CommandEffect::GetType ( ) {
    enum MsoAnimCommandType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1075)
inline void MSPpt::CommandEffect::PutType ( enum MsoAnimCommandType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1076)
inline _bstr_t MSPpt::CommandEffect::GetCommand ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Command(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1077)
inline void MSPpt::CommandEffect::PutCommand ( _bstr_t Command ) {
    HRESULT _hr = put_Command(Command);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FilterEffect wrapper method implementations
//

#pragma implementation_key(1078)
inline MSPpt::_ApplicationPtr MSPpt::FilterEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1079)
inline IDispatchPtr MSPpt::FilterEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1080)
inline enum MSPpt::MsoAnimFilterEffectType MSPpt::FilterEffect::GetType ( ) {
    enum MsoAnimFilterEffectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1081)
inline void MSPpt::FilterEffect::PutType ( enum MsoAnimFilterEffectType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1082)
inline enum MSPpt::MsoAnimFilterEffectSubtype MSPpt::FilterEffect::GetSubtype ( ) {
    enum MsoAnimFilterEffectSubtype _result;
    HRESULT _hr = get_Subtype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1083)
inline void MSPpt::FilterEffect::PutSubtype ( enum MsoAnimFilterEffectSubtype Subtype ) {
    HRESULT _hr = put_Subtype(Subtype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1084)
inline enum Office::MsoTriState MSPpt::FilterEffect::GetReveal ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Reveal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1085)
inline void MSPpt::FilterEffect::PutReveal ( enum Office::MsoTriState Reveal ) {
    HRESULT _hr = put_Reveal(Reveal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SetEffect wrapper method implementations
//

#pragma implementation_key(1086)
inline MSPpt::_ApplicationPtr MSPpt::SetEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1087)
inline IDispatchPtr MSPpt::SetEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1088)
inline enum MSPpt::MsoAnimProperty MSPpt::SetEffect::GetProperty ( ) {
    enum MsoAnimProperty _result;
    HRESULT _hr = get_Property(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1089)
inline void MSPpt::SetEffect::PutProperty ( enum MsoAnimProperty Property ) {
    HRESULT _hr = put_Property(Property);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1090)
inline _variant_t MSPpt::SetEffect::GetTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1091)
inline void MSPpt::SetEffect::PutTo ( const _variant_t & To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TableStyle wrapper method implementations
//

#pragma implementation_key(1092)
inline _bstr_t MSPpt::TableStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1093)
inline _bstr_t MSPpt::TableStyle::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface CustomerData wrapper method implementations
//

#pragma implementation_key(1094)
inline MSPpt::_ApplicationPtr MSPpt::CustomerData::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1095)
inline IDispatchPtr MSPpt::CustomerData::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1096)
inline Office::_CustomXMLPartPtr MSPpt::CustomerData::Item ( _bstr_t Id ) {
    struct Office::_CustomXMLPart * _result = 0;
    HRESULT _hr = raw_Item(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CustomXMLPartPtr(_result, false);
}

#pragma implementation_key(1097)
inline Office::_CustomXMLPartPtr MSPpt::CustomerData::Add ( ) {
    struct Office::_CustomXMLPart * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CustomXMLPartPtr(_result, false);
}

#pragma implementation_key(1098)
inline HRESULT MSPpt::CustomerData::Delete ( _bstr_t Id ) {
    HRESULT _hr = raw_Delete(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Research wrapper method implementations
//

#pragma implementation_key(1099)
inline MSPpt::_ApplicationPtr MSPpt::Research::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1100)
inline IDispatchPtr MSPpt::Research::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1101)
inline HRESULT MSPpt::Research::Query ( _bstr_t ServiceID, VARIANT * QueryString, VARIANT * QueryLanguage, VARIANT_BOOL UseSelection, VARIANT_BOOL LaunchQuery ) {
    HRESULT _hr = raw_Query(ServiceID, QueryString, QueryLanguage, UseSelection, LaunchQuery);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1102)
inline HRESULT MSPpt::Research::SetLanguagePair ( VARIANT * Language1, VARIANT * Language2 ) {
    HRESULT _hr = raw_SetLanguagePair(Language1, Language2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1103)
inline VARIANT_BOOL MSPpt::Research::IsResearchService ( _bstr_t ServiceID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsResearchService(ServiceID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface TableBackground wrapper method implementations
//

#pragma implementation_key(1104)
inline MSPpt::FillFormatPtr MSPpt::TableBackground::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(1105)
inline MSPpt::PictureFormatPtr MSPpt::TableBackground::GetPicture ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(1106)
inline Office::ReflectionFormatPtr MSPpt::TableBackground::GetReflection ( ) {
    struct Office::ReflectionFormat * _result = 0;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ReflectionFormatPtr(_result, false);
}

#pragma implementation_key(1107)
inline MSPpt::ShadowFormatPtr MSPpt::TableBackground::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

//
// interface TextFrame2 wrapper method implementations
//

#pragma implementation_key(1108)
inline IDispatchPtr MSPpt::TextFrame2::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1109)
inline long MSPpt::TextFrame2::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1110)
inline IDispatchPtr MSPpt::TextFrame2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1111)
inline float MSPpt::TextFrame2::GetMarginBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1112)
inline void MSPpt::TextFrame2::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1113)
inline float MSPpt::TextFrame2::GetMarginLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1114)
inline void MSPpt::TextFrame2::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1115)
inline float MSPpt::TextFrame2::GetMarginRight ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1116)
inline void MSPpt::TextFrame2::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1117)
inline float MSPpt::TextFrame2::GetMarginTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1118)
inline void MSPpt::TextFrame2::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1119)
inline enum Office::MsoTextOrientation MSPpt::TextFrame2::GetOrientation ( ) {
    enum Office::MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1120)
inline void MSPpt::TextFrame2::PutOrientation ( enum Office::MsoTextOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1121)
inline enum Office::MsoHorizontalAnchor MSPpt::TextFrame2::GetHorizontalAnchor ( ) {
    enum Office::MsoHorizontalAnchor _result;
    HRESULT _hr = get_HorizontalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1122)
inline void MSPpt::TextFrame2::PutHorizontalAnchor ( enum Office::MsoHorizontalAnchor HorizontalAnchor ) {
    HRESULT _hr = put_HorizontalAnchor(HorizontalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1123)
inline enum Office::MsoVerticalAnchor MSPpt::TextFrame2::GetVerticalAnchor ( ) {
    enum Office::MsoVerticalAnchor _result;
    HRESULT _hr = get_VerticalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1124)
inline void MSPpt::TextFrame2::PutVerticalAnchor ( enum Office::MsoVerticalAnchor VerticalAnchor ) {
    HRESULT _hr = put_VerticalAnchor(VerticalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1125)
inline enum Office::MsoPathFormat MSPpt::TextFrame2::GetPathFormat ( ) {
    enum Office::MsoPathFormat _result;
    HRESULT _hr = get_PathFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1126)
inline void MSPpt::TextFrame2::PutPathFormat ( enum Office::MsoPathFormat PathFormat ) {
    HRESULT _hr = put_PathFormat(PathFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1127)
inline enum Office::MsoWarpFormat MSPpt::TextFrame2::GetWarpFormat ( ) {
    enum Office::MsoWarpFormat _result;
    HRESULT _hr = get_WarpFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1128)
inline void MSPpt::TextFrame2::PutWarpFormat ( enum Office::MsoWarpFormat WarpFormat ) {
    HRESULT _hr = put_WarpFormat(WarpFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1129)
inline enum Office::MsoPresetTextEffect MSPpt::TextFrame2::GetWordArtFormat ( ) {
    enum Office::MsoPresetTextEffect _result;
    HRESULT _hr = get_WordArtFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1130)
inline void MSPpt::TextFrame2::PutWordArtFormat ( enum Office::MsoPresetTextEffect WordArtFormat ) {
    HRESULT _hr = put_WordArtFormat(WordArtFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1131)
inline enum Office::MsoTriState MSPpt::TextFrame2::GetWordWrap ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1132)
inline void MSPpt::TextFrame2::PutWordWrap ( enum Office::MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1133)
inline enum Office::MsoAutoSize MSPpt::TextFrame2::GetAutoSize ( ) {
    enum Office::MsoAutoSize _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1134)
inline void MSPpt::TextFrame2::PutAutoSize ( enum Office::MsoAutoSize AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1135)
inline MSPpt::ThreeDFormatPtr MSPpt::TextFrame2::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(1136)
inline enum Office::MsoTriState MSPpt::TextFrame2::GetHasText ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1137)
inline Office::TextRange2Ptr MSPpt::TextFrame2::GetTextRange ( ) {
    struct Office::TextRange2 * _result = 0;
    HRESULT _hr = get_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::TextRange2Ptr(_result, false);
}

#pragma implementation_key(1138)
inline Office::TextColumn2Ptr MSPpt::TextFrame2::GetColumn ( ) {
    struct Office::TextColumn2 * _result = 0;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::TextColumn2Ptr(_result, false);
}

#pragma implementation_key(1139)
inline Office::Ruler2Ptr MSPpt::TextFrame2::GetRuler ( ) {
    struct Office::Ruler2 * _result = 0;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::Ruler2Ptr(_result, false);
}

#pragma implementation_key(1140)
inline HRESULT MSPpt::TextFrame2::DeleteText ( ) {
    HRESULT _hr = raw_DeleteText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Application wrapper method implementations
//

#pragma implementation_key(1141)
inline MSPpt::PresentationsPtr MSPpt::_Application::GetPresentations ( ) {
    struct Presentations * _result = 0;
    HRESULT _hr = get_Presentations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PresentationsPtr(_result, false);
}

#pragma implementation_key(1142)
inline MSPpt::DocumentWindowsPtr MSPpt::_Application::GetWindows ( ) {
    struct DocumentWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowsPtr(_result, false);
}

#pragma implementation_key(1143)
inline IUnknownPtr MSPpt::_Application::GetDialogs ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Dialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1144)
inline MSPpt::DocumentWindowPtr MSPpt::_Application::GetActiveWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(1145)
inline MSPpt::_PresentationPtr MSPpt::_Application::GetActivePresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_ActivePresentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(1146)
inline MSPpt::SlideShowWindowsPtr MSPpt::_Application::GetSlideShowWindows ( ) {
    struct SlideShowWindows * _result = 0;
    HRESULT _hr = get_SlideShowWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowsPtr(_result, false);
}

#pragma implementation_key(1147)
inline Office::_CommandBarsPtr MSPpt::_Application::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(1148)
inline _bstr_t MSPpt::_Application::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1149)
inline _bstr_t MSPpt::_Application::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1150)
inline _bstr_t MSPpt::_Application::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1151)
inline void MSPpt::_Application::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1152)
inline Office::AssistantPtr MSPpt::_Application::GetAssistant ( ) {
    struct Office::Assistant * _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

#pragma implementation_key(1153)
inline Office::FileSearchPtr MSPpt::_Application::GetFileSearch ( ) {
    struct Office::FileSearch * _result = 0;
    HRESULT _hr = get_FileSearch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::FileSearchPtr(_result, false);
}

#pragma implementation_key(1154)
inline Office::IFindPtr MSPpt::_Application::GetFileFind ( ) {
    struct Office::IFind * _result = 0;
    HRESULT _hr = get_FileFind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IFindPtr(_result, false);
}

#pragma implementation_key(1155)
inline _bstr_t MSPpt::_Application::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1156)
inline _bstr_t MSPpt::_Application::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1157)
inline _bstr_t MSPpt::_Application::GetOperatingSystem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OperatingSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1158)
inline _bstr_t MSPpt::_Application::GetActivePrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1159)
inline long MSPpt::_Application::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1160)
inline MSPpt::AddInsPtr MSPpt::_Application::GetAddIns ( ) {
    struct AddIns * _result = 0;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

inline VBIDE::VBEPtr _Application::GetVBE ( ) {
    struct VBIDE::VBE * _result = 0;
    HRESULT _hr = get_VBE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBIDE::VBEPtr(_result, false);
}

inline HRESULT _Application::Help ( _bstr_t HelpFile, int ContextID ) {
    HRESULT _hr = raw_Help(HelpFile, ContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t _Application::Run ( _bstr_t MacroName, SAFEARRAY * * safeArrayOfParams ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Run(MacroName, safeArrayOfParams, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IUnknownPtr _Application::PPFileDialog ( enum PpFileDialogType Type ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_PPFileDialog(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT _Application::LaunchSpelling ( struct DocumentWindow * pWindow ) {
    HRESULT _hr = raw_LaunchSpelling(pWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float _Application::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float _Application::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float _Application::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float _Application::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum PpWindowState _Application::GetWindowState ( ) {
    enum PpWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutWindowState ( enum PpWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState _Application::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Application::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState _Application::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Application::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Office::AnswerWizardPtr _Application::GetAnswerWizard ( ) {
    struct Office::AnswerWizard * _result = 0;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AnswerWizardPtr(_result, false);
}

inline Office::COMAddInsPtr _Application::GetCOMAddIns ( ) {
    struct Office::COMAddIns * _result = 0;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::COMAddInsPtr(_result, false);
}

inline _bstr_t _Application::GetProductCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProductCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DefaultWebOptionsPtr _Application::GetDefaultWebOptions ( ) {
    struct DefaultWebOptions * _result = 0;
    HRESULT _hr = get_DefaultWebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DefaultWebOptionsPtr(_result, false);
}

inline Office::LanguageSettingsPtr _Application::GetLanguageSettings ( ) {
    struct Office::LanguageSettings * _result = 0;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::LanguageSettingsPtr(_result, false);
}

inline Office::MsoDebugOptionsPtr _Application::GetMsoDebugOptions ( ) {
    struct Office::MsoDebugOptions * _result = 0;
    HRESULT _hr = get_MsoDebugOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::MsoDebugOptionsPtr(_result, false);
}

inline enum Office::MsoTriState _Application::GetShowWindowsInTaskbar ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowWindowsInTaskbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutShowWindowsInTaskbar ( enum Office::MsoTriState ShowWindowsInTaskbar ) {
    HRESULT _hr = put_ShowWindowsInTaskbar(ShowWindowsInTaskbar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUnknownPtr _Application::GetMarker ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline enum Office::MsoFeatureInstall _Application::GetFeatureInstall ( ) {
    enum Office::MsoFeatureInstall _result;
    HRESULT _hr = get_FeatureInstall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutFeatureInstall ( enum Office::MsoFeatureInstall FeatureInstall ) {
    HRESULT _hr = put_FeatureInstall(FeatureInstall);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Application::GetOptionFlag ( long Option, VARIANT_BOOL Persist ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetOptionFlag(Option, Persist, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Application::SetOptionFlag ( long Option, VARIANT_BOOL State, VARIANT_BOOL Persist ) {
    HRESULT _hr = raw_SetOptionFlag(Option, State, Persist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Office::FileDialogPtr _Application::GetFileDialog ( enum Office::MsoFileDialogType Type ) {
    struct Office::FileDialog * _result = 0;
    HRESULT _hr = get_FileDialog(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::FileDialogPtr(_result, false);
}

inline enum Office::MsoTriState _Application::GetDisplayGridLines ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayGridLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayGridLines ( enum Office::MsoTriState DisplayGridLines ) {
    HRESULT _hr = put_DisplayGridLines(DisplayGridLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoAutomationSecurity _Application::GetAutomationSecurity ( ) {
    enum Office::MsoAutomationSecurity _result;
    HRESULT _hr = get_AutomationSecurity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutAutomationSecurity ( enum Office::MsoAutomationSecurity AutomationSecurity ) {
    HRESULT _hr = put_AutomationSecurity(AutomationSecurity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::NewFilePtr _Application::GetNewPresentation ( ) {
    struct Office::NewFile * _result = 0;
    HRESULT _hr = get_NewPresentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::NewFilePtr(_result, false);
}

inline enum PpAlertLevel _Application::GetDisplayAlerts ( ) {
    enum PpAlertLevel _result;
    HRESULT _hr = get_DisplayAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayAlerts ( enum PpAlertLevel DisplayAlerts ) {
    HRESULT _hr = put_DisplayAlerts(DisplayAlerts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState _Application::GetShowStartupDialog ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowStartupDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutShowStartupDialog ( enum Office::MsoTriState ShowStartupDialog ) {
    HRESULT _hr = put_ShowStartupDialog(ShowStartupDialog);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Application::SetPerfMarker ( int Marker ) {
    HRESULT _hr = raw_SetPerfMarker(Marker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline AutoCorrectPtr _Application::GetAutoCorrect ( ) {
    struct AutoCorrect * _result = 0;
    HRESULT _hr = get_AutoCorrect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectPtr(_result, false);
}

inline OptionsPtr _Application::GetOptions ( ) {
    struct Options * _result = 0;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OptionsPtr(_result, false);
}

inline HRESULT _Application::LaunchPublishSlidesDialog ( _bstr_t SlideLibraryUrl ) {
    HRESULT _hr = raw_LaunchPublishSlidesDialog(SlideLibraryUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Application::LaunchSendToPPTDialog ( VARIANT * SlideUrls ) {
    HRESULT _hr = raw_LaunchSendToPPTDialog(SlideUrls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Application::GetDisplayDocumentInformationPanel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayDocumentInformationPanel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Application::PutDisplayDocumentInformationPanel ( VARIANT_BOOL DisplayDocumentInformationPanel ) {
    HRESULT _hr = put_DisplayDocumentInformationPanel(DisplayDocumentInformationPanel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::IAssistancePtr _Application::GetAssistance ( ) {
    struct Office::IAssistance * _result = 0;
    HRESULT _hr = get_Assistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IAssistancePtr(_result, false);
}

inline long _Application::GetActiveEncryptionSession ( ) {
    long _result = 0;
    HRESULT _hr = get_ActiveEncryptionSession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _Global wrapper method implementations
//

inline _PresentationPtr _Global::GetActivePresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_ActivePresentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

inline DocumentWindowPtr _Global::GetActiveWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

inline AddInsPtr _Global::GetAddIns ( ) {
    struct AddIns * _result = 0;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

inline _ApplicationPtr _Global::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline Office::AssistantPtr _Global::GetAssistant ( ) {
    struct Office::Assistant * _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

inline IUnknownPtr _Global::GetDialogs ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Dialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline PresentationsPtr _Global::GetPresentations ( ) {
    struct Presentations * _result = 0;
    HRESULT _hr = get_Presentations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PresentationsPtr(_result, false);
}

inline SlideShowWindowsPtr _Global::GetSlideShowWindows ( ) {
    struct SlideShowWindows * _result = 0;
    HRESULT _hr = get_SlideShowWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowsPtr(_result, false);
}

inline DocumentWindowsPtr _Global::GetWindows ( ) {
    struct DocumentWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowsPtr(_result, false);
}

inline Office::_CommandBarsPtr _Global::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

inline Office::AnswerWizardPtr _Global::GetAnswerWizard ( ) {
    struct Office::AnswerWizard * _result = 0;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AnswerWizardPtr(_result, false);
}

//
// interface Selection wrapper method implementations
//

inline _ApplicationPtr Selection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Selection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT Selection::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Selection::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Selection::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Selection::Unselect ( ) {
    HRESULT _hr = raw_Unselect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum PpSelectionType Selection::GetType ( ) {
    enum PpSelectionType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SlideRangePtr Selection::GetSlideRange ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = get_SlideRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

inline ShapeRangePtr Selection::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline TextRangePtr Selection::GetTextRange ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = get_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

inline ShapeRangePtr Selection::GetChildShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ChildShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline VARIANT_BOOL Selection::GetHasChildShapeRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasChildShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface DocumentWindow wrapper method implementations
//

inline _ApplicationPtr DocumentWindow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr DocumentWindow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline SelectionPtr DocumentWindow::GetSelection ( ) {
    struct Selection * _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SelectionPtr(_result, false);
}

inline ViewPtr DocumentWindow::GetView ( ) {
    struct View * _result = 0;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

inline _PresentationPtr DocumentWindow::GetPresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_Presentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

inline enum PpViewType DocumentWindow::GetViewType ( ) {
    enum PpViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DocumentWindow::PutViewType ( enum PpViewType ViewType ) {
    HRESULT _hr = put_ViewType(ViewType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState DocumentWindow::GetBlackAndWhite ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_BlackAndWhite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DocumentWindow::PutBlackAndWhite ( enum Office::MsoTriState BlackAndWhite ) {
    HRESULT _hr = put_BlackAndWhite(BlackAndWhite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState DocumentWindow::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum PpWindowState DocumentWindow::GetWindowState ( ) {
    enum PpWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DocumentWindow::PutWindowState ( enum PpWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t DocumentWindow::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline float DocumentWindow::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DocumentWindow::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float DocumentWindow::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DocumentWindow::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float DocumentWindow::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DocumentWindow::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float DocumentWindow::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DocumentWindow::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT DocumentWindow::FitToPage ( ) {
    HRESULT _hr = raw_FitToPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT DocumentWindow::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT DocumentWindow::LargeScroll ( int Down, int Up, int ToRight, int ToLeft ) {
    HRESULT _hr = raw_LargeScroll(Down, Up, ToRight, ToLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT DocumentWindow::SmallScroll ( int Down, int Up, int ToRight, int ToLeft ) {
    HRESULT _hr = raw_SmallScroll(Down, Up, ToRight, ToLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline DocumentWindowPtr DocumentWindow::NewWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

inline HRESULT DocumentWindow::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long DocumentWindow::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline PanePtr DocumentWindow::GetActivePane ( ) {
    struct Pane * _result = 0;
    HRESULT _hr = get_ActivePane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

inline PanesPtr DocumentWindow::GetPanes ( ) {
    struct Panes * _result = 0;
    HRESULT _hr = get_Panes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanesPtr(_result, false);
}

inline long DocumentWindow::GetSplitVertical ( ) {
    long _result = 0;
    HRESULT _hr = get_SplitVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DocumentWindow::PutSplitVertical ( long SplitVertical ) {
    HRESULT _hr = put_SplitVertical(SplitVertical);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long DocumentWindow::GetSplitHorizontal ( ) {
    long _result = 0;
    HRESULT _hr = get_SplitHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DocumentWindow::PutSplitHorizontal ( long SplitHorizontal ) {
    HRESULT _hr = put_SplitHorizontal(SplitHorizontal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr DocumentWindow::RangeFromPoint ( int X, int Y ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_RangeFromPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline int DocumentWindow::PointsToScreenPixelsX ( float Points ) {
    int _result = 0;
    HRESULT _hr = raw_PointsToScreenPixelsX(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int DocumentWindow::PointsToScreenPixelsY ( float Points ) {
    int _result = 0;
    HRESULT _hr = raw_PointsToScreenPixelsY(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT DocumentWindow::ScrollIntoView ( float Left, float Top, float Width, float Height, enum Office::MsoTriState Start ) {
    HRESULT _hr = raw_ScrollIntoView(Left, Top, Width, Height, Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DocumentWindows wrapper method implementations
//

inline _ApplicationPtr DocumentWindows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr DocumentWindows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline DocumentWindowPtr DocumentWindows::Item ( int Index ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

inline HRESULT DocumentWindows::Arrange ( enum PpArrangeStyle arrangeStyle ) {
    HRESULT _hr = raw_Arrange(arrangeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Slides wrapper method implementations
//

inline _ApplicationPtr Slides::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Slides::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _SlidePtr Slides::Item ( const _variant_t & Index ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

inline _SlidePtr Slides::FindBySlideID ( long SlideID ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_FindBySlideID(SlideID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

inline _SlidePtr Slides::Add ( int Index, enum PpSlideLayout Layout ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_Add(Index, Layout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

inline int Slides::InsertFromFile ( _bstr_t FileName, int Index, int SlideStart, int SlideEnd ) {
    int _result = 0;
    HRESULT _hr = raw_InsertFromFile(FileName, Index, SlideStart, SlideEnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SlideRangePtr Slides::Range ( const _variant_t & Index ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

inline SlideRangePtr Slides::Paste ( int Index ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Paste(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

inline _SlidePtr Slides::AddSlide ( int Index, struct CustomLayout * pCustomLayout ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_AddSlide(Index, pCustomLayout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

//
// interface _Slide wrapper method implementations
//

inline _ApplicationPtr _Slide::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr _Slide::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ShapesPtr _Slide::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

inline HeadersFootersPtr _Slide::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

inline SlideShowTransitionPtr _Slide::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

inline ColorSchemePtr _Slide::GetColorScheme ( ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

inline void _Slide::PutColorScheme ( struct ColorScheme * ColorScheme ) {
    HRESULT _hr = put_ColorScheme(ColorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapeRangePtr _Slide::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t _Slide::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Slide::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _Slide::GetSlideID ( ) {
    long _result = 0;
    HRESULT _hr = get_SlideID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _Slide::GetPrintSteps ( ) {
    int _result = 0;
    HRESULT _hr = get_PrintSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Slide::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Slide::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Slide::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum PpSlideLayout _Slide::GetLayout ( ) {
    enum PpSlideLayout _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Slide::PutLayout ( enum PpSlideLayout Layout ) {
    HRESULT _hr = put_Layout(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SlideRangePtr _Slide::Duplicate ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

inline HRESULT _Slide::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline TagsPtr _Slide::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

inline int _Slide::GetSlideIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _Slide::GetSlideNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState _Slide::GetDisplayMasterShapes ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayMasterShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Slide::PutDisplayMasterShapes ( enum Office::MsoTriState DisplayMasterShapes ) {
    HRESULT _hr = put_DisplayMasterShapes(DisplayMasterShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState _Slide::GetFollowMasterBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FollowMasterBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Slide::PutFollowMasterBackground ( enum Office::MsoTriState FollowMasterBackground ) {
    HRESULT _hr = put_FollowMasterBackground(FollowMasterBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SlideRangePtr _Slide::GetNotesPage ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = get_NotesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

inline _MasterPtr _Slide::GetMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

inline HyperlinksPtr _Slide::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

inline HRESULT _Slide::Export ( _bstr_t FileName, _bstr_t FilterName, int ScaleWidth, int ScaleHeight ) {
    HRESULT _hr = raw_Export(FileName, FilterName, ScaleWidth, ScaleHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Office::ScriptsPtr _Slide::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

inline CommentsPtr _Slide::GetComments ( ) {
    struct Comments * _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

inline DesignPtr _Slide::GetDesign ( ) {
    struct Design * _result = 0;
    HRESULT _hr = get_Design(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

inline void _Slide::PutDesign ( struct Design * Design ) {
    HRESULT _hr = put_Design(Design);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Slide::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline TimeLinePtr _Slide::GetTimeLine ( ) {
    struct TimeLine * _result = 0;
    HRESULT _hr = get_TimeLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimeLinePtr(_result, false);
}

inline HRESULT _Slide::ApplyTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline int _Slide::GetSectionNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SectionNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline CustomLayoutPtr _Slide::GetCustomLayout ( ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = get_CustomLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

inline void _Slide::PutCustomLayout ( struct CustomLayout * CustomLayout ) {
    HRESULT _hr = put_CustomLayout(CustomLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Slide::ApplyTheme ( _bstr_t themeName ) {
    HRESULT _hr = raw_ApplyTheme(themeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Office::ThemeColorSchemePtr _Slide::GetThemeColorScheme ( ) {
    struct Office::ThemeColorScheme * _result = 0;
    HRESULT _hr = get_ThemeColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ThemeColorSchemePtr(_result, false);
}

inline HRESULT _Slide::ApplyThemeColorScheme ( _bstr_t themeColorSchemeName ) {
    HRESULT _hr = raw_ApplyThemeColorScheme(themeColorSchemeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoBackgroundStyleIndex _Slide::GetBackgroundStyle ( ) {
    enum Office::MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Slide::PutBackgroundStyle ( enum Office::MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CustomerDataPtr _Slide::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

inline HRESULT _Slide::PublishSlides ( _bstr_t SlideLibraryUrl, VARIANT_BOOL Overwrite, VARIANT_BOOL UseSlideOrder ) {
    HRESULT _hr = raw_PublishSlides(SlideLibraryUrl, Overwrite, UseSlideOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SlideRange wrapper method implementations
//

inline _ApplicationPtr SlideRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr SlideRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ShapesPtr SlideRange::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

inline HeadersFootersPtr SlideRange::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

inline SlideShowTransitionPtr SlideRange::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

inline ColorSchemePtr SlideRange::GetColorScheme ( ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

inline void SlideRange::PutColorScheme ( struct ColorScheme * ColorScheme ) {
    HRESULT _hr = put_ColorScheme(ColorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapeRangePtr SlideRange::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t SlideRange::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void SlideRange::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long SlideRange::GetSlideID ( ) {
    long _result = 0;
    HRESULT _hr = get_SlideID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int SlideRange::GetPrintSteps ( ) {
    int _result = 0;
    HRESULT _hr = get_PrintSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT SlideRange::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT SlideRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT SlideRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum PpSlideLayout SlideRange::GetLayout ( ) {
    enum PpSlideLayout _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void SlideRange::PutLayout ( enum PpSlideLayout Layout ) {
    HRESULT _hr = put_Layout(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SlideRangePtr SlideRange::Duplicate ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

inline HRESULT SlideRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline TagsPtr SlideRange::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

inline int SlideRange::GetSlideIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int SlideRange::GetSlideNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState SlideRange::GetDisplayMasterShapes ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayMasterShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void SlideRange::PutDisplayMasterShapes ( enum Office::MsoTriState DisplayMasterShapes ) {
    HRESULT _hr = put_DisplayMasterShapes(DisplayMasterShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState SlideRange::GetFollowMasterBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FollowMasterBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void SlideRange::PutFollowMasterBackground ( enum Office::MsoTriState FollowMasterBackground ) {
    HRESULT _hr = put_FollowMasterBackground(FollowMasterBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SlideRangePtr SlideRange::GetNotesPage ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = get_NotesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

inline _MasterPtr SlideRange::GetMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

inline HyperlinksPtr SlideRange::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

inline HRESULT SlideRange::Export ( _bstr_t FileName, _bstr_t FilterName, int ScaleWidth, int ScaleHeight ) {
    HRESULT _hr = raw_Export(FileName, FilterName, ScaleWidth, ScaleHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _SlidePtr SlideRange::Item ( const _variant_t & Index ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

inline IUnknownPtr SlideRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _variant_t SlideRange::_Index ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Index(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long SlideRange::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline Office::ScriptsPtr SlideRange::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

inline CommentsPtr SlideRange::GetComments ( ) {
    struct Comments * _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

inline DesignPtr SlideRange::GetDesign ( ) {
    struct Design * _result = 0;
    HRESULT _hr = get_Design(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

inline void SlideRange::PutDesign ( struct Design * Design ) {
    HRESULT _hr = put_Design(Design);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT SlideRange::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline TimeLinePtr SlideRange::GetTimeLine ( ) {
    struct TimeLine * _result = 0;
    HRESULT _hr = get_TimeLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimeLinePtr(_result, false);
}

inline HRESULT SlideRange::ApplyTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline int SlideRange::GetSectionNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SectionNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline CustomLayoutPtr SlideRange::GetCustomLayout ( ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = get_CustomLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

inline void SlideRange::PutCustomLayout ( struct CustomLayout * CustomLayout ) {
    HRESULT _hr = put_CustomLayout(CustomLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT SlideRange::ApplyTheme ( _bstr_t themeName ) {
    HRESULT _hr = raw_ApplyTheme(themeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Office::ThemeColorSchemePtr SlideRange::GetThemeColorScheme ( ) {
    struct Office::ThemeColorScheme * _result = 0;
    HRESULT _hr = get_ThemeColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ThemeColorSchemePtr(_result, false);
}

inline HRESULT SlideRange::ApplyThemeColorScheme ( _bstr_t themeColorSchemeName ) {
    HRESULT _hr = raw_ApplyThemeColorScheme(themeColorSchemeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoBackgroundStyleIndex SlideRange::GetBackgroundStyle ( ) {
    enum Office::MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void SlideRange::PutBackgroundStyle ( enum Office::MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CustomerDataPtr SlideRange::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

inline HRESULT SlideRange::PublishSlides ( _bstr_t SlideLibraryUrl, VARIANT_BOOL Overwrite, VARIANT_BOOL UseSlideOrder ) {
    HRESULT _hr = raw_PublishSlides(SlideLibraryUrl, Overwrite, UseSlideOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Master wrapper method implementations
//

inline _ApplicationPtr _Master::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr _Master::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ShapesPtr _Master::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

inline HeadersFootersPtr _Master::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

inline ColorSchemePtr _Master::GetColorScheme ( ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

inline void _Master::PutColorScheme ( struct ColorScheme * ColorScheme ) {
    HRESULT _hr = put_ColorScheme(ColorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapeRangePtr _Master::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t _Master::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Master::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Master::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float _Master::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float _Master::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline TextStylesPtr _Master::GetTextStyles ( ) {
    struct TextStyles * _result = 0;
    HRESULT _hr = get_TextStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStylesPtr(_result, false);
}

inline HyperlinksPtr _Master::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

inline Office::ScriptsPtr _Master::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

inline DesignPtr _Master::GetDesign ( ) {
    struct Design * _result = 0;
    HRESULT _hr = get_Design(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

inline TimeLinePtr _Master::GetTimeLine ( ) {
    struct TimeLine * _result = 0;
    HRESULT _hr = get_TimeLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimeLinePtr(_result, false);
}

inline SlideShowTransitionPtr _Master::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

inline CustomLayoutsPtr _Master::GetCustomLayouts ( ) {
    struct CustomLayouts * _result = 0;
    HRESULT _hr = get_CustomLayouts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutsPtr(_result, false);
}

inline Office::OfficeThemePtr _Master::GetTheme ( ) {
    struct Office::OfficeTheme * _result = 0;
    HRESULT _hr = get_Theme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::OfficeThemePtr(_result, false);
}

inline HRESULT _Master::ApplyTheme ( _bstr_t themeName ) {
    HRESULT _hr = raw_ApplyTheme(themeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoBackgroundStyleIndex _Master::GetBackgroundStyle ( ) {
    enum Office::MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Master::PutBackgroundStyle ( enum Office::MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CustomerDataPtr _Master::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

//
// interface Design wrapper method implementations
//

inline _ApplicationPtr Design::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Design::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _MasterPtr Design::GetSlideMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_SlideMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

inline _MasterPtr Design::GetTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_TitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

inline enum Office::MsoTriState Design::GetHasTitleMaster ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _MasterPtr Design::AddTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = raw_AddTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

inline int Design::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t Design::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void Design::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState Design::GetPreserved ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Preserved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Design::PutPreserved ( enum Office::MsoTriState Preserved ) {
    HRESULT _hr = put_Preserved(Preserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT Design::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Design::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Designs wrapper method implementations
//

inline _ApplicationPtr Designs::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Designs::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline DesignPtr Designs::Item ( const _variant_t & Index ) {
    struct Design * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

inline DesignPtr Designs::Add ( _bstr_t designName, int Index ) {
    struct Design * _result = 0;
    HRESULT _hr = raw_Add(designName, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

inline DesignPtr Designs::Load ( _bstr_t TemplateName, int Index ) {
    struct Design * _result = 0;
    HRESULT _hr = raw_Load(TemplateName, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

inline DesignPtr Designs::Clone ( struct Design * pOriginal, int Index ) {
    struct Design * _result = 0;
    HRESULT _hr = raw_Clone(pOriginal, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

//
// interface Shapes wrapper method implementations
//

inline IDispatchPtr Shapes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long Shapes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr Shapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline int Shapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr Shapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline IUnknownPtr Shapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline ShapePtr Shapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddPicture ( _bstr_t FileName, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline FreeformBuilderPtr Shapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

inline HRESULT Shapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapeRangePtr Shapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline enum Office::MsoTriState Shapes::GetHasTitle ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr Shapes::AddTitle ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::GetTitle ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline PlaceholdersPtr Shapes::GetPlaceholders ( ) {
    struct Placeholders * _result = 0;
    HRESULT _hr = get_Placeholders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaceholdersPtr(_result, false);
}

inline ShapePtr Shapes::AddOLEObject ( float Left, float Top, float Width, float Height, _bstr_t ClassName, _bstr_t FileName, enum Office::MsoTriState DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, enum Office::MsoTriState Link ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddOLEObject(Left, Top, Width, Height, ClassName, FileName, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddComment ( float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddComment(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddPlaceholder ( enum PpPlaceholderType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPlaceholder(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddMediaObject ( _bstr_t FileName, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddMediaObject(FileName, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapeRangePtr Shapes::Paste ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline ShapePtr Shapes::AddTable ( int NumRows, int NumColumns, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTable(NumRows, NumColumns, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapeRangePtr Shapes::PasteSpecial ( enum PpPasteDataType DataType, enum Office::MsoTriState DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, enum Office::MsoTriState Link ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_PasteSpecial(DataType, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline ShapePtr Shapes::AddDiagram ( enum Office::MsoDiagramType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddDiagram(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddCanvas ( float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCanvas(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddChart ( enum Office::XlChartType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddChart(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//version must than 2013
inline ShapePtr Shapes::AddMediaObject2 ( _bstr_t FileName, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
	struct Shape * _result = 0;
	HRESULT _hr = raw_AddMediaObject2(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
	if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
	return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddMediaObjectFromEmbedTag ( _bstr_t EmbedTag, float Left, float Top, float Width, float Height ) {
	struct Shape * _result = 0;
	HRESULT _hr = raw_AddMediaObjectFromEmbedTag(EmbedTag, Left, Top, Width, Height, &_result);
	if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
	return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddSmartArt ( struct SmartArtLayout * Layout, float Left, float Top, float Width, float Height ) {
	struct Shape * _result = 0;
	HRESULT _hr = raw_AddSmartArt(Layout, Left, Top, Width, Height, &_result);
	if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
	return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddChart2 ( int Style, enum Office::XlChartType Type, float Left, float Top, float Width, float Height, VARIANT_BOOL NewLayout ) {
	struct Shape * _result = 0;
	HRESULT _hr = raw_AddChart2(Style, Type, Left, Top, Width, Height, NewLayout, &_result);
	if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
	return ShapePtr(_result, false);
}

inline ShapePtr Shapes::AddPicture2 ( _bstr_t FileName, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height, enum Office::MsoPictureCompress compress ) {
	struct Shape * _result = 0;
	HRESULT _hr = raw_AddPicture2(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, compress, &_result);
	if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
	return ShapePtr(_result, false);
}

//
// interface Placeholders wrapper method implementations
//

inline _ApplicationPtr Placeholders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Placeholders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ShapePtr Placeholders::Item ( int Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr Placeholders::FindByName ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_FindByName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface FreeformBuilder wrapper method implementations
//

inline IDispatchPtr FreeformBuilder::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long FreeformBuilder::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr FreeformBuilder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT FreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_AddNodes(SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapePtr FreeformBuilder::ConvertToShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_ConvertToShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface Shape wrapper method implementations
//

inline IDispatchPtr Shape::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long Shape::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr Shape::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT Shape::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapeRangePtr Shape::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline HRESULT Shape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline AdjustmentsPtr Shape::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

inline enum Office::MsoAutoShapeType Shape::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Shape::PutAutoShapeType ( enum Office::MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoBlackWhiteMode Shape::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Shape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CalloutFormatPtr Shape::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

inline int Shape::GetConnectionSiteCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState Shape::GetConnector ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ConnectorFormatPtr Shape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

inline FillFormatPtr Shape::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

inline GroupShapesPtr Shape::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

inline float Shape::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Shape::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState Shape::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float Shape::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Shape::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline LineFormatPtr Shape::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

inline enum Office::MsoTriState Shape::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Shape::PutLockAspectRatio ( enum Office::MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t Shape::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void Shape::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapeNodesPtr Shape::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

inline float Shape::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Shape::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PictureFormatPtr Shape::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

inline ShadowFormatPtr Shape::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

inline TextEffectFormatPtr Shape::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

inline TextFramePtr Shape::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

inline ThreeDFormatPtr Shape::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

inline float Shape::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Shape::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoShapeType Shape::GetType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState Shape::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t Shape::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum Office::MsoTriState Shape::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Shape::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float Shape::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Shape::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int Shape::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline OLEFormatPtr Shape::GetOLEFormat ( ) {
    struct OLEFormat * _result = 0;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

inline LinkFormatPtr Shape::GetLinkFormat ( ) {
    struct LinkFormat * _result = 0;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

inline PlaceholderFormatPtr Shape::GetPlaceholderFormat ( ) {
    struct PlaceholderFormat * _result = 0;
    HRESULT _hr = get_PlaceholderFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaceholderFormatPtr(_result, false);
}

inline AnimationSettingsPtr Shape::GetAnimationSettings ( ) {
    struct AnimationSettings * _result = 0;
    HRESULT _hr = get_AnimationSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationSettingsPtr(_result, false);
}

inline ActionSettingsPtr Shape::GetActionSettings ( ) {
    struct ActionSettings * _result = 0;
    HRESULT _hr = get_ActionSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingsPtr(_result, false);
}

inline TagsPtr Shape::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

inline HRESULT Shape::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::Select ( enum Office::MsoTriState Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapeRangePtr Shape::Duplicate ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline enum PpMediaType Shape::GetMediaType ( ) {
    enum PpMediaType _result;
    HRESULT _hr = get_MediaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState Shape::GetHasTextFrame ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SoundFormatPtr Shape::GetSoundFormat ( ) {
    struct SoundFormat * _result = 0;
    HRESULT _hr = get_SoundFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundFormatPtr(_result, false);
}

inline Office::ScriptPtr Shape::GetScript ( ) {
    struct Office::Script * _result = 0;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptPtr(_result, false);
}

inline _bstr_t Shape::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void Shape::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState Shape::GetHasTable ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline TablePtr Shape::GetTable ( ) {
    struct Table * _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

inline HRESULT Shape::Export ( _bstr_t PathName, enum PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, enum PpExportMode ExportMode ) {
    HRESULT _hr = raw_Export(PathName, Filter, ScaleWidth, ScaleHeight, ExportMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoTriState Shape::GetHasDiagram ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DiagramPtr Shape::GetDiagram ( ) {
    struct Diagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramPtr(_result, false);
}

inline enum Office::MsoTriState Shape::GetHasDiagramNode ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DiagramNodePtr Shape::GetDiagramNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

inline enum Office::MsoTriState Shape::GetChild ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr Shape::GetParentGroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline CanvasShapesPtr Shape::GetCanvasItems ( ) {
    struct CanvasShapes * _result = 0;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

inline int Shape::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT Shape::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Shape::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void Shape::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CustomerDataPtr Shape::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

inline TextFrame2Ptr Shape::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

inline enum Office::MsoTriState Shape::GetHasChart ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoShapeStyleIndex Shape::GetShapeStyle ( ) {
    enum Office::MsoShapeStyleIndex _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Shape::PutShapeStyle ( enum Office::MsoShapeStyleIndex ShapeStyle ) {
    HRESULT _hr = put_ShapeStyle(ShapeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoBackgroundStyleIndex Shape::GetBackgroundStyle ( ) {
    enum Office::MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Shape::PutBackgroundStyle ( enum Office::MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::SoftEdgeFormatPtr Shape::GetSoftEdge ( ) {
    struct Office::SoftEdgeFormat * _result = 0;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SoftEdgeFormatPtr(_result, false);
}

inline Office::GlowFormatPtr Shape::GetGlow ( ) {
    struct Office::GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::GlowFormatPtr(_result, false);
}

inline Office::ReflectionFormatPtr Shape::GetReflection ( ) {
    struct Office::ReflectionFormat * _result = 0;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ReflectionFormatPtr(_result, false);
}

//
// interface ConnectorFormat wrapper method implementations
//

inline IDispatchPtr ConnectorFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long ConnectorFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ConnectorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_BeginConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ConnectorFormat::BeginDisconnect ( ) {
    HRESULT _hr = raw_BeginDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_EndConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ConnectorFormat::EndDisconnect ( ) {
    HRESULT _hr = raw_EndDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoTriState ConnectorFormat::GetBeginConnected ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_BeginConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr ConnectorFormat::GetBeginConnectedShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_BeginConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline int ConnectorFormat::GetBeginConnectionSite ( ) {
    int _result = 0;
    HRESULT _hr = get_BeginConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState ConnectorFormat::GetEndConnected ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_EndConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr ConnectorFormat::GetEndConnectedShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_EndConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline int ConnectorFormat::GetEndConnectionSite ( ) {
    int _result = 0;
    HRESULT _hr = get_EndConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoConnectorType ConnectorFormat::GetType ( ) {
    enum Office::MsoConnectorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ConnectorFormat::PutType ( enum Office::MsoConnectorType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Presentation wrapper method implementations
//

inline _ApplicationPtr _Presentation::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr _Presentation::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _MasterPtr _Presentation::GetSlideMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_SlideMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

inline _MasterPtr _Presentation::GetTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_TitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

inline enum Office::MsoTriState _Presentation::GetHasTitleMaster ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _MasterPtr _Presentation::AddTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = raw_AddTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

inline HRESULT _Presentation::ApplyTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Presentation::GetTemplateName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplateName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _MasterPtr _Presentation::GetNotesMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_NotesMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

inline _MasterPtr _Presentation::GetHandoutMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_HandoutMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

inline SlidesPtr _Presentation::GetSlides ( ) {
    struct Slides * _result = 0;
    HRESULT _hr = get_Slides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlidesPtr(_result, false);
}

inline PageSetupPtr _Presentation::GetPageSetup ( ) {
    struct PageSetup * _result = 0;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

inline ColorSchemesPtr _Presentation::GetColorSchemes ( ) {
    struct ColorSchemes * _result = 0;
    HRESULT _hr = get_ColorSchemes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemesPtr(_result, false);
}

inline ExtraColorsPtr _Presentation::GetExtraColors ( ) {
    struct ExtraColors * _result = 0;
    HRESULT _hr = get_ExtraColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ExtraColorsPtr(_result, false);
}

inline SlideShowSettingsPtr _Presentation::GetSlideShowSettings ( ) {
    struct SlideShowSettings * _result = 0;
    HRESULT _hr = get_SlideShowSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowSettingsPtr(_result, false);
}

inline FontsPtr _Presentation::GetFonts ( ) {
    struct Fonts * _result = 0;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontsPtr(_result, false);
}

inline DocumentWindowsPtr _Presentation::GetWindows ( ) {
    struct DocumentWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowsPtr(_result, false);
}

inline TagsPtr _Presentation::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

inline ShapePtr _Presentation::GetDefaultShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_DefaultShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline IDispatchPtr _Presentation::GetBuiltInDocumentProperties ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_BuiltInDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Presentation::GetCustomDocumentProperties ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CustomDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VBIDE::_VBProjectPtr _Presentation::GetVBProject ( ) {
    struct VBIDE::_VBProject * _result = 0;
    HRESULT _hr = get_VBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBIDE::_VBProjectPtr(_result, false);
}

inline enum Office::MsoTriState _Presentation::GetReadOnly ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t _Presentation::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _Presentation::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _Presentation::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum Office::MsoTriState _Presentation::GetSaved ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Presentation::PutSaved ( enum Office::MsoTriState Saved ) {
    HRESULT _hr = put_Saved(Saved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum PpDirection _Presentation::GetLayoutDirection ( ) {
    enum PpDirection _result;
    HRESULT _hr = get_LayoutDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Presentation::PutLayoutDirection ( enum PpDirection LayoutDirection ) {
    HRESULT _hr = put_LayoutDirection(LayoutDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DocumentWindowPtr _Presentation::NewWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

inline HRESULT _Presentation::FollowHyperlink ( _bstr_t Address, _bstr_t SubAddress, VARIANT_BOOL NewWindow, VARIANT_BOOL AddHistory, _bstr_t ExtraInfo, enum Office::MsoExtraInfoMethod Method, _bstr_t HeaderInfo ) {
    HRESULT _hr = raw_FollowHyperlink(Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::Unused ( ) {
    HRESULT _hr = raw_Unused();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline PrintOptionsPtr _Presentation::GetPrintOptions ( ) {
    struct PrintOptions * _result = 0;
    HRESULT _hr = get_PrintOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintOptionsPtr(_result, false);
}

inline HRESULT _Presentation::PrintOut ( int From, int To, _bstr_t PrintToFile, int Copies, enum Office::MsoTriState Collate ) {
    HRESULT _hr = raw_PrintOut(From, To, PrintToFile, Copies, Collate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::SaveAs ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, enum Office::MsoTriState EmbedTrueTypeFonts ) {
    HRESULT _hr = raw_SaveAs(FileName, FileFormat, EmbedTrueTypeFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::SaveCopyAs ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, enum Office::MsoTriState EmbedTrueTypeFonts ) {
    HRESULT _hr = raw_SaveCopyAs(FileName, FileFormat, EmbedTrueTypeFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::Export ( _bstr_t Path, _bstr_t FilterName, int ScaleWidth, int ScaleHeight ) {
    HRESULT _hr = raw_Export(Path, FilterName, ScaleWidth, ScaleHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::SetUndoText ( _bstr_t Text ) {
    HRESULT _hr = raw_SetUndoText(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _Presentation::GetContainer ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Container(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum Office::MsoTriState _Presentation::GetDisplayComments ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Presentation::PutDisplayComments ( enum Office::MsoTriState DisplayComments ) {
    HRESULT _hr = put_DisplayComments(DisplayComments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum PpFarEastLineBreakLevel _Presentation::GetFarEastLineBreakLevel ( ) {
    enum PpFarEastLineBreakLevel _result;
    HRESULT _hr = get_FarEastLineBreakLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Presentation::PutFarEastLineBreakLevel ( enum PpFarEastLineBreakLevel FarEastLineBreakLevel ) {
    HRESULT _hr = put_FarEastLineBreakLevel(FarEastLineBreakLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Presentation::GetNoLineBreakBefore ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NoLineBreakBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Presentation::PutNoLineBreakBefore ( _bstr_t NoLineBreakBefore ) {
    HRESULT _hr = put_NoLineBreakBefore(NoLineBreakBefore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Presentation::GetNoLineBreakAfter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NoLineBreakAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Presentation::PutNoLineBreakAfter ( _bstr_t NoLineBreakAfter ) {
    HRESULT _hr = put_NoLineBreakAfter(NoLineBreakAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Presentation::UpdateLinks ( ) {
    HRESULT _hr = raw_UpdateLinks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SlideShowWindowPtr _Presentation::GetSlideShowWindow ( ) {
    struct SlideShowWindow * _result = 0;
    HRESULT _hr = get_SlideShowWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowPtr(_result, false);
}

inline enum Office::MsoFarEastLineBreakLanguageID _Presentation::GetFarEastLineBreakLanguage ( ) {
    enum Office::MsoFarEastLineBreakLanguageID _result;
    HRESULT _hr = get_FarEastLineBreakLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Presentation::PutFarEastLineBreakLanguage ( enum Office::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage ) {
    HRESULT _hr = put_FarEastLineBreakLanguage(FarEastLineBreakLanguage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Presentation::WebPagePreview ( ) {
    HRESULT _hr = raw_WebPagePreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoLanguageID _Presentation::GetDefaultLanguageID ( ) {
    enum Office::MsoLanguageID _result;
    HRESULT _hr = get_DefaultLanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Presentation::PutDefaultLanguageID ( enum Office::MsoLanguageID DefaultLanguageID ) {
    HRESULT _hr = put_DefaultLanguageID(DefaultLanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::_CommandBarsPtr _Presentation::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

inline PublishObjectsPtr _Presentation::GetPublishObjects ( ) {
    struct PublishObjects * _result = 0;
    HRESULT _hr = get_PublishObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectsPtr(_result, false);
}

inline WebOptionsPtr _Presentation::GetWebOptions ( ) {
    struct WebOptions * _result = 0;
    HRESULT _hr = get_WebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebOptionsPtr(_result, false);
}

inline Office::HTMLProjectPtr _Presentation::GetHTMLProject ( ) {
    struct Office::HTMLProject * _result = 0;
    HRESULT _hr = get_HTMLProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::HTMLProjectPtr(_result, false);
}

inline HRESULT _Presentation::ReloadAs ( enum Office::MsoEncoding cp ) {
    HRESULT _hr = raw_ReloadAs(cp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::MakeIntoTemplate ( enum Office::MsoTriState IsDesignTemplate ) {
    HRESULT _hr = raw_MakeIntoTemplate(IsDesignTemplate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoTriState _Presentation::GetEnvelopeVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_EnvelopeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Presentation::PutEnvelopeVisible ( enum Office::MsoTriState EnvelopeVisible ) {
    HRESULT _hr = put_EnvelopeVisible(EnvelopeVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Presentation::sblt ( _bstr_t s ) {
    HRESULT _hr = raw_sblt(s);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoTriState _Presentation::GetVBASigned ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VBASigned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState _Presentation::GetSnapToGrid ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_SnapToGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Presentation::PutSnapToGrid ( enum Office::MsoTriState SnapToGrid ) {
    HRESULT _hr = put_SnapToGrid(SnapToGrid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float _Presentation::GetGridDistance ( ) {
    float _result = 0;
    HRESULT _hr = get_GridDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Presentation::PutGridDistance ( float GridDistance ) {
    HRESULT _hr = put_GridDistance(GridDistance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DesignsPtr _Presentation::GetDesigns ( ) {
    struct Designs * _result = 0;
    HRESULT _hr = get_Designs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignsPtr(_result, false);
}

inline HRESULT _Presentation::Merge ( _bstr_t Path ) {
    HRESULT _hr = raw_Merge(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::CheckIn ( VARIANT_BOOL SaveChanges, const _variant_t & Comments, const _variant_t & MakePublic ) {
    HRESULT _hr = raw_CheckIn(SaveChanges, Comments, MakePublic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _Presentation::CanCheckIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanCheckIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline Office::SignatureSetPtr _Presentation::GetSignatures ( ) {
    struct Office::SignatureSet * _result = 0;
    HRESULT _hr = get_Signatures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SignatureSetPtr(_result, false);
}

inline enum Office::MsoTriState _Presentation::GetRemovePersonalInformation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RemovePersonalInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Presentation::PutRemovePersonalInformation ( enum Office::MsoTriState RemovePersonalInformation ) {
    HRESULT _hr = put_RemovePersonalInformation(RemovePersonalInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Presentation::SendForReview ( _bstr_t Recipients, _bstr_t Subject, VARIANT_BOOL ShowMessage, const _variant_t & IncludeAttachment ) {
    HRESULT _hr = raw_SendForReview(Recipients, Subject, ShowMessage, IncludeAttachment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::ReplyWithChanges ( VARIANT_BOOL ShowMessage ) {
    HRESULT _hr = raw_ReplyWithChanges(ShowMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::EndReview ( ) {
    HRESULT _hr = raw_EndReview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum PpRevisionInfo _Presentation::GetHasRevisionInfo ( ) {
    enum PpRevisionInfo _result;
    HRESULT _hr = get_HasRevisionInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Presentation::AddBaseline ( _bstr_t FileName ) {
    HRESULT _hr = raw_AddBaseline(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::RemoveBaseline ( ) {
    HRESULT _hr = raw_RemoveBaseline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Presentation::GetPasswordEncryptionProvider ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PasswordEncryptionProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t _Presentation::GetPasswordEncryptionAlgorithm ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PasswordEncryptionAlgorithm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline int _Presentation::GetPasswordEncryptionKeyLength ( ) {
    int _result = 0;
    HRESULT _hr = get_PasswordEncryptionKeyLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Presentation::GetPasswordEncryptionFileProperties ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PasswordEncryptionFileProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Presentation::SetPasswordEncryptionOptions ( _bstr_t PasswordEncryptionProvider, _bstr_t PasswordEncryptionAlgorithm, int PasswordEncryptionKeyLength, VARIANT_BOOL PasswordEncryptionFileProperties ) {
    HRESULT _hr = raw_SetPasswordEncryptionOptions(PasswordEncryptionProvider, PasswordEncryptionAlgorithm, PasswordEncryptionKeyLength, PasswordEncryptionFileProperties);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Presentation::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Presentation::PutPassword ( _bstr_t Password ) {
    HRESULT _hr = put_Password(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _Presentation::GetWritePassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WritePassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Presentation::PutWritePassword ( _bstr_t WritePassword ) {
    HRESULT _hr = put_WritePassword(WritePassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::PermissionPtr _Presentation::GetPermission ( ) {
    struct Office::Permission * _result = 0;
    HRESULT _hr = get_Permission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::PermissionPtr(_result, false);
}

inline Office::SharedWorkspacePtr _Presentation::GetSharedWorkspace ( ) {
    struct Office::SharedWorkspace * _result = 0;
    HRESULT _hr = get_SharedWorkspace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SharedWorkspacePtr(_result, false);
}

inline Office::SyncPtr _Presentation::GetSync ( ) {
    struct Office::Sync * _result = 0;
    HRESULT _hr = get_Sync(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SyncPtr(_result, false);
}

inline HRESULT _Presentation::SendFaxOverInternet ( _bstr_t Recipients, _bstr_t Subject, VARIANT_BOOL ShowMessage ) {
    HRESULT _hr = raw_SendFaxOverInternet(Recipients, Subject, ShowMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Office::DocumentLibraryVersionsPtr _Presentation::GetDocumentLibraryVersions ( ) {
    struct Office::DocumentLibraryVersions * _result = 0;
    HRESULT _hr = get_DocumentLibraryVersions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::DocumentLibraryVersionsPtr(_result, false);
}

inline Office::MetaPropertiesPtr _Presentation::GetContentTypeProperties ( ) {
    struct Office::MetaProperties * _result = 0;
    HRESULT _hr = get_ContentTypeProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::MetaPropertiesPtr(_result, false);
}

inline int _Presentation::GetSectionCount ( ) {
    int _result = 0;
    HRESULT _hr = get_SectionCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _Presentation::GetHasSections ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasSections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Presentation::NewSectionAfter ( int Index, VARIANT_BOOL AfterSlide, _bstr_t sectionTitle, int * newSectionIndex ) {
    HRESULT _hr = raw_NewSectionAfter(Index, AfterSlide, sectionTitle, newSectionIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::DeleteSection ( int Index ) {
    HRESULT _hr = raw_DeleteSection(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::DisableSections ( ) {
    HRESULT _hr = raw_DisableSections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Presentation::sectionTitle ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_sectionTitle(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT _Presentation::RemoveDocumentInformation ( enum PpRemoveDocInfoType Type ) {
    HRESULT _hr = raw_RemoveDocumentInformation(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::CheckInWithVersion ( VARIANT_BOOL SaveChanges, const _variant_t & Comments, const _variant_t & MakePublic, const _variant_t & VersionType ) {
    HRESULT _hr = raw_CheckInWithVersion(SaveChanges, Comments, MakePublic, VersionType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Presentation::ExportAsFixedFormat ( _bstr_t Path, enum PpFixedFormatType FixedFormatType, enum PpFixedFormatIntent Intent, enum Office::MsoTriState FrameSlides, enum PpPrintHandoutOrder HandoutOrder, enum PpPrintOutputType OutputType, enum Office::MsoTriState PrintHiddenSlides, struct PrintRange * PrintRange, enum PpPrintRangeType RangeType, _bstr_t SlideShowName, VARIANT_BOOL IncludeDocProperties, VARIANT_BOOL KeepIRMSettings, VARIANT_BOOL DocStructureTags, VARIANT_BOOL BitmapMissingFonts, VARIANT_BOOL UseISO19005_1, const _variant_t & ExternalExporter ) {
    HRESULT _hr = raw_ExportAsFixedFormat(Path, FixedFormatType, Intent, FrameSlides, HandoutOrder, OutputType, PrintHiddenSlides, PrintRange, RangeType, SlideShowName, IncludeDocProperties, KeepIRMSettings, DocStructureTags, BitmapMissingFonts, UseISO19005_1, ExternalExporter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Office::ServerPolicyPtr _Presentation::GetServerPolicy ( ) {
    struct Office::ServerPolicy * _result = 0;
    HRESULT _hr = get_ServerPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ServerPolicyPtr(_result, false);
}

inline Office::WorkflowTasksPtr _Presentation::GetWorkflowTasks ( ) {
    struct Office::WorkflowTasks * _result = 0;
    HRESULT _hr = raw_GetWorkflowTasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::WorkflowTasksPtr(_result, false);
}

inline Office::WorkflowTemplatesPtr _Presentation::GetWorkflowTemplates ( ) {
    struct Office::WorkflowTemplates * _result = 0;
    HRESULT _hr = raw_GetWorkflowTemplates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::WorkflowTemplatesPtr(_result, false);
}

inline HRESULT _Presentation::LockServerFile ( ) {
    HRESULT _hr = raw_LockServerFile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Office::DocumentInspectorsPtr _Presentation::GetDocumentInspectors ( ) {
    struct Office::DocumentInspectors * _result = 0;
    HRESULT _hr = get_DocumentInspectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::DocumentInspectorsPtr(_result, false);
}

inline VARIANT_BOOL _Presentation::GetHasVBProject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasVBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline Office::_CustomXMLPartsPtr _Presentation::GetCustomXMLParts ( ) {
    struct Office::_CustomXMLParts * _result = 0;
    HRESULT _hr = get_CustomXMLParts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CustomXMLPartsPtr(_result, false);
}

inline VARIANT_BOOL _Presentation::GetFinal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Final(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _Presentation::PutFinal ( VARIANT_BOOL Final ) {
    HRESULT _hr = put_Final(Final);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Presentation::ApplyTheme ( _bstr_t themeName ) {
    HRESULT _hr = raw_ApplyTheme(themeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline CustomerDataPtr _Presentation::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

inline ResearchPtr _Presentation::GetResearch ( ) {
    struct Research * _result = 0;
    HRESULT _hr = get_Research(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ResearchPtr(_result, false);
}

inline HRESULT _Presentation::PublishSlides ( _bstr_t SlideLibraryUrl, VARIANT_BOOL Overwrite, VARIANT_BOOL UseSlideOrder ) {
    HRESULT _hr = raw_PublishSlides(SlideLibraryUrl, Overwrite, UseSlideOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Presentation::GetEncryptionProvider ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EncryptionProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Presentation::PutEncryptionProvider ( _bstr_t EncryptionProvider ) {
    HRESULT _hr = put_EncryptionProvider(EncryptionProvider);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _Presentation::Convert ( ) {
    HRESULT _hr = raw_Convert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Cell wrapper method implementations
//

inline _ApplicationPtr Cell::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Cell::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ShapePtr Cell::GetShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline BordersPtr Cell::GetBorders ( ) {
    struct Borders * _result = 0;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

inline HRESULT Cell::Merge ( struct Cell * MergeTo ) {
    HRESULT _hr = raw_Merge(MergeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Cell::Split ( int NumRows, int NumColumns ) {
    HRESULT _hr = raw_Split(NumRows, NumColumns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Cell::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL Cell::GetSelected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Selected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface CellRange wrapper method implementations
//

inline _ApplicationPtr CellRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr CellRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline CellPtr CellRange::Item ( int Index ) {
    struct Cell * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

inline BordersPtr CellRange::GetBorders ( ) {
    struct Borders * _result = 0;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

//
// interface Column wrapper method implementations
//

inline _ApplicationPtr Column::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Column::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline CellRangePtr Column::GetCells ( ) {
    struct CellRange * _result = 0;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellRangePtr(_result, false);
}

inline HRESULT Column::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Column::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float Column::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Column::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Columns wrapper method implementations
//

inline _ApplicationPtr Columns::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Columns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ColumnPtr Columns::Item ( int Index ) {
    struct Column * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

inline ColumnPtr Columns::Add ( int BeforeColumn ) {
    struct Column * _result = 0;
    HRESULT _hr = raw_Add(BeforeColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

//
// interface Row wrapper method implementations
//

inline _ApplicationPtr Row::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Row::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline CellRangePtr Row::GetCells ( ) {
    struct CellRange * _result = 0;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellRangePtr(_result, false);
}

inline HRESULT Row::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Row::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float Row::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Row::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Rows wrapper method implementations
//

inline _ApplicationPtr Rows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Rows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline RowPtr Rows::Item ( int Index ) {
    struct Row * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

inline RowPtr Rows::Add ( int BeforeRow ) {
    struct Row * _result = 0;
    HRESULT _hr = raw_Add(BeforeRow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

//
// interface Table wrapper method implementations
//

inline _ApplicationPtr Table::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Table::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ColumnsPtr Table::GetColumns ( ) {
    struct Columns * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnsPtr(_result, false);
}

inline RowsPtr Table::GetRows ( ) {
    struct Rows * _result = 0;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowsPtr(_result, false);
}

inline CellPtr Table::Cell ( int Row, int Column ) {
    struct Cell * _result = 0;
    HRESULT _hr = raw_Cell(Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

inline enum PpDirection Table::GetTableDirection ( ) {
    enum PpDirection _result;
    HRESULT _hr = get_TableDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Table::PutTableDirection ( enum PpDirection TableDirection ) {
    HRESULT _hr = put_TableDirection(TableDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT Table::MergeBorders ( ) {
    HRESULT _hr = raw_MergeBorders();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL Table::GetFirstRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FirstRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Table::PutFirstRow ( VARIANT_BOOL FirstRow ) {
    HRESULT _hr = put_FirstRow(FirstRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL Table::GetLastRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LastRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Table::PutLastRow ( VARIANT_BOOL LastRow ) {
    HRESULT _hr = put_LastRow(LastRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL Table::GetFirstCol ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FirstCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Table::PutFirstCol ( VARIANT_BOOL FirstCol ) {
    HRESULT _hr = put_FirstCol(FirstCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL Table::GetLastCol ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LastCol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Table::PutLastCol ( VARIANT_BOOL LastCol ) {
    HRESULT _hr = put_LastCol(LastCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL Table::GetHorizBanding ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HorizBanding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Table::PutHorizBanding ( VARIANT_BOOL HorizBanding ) {
    HRESULT _hr = put_HorizBanding(HorizBanding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL Table::GetVertBanding ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VertBanding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Table::PutVertBanding ( VARIANT_BOOL VertBanding ) {
    HRESULT _hr = put_VertBanding(VertBanding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline TableStylePtr Table::GetStyle ( ) {
    struct TableStyle * _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableStylePtr(_result, false);
}

inline TableBackgroundPtr Table::GetBackground ( ) {
    struct TableBackground * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableBackgroundPtr(_result, false);
}

inline HRESULT Table::ScaleProportionally ( float scale ) {
    HRESULT _hr = raw_ScaleProportionally(scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Table::ApplyStyle ( _bstr_t StyleID, VARIANT_BOOL SaveFormatting ) {
    HRESULT _hr = raw_ApplyStyle(StyleID, SaveFormatting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Timing wrapper method implementations
//

inline _ApplicationPtr Timing::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Timing::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline float Timing::GetDuration ( ) {
    float _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutDuration ( float Duration ) {
    HRESULT _hr = put_Duration(Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum MsoAnimTriggerType Timing::GetTriggerType ( ) {
    enum MsoAnimTriggerType _result;
    HRESULT _hr = get_TriggerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutTriggerType ( enum MsoAnimTriggerType TriggerType ) {
    HRESULT _hr = put_TriggerType(TriggerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float Timing::GetTriggerDelayTime ( ) {
    float _result = 0;
    HRESULT _hr = get_TriggerDelayTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutTriggerDelayTime ( float TriggerDelayTime ) {
    HRESULT _hr = put_TriggerDelayTime(TriggerDelayTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapePtr Timing::GetTriggerShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_TriggerShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline void Timing::PutTriggerShape ( struct Shape * TriggerShape ) {
    HRESULT _hr = put_TriggerShape(TriggerShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int Timing::GetRepeatCount ( ) {
    int _result = 0;
    HRESULT _hr = get_RepeatCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutRepeatCount ( int RepeatCount ) {
    HRESULT _hr = put_RepeatCount(RepeatCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float Timing::GetRepeatDuration ( ) {
    float _result = 0;
    HRESULT _hr = get_RepeatDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutRepeatDuration ( float RepeatDuration ) {
    HRESULT _hr = put_RepeatDuration(RepeatDuration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float Timing::GetSpeed ( ) {
    float _result = 0;
    HRESULT _hr = get_Speed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutSpeed ( float Speed ) {
    HRESULT _hr = put_Speed(Speed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float Timing::GetAccelerate ( ) {
    float _result = 0;
    HRESULT _hr = get_Accelerate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutAccelerate ( float Accelerate ) {
    HRESULT _hr = put_Accelerate(Accelerate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float Timing::GetDecelerate ( ) {
    float _result = 0;
    HRESULT _hr = get_Decelerate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutDecelerate ( float Decelerate ) {
    HRESULT _hr = put_Decelerate(Decelerate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState Timing::GetAutoReverse ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoReverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutAutoReverse ( enum Office::MsoTriState AutoReverse ) {
    HRESULT _hr = put_AutoReverse(AutoReverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState Timing::GetSmoothStart ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_SmoothStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutSmoothStart ( enum Office::MsoTriState SmoothStart ) {
    HRESULT _hr = put_SmoothStart(SmoothStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState Timing::GetSmoothEnd ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_SmoothEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutSmoothEnd ( enum Office::MsoTriState SmoothEnd ) {
    HRESULT _hr = put_SmoothEnd(SmoothEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState Timing::GetRewindAtEnd ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RewindAtEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutRewindAtEnd ( enum Office::MsoTriState RewindAtEnd ) {
    HRESULT _hr = put_RewindAtEnd(RewindAtEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum MsoAnimEffectRestart Timing::GetRestart ( ) {
    enum MsoAnimEffectRestart _result;
    HRESULT _hr = get_Restart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Timing::PutRestart ( enum MsoAnimEffectRestart Restart ) {
    HRESULT _hr = put_Restart(Restart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationBehavior wrapper method implementations
//

inline _ApplicationPtr AnimationBehavior::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr AnimationBehavior::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum MsoAnimAdditive AnimationBehavior::GetAdditive ( ) {
    enum MsoAnimAdditive _result;
    HRESULT _hr = get_Additive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void AnimationBehavior::PutAdditive ( enum MsoAnimAdditive Additive ) {
    HRESULT _hr = put_Additive(Additive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum MsoAnimAccumulate AnimationBehavior::GetAccumulate ( ) {
    enum MsoAnimAccumulate _result;
    HRESULT _hr = get_Accumulate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void AnimationBehavior::PutAccumulate ( enum MsoAnimAccumulate Accumulate ) {
    HRESULT _hr = put_Accumulate(Accumulate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum MsoAnimType AnimationBehavior::GetType ( ) {
    enum MsoAnimType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void AnimationBehavior::PutType ( enum MsoAnimType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline MotionEffectPtr AnimationBehavior::GetMotionEffect ( ) {
    struct MotionEffect * _result = 0;
    HRESULT _hr = get_MotionEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MotionEffectPtr(_result, false);
}

inline ColorEffectPtr AnimationBehavior::GetColorEffect ( ) {
    struct ColorEffect * _result = 0;
    HRESULT _hr = get_ColorEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorEffectPtr(_result, false);
}

inline ScaleEffectPtr AnimationBehavior::GetScaleEffect ( ) {
    struct ScaleEffect * _result = 0;
    HRESULT _hr = get_ScaleEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScaleEffectPtr(_result, false);
}

inline RotationEffectPtr AnimationBehavior::GetRotationEffect ( ) {
    struct RotationEffect * _result = 0;
    HRESULT _hr = get_RotationEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RotationEffectPtr(_result, false);
}

inline PropertyEffectPtr AnimationBehavior::GetPropertyEffect ( ) {
    struct PropertyEffect * _result = 0;
    HRESULT _hr = get_PropertyEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PropertyEffectPtr(_result, false);
}

inline TimingPtr AnimationBehavior::GetTiming ( ) {
    struct Timing * _result = 0;
    HRESULT _hr = get_Timing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimingPtr(_result, false);
}

inline HRESULT AnimationBehavior::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline CommandEffectPtr AnimationBehavior::GetCommandEffect ( ) {
    struct CommandEffect * _result = 0;
    HRESULT _hr = get_CommandEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandEffectPtr(_result, false);
}

inline FilterEffectPtr AnimationBehavior::GetFilterEffect ( ) {
    struct FilterEffect * _result = 0;
    HRESULT _hr = get_FilterEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FilterEffectPtr(_result, false);
}

inline SetEffectPtr AnimationBehavior::GetSetEffect ( ) {
    struct SetEffect * _result = 0;
    HRESULT _hr = get_SetEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SetEffectPtr(_result, false);
}

//
// interface AnimationBehaviors wrapper method implementations
//

inline _ApplicationPtr AnimationBehaviors::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr AnimationBehaviors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline AnimationBehaviorPtr AnimationBehaviors::Item ( int Index ) {
    struct AnimationBehavior * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationBehaviorPtr(_result, false);
}

inline AnimationBehaviorPtr AnimationBehaviors::Add ( enum MsoAnimType Type, int Index ) {
    struct AnimationBehavior * _result = 0;
    HRESULT _hr = raw_Add(Type, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationBehaviorPtr(_result, false);
}

//
// interface Effect wrapper method implementations
//

inline _ApplicationPtr Effect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Effect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ShapePtr Effect::GetShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline void Effect::PutShape ( struct Shape * Shape ) {
    HRESULT _hr = put_Shape(Shape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT Effect::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Effect::MoveBefore ( struct Effect * Effect ) {
    HRESULT _hr = raw_MoveBefore(Effect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Effect::MoveAfter ( struct Effect * Effect ) {
    HRESULT _hr = raw_MoveAfter(Effect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Effect::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline int Effect::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline TimingPtr Effect::GetTiming ( ) {
    struct Timing * _result = 0;
    HRESULT _hr = get_Timing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimingPtr(_result, false);
}

inline enum MsoAnimEffect Effect::GetEffectType ( ) {
    enum MsoAnimEffect _result;
    HRESULT _hr = get_EffectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Effect::PutEffectType ( enum MsoAnimEffect EffectType ) {
    HRESULT _hr = put_EffectType(EffectType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline EffectParametersPtr Effect::GetEffectParameters ( ) {
    struct EffectParameters * _result = 0;
    HRESULT _hr = get_EffectParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectParametersPtr(_result, false);
}

inline int Effect::GetTextRangeStart ( ) {
    int _result = 0;
    HRESULT _hr = get_TextRangeStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int Effect::GetTextRangeLength ( ) {
    int _result = 0;
    HRESULT _hr = get_TextRangeLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int Effect::GetParagraph ( ) {
    int _result = 0;
    HRESULT _hr = get_Paragraph(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Effect::PutParagraph ( int Paragraph ) {
    HRESULT _hr = put_Paragraph(Paragraph);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t Effect::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum Office::MsoTriState Effect::GetExit ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Exit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Effect::PutExit ( enum Office::MsoTriState Exit ) {
    HRESULT _hr = put_Exit(Exit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline AnimationBehaviorsPtr Effect::GetBehaviors ( ) {
    struct AnimationBehaviors * _result = 0;
    HRESULT _hr = get_Behaviors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationBehaviorsPtr(_result, false);
}

inline EffectInformationPtr Effect::GetEffectInformation ( ) {
    struct EffectInformation * _result = 0;
    HRESULT _hr = get_EffectInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectInformationPtr(_result, false);
}

//
// interface EApplication wrapper method implementations
//

inline HRESULT EApplication::WindowSelectionChange ( struct Selection * Sel ) {
    HRESULT _hr = raw_WindowSelectionChange(Sel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::WindowBeforeRightClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WindowBeforeRightClick(Sel, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::WindowBeforeDoubleClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WindowBeforeDoubleClick(Sel, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::PresentationClose ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationClose(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::PresentationSave ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationSave(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::PresentationOpen ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationOpen(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::NewPresentation ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_NewPresentation(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::PresentationNewSlide ( struct _Slide * Sld ) {
    HRESULT _hr = raw_PresentationNewSlide(Sld);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::WindowActivate ( struct _Presentation * Pres, struct DocumentWindow * Wn ) {
    HRESULT _hr = raw_WindowActivate(Pres, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::WindowDeactivate ( struct _Presentation * Pres, struct DocumentWindow * Wn ) {
    HRESULT _hr = raw_WindowDeactivate(Pres, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::SlideShowBegin ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowBegin(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::SlideShowNextBuild ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowNextBuild(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::SlideShowNextSlide ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowNextSlide(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::SlideShowEnd ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_SlideShowEnd(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::PresentationPrint ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationPrint(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::SlideSelectionChanged ( struct SlideRange * SldRange ) {
    HRESULT _hr = raw_SlideSelectionChanged(SldRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::ColorSchemeChanged ( struct SlideRange * SldRange ) {
    HRESULT _hr = raw_ColorSchemeChanged(SldRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::PresentationBeforeSave ( struct _Presentation * Pres, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_PresentationBeforeSave(Pres, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::SlideShowNextClick ( struct SlideShowWindow * Wn, struct Effect * nEffect ) {
    HRESULT _hr = raw_SlideShowNextClick(Wn, nEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::AfterNewPresentation ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_AfterNewPresentation(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::AfterPresentationOpen ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_AfterPresentationOpen(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::PresentationSync ( struct _Presentation * Pres, enum Office::MsoSyncEventType SyncEventType ) {
    HRESULT _hr = raw_PresentationSync(Pres, SyncEventType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::SlideShowOnNext ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowOnNext(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT EApplication::SlideShowOnPrevious ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowOnPrevious(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Sequence wrapper method implementations
//

inline _ApplicationPtr Sequence::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Sequence::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline EffectPtr Sequence::Item ( int Index ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

inline EffectPtr Sequence::AddEffect ( struct Shape * Shape, enum MsoAnimEffect effectId, enum MsoAnimateByLevel Level, enum MsoAnimTriggerType trigger, int Index ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_AddEffect(Shape, effectId, Level, trigger, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

inline EffectPtr Sequence::Clone ( struct Effect * Effect, int Index ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_Clone(Effect, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

inline EffectPtr Sequence::FindFirstAnimationFor ( struct Shape * Shape ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_FindFirstAnimationFor(Shape, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

inline EffectPtr Sequence::FindFirstAnimationForClick ( int click ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_FindFirstAnimationForClick(click, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

inline EffectPtr Sequence::ConvertToBuildLevel ( struct Effect * Effect, enum MsoAnimateByLevel Level ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToBuildLevel(Effect, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

inline EffectPtr Sequence::ConvertToAfterEffect ( struct Effect * Effect, enum MsoAnimAfterEffect After, Office::MsoRGBType DimColor, enum PpColorSchemeIndex DimSchemeColor ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToAfterEffect(Effect, After, DimColor, DimSchemeColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

inline EffectPtr Sequence::ConvertToAnimateBackground ( struct Effect * Effect, enum Office::MsoTriState AnimateBackground ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToAnimateBackground(Effect, AnimateBackground, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

inline EffectPtr Sequence::ConvertToAnimateInReverse ( struct Effect * Effect, enum Office::MsoTriState animateInReverse ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToAnimateInReverse(Effect, animateInReverse, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

inline EffectPtr Sequence::ConvertToTextUnitEffect ( struct Effect * Effect, enum MsoAnimTextUnitEffect unitEffect ) {
    struct Effect * _result = 0;
    HRESULT _hr = raw_ConvertToTextUnitEffect(Effect, unitEffect, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectPtr(_result, false);
}

//
// interface Sequences wrapper method implementations
//

inline _ApplicationPtr Sequences::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr Sequences::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline SequencePtr Sequences::Item ( int Index ) {
    struct Sequence * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SequencePtr(_result, false);
}

inline SequencePtr Sequences::Add ( int Index ) {
    struct Sequence * _result = 0;
    HRESULT _hr = raw_Add(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SequencePtr(_result, false);
}

//
// interface TimeLine wrapper method implementations
//

inline _ApplicationPtr TimeLine::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr TimeLine::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline SequencePtr TimeLine::GetMainSequence ( ) {
    struct Sequence * _result = 0;
    HRESULT _hr = get_MainSequence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SequencePtr(_result, false);
}

inline SequencesPtr TimeLine::GetInteractiveSequences ( ) {
    struct Sequences * _result = 0;
    HRESULT _hr = get_InteractiveSequences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SequencesPtr(_result, false);
}

//
// interface ShapeRange wrapper method implementations
//

inline IDispatchPtr ShapeRange::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long ShapeRange::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ShapeRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT ShapeRange::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapeRangePtr ShapeRange::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline HRESULT ShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline AdjustmentsPtr ShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

inline enum Office::MsoAutoShapeType ShapeRange::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoBlackWhiteMode ShapeRange::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CalloutFormatPtr ShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

inline int ShapeRange::GetConnectionSiteCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState ShapeRange::GetConnector ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ConnectorFormatPtr ShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

inline FillFormatPtr ShapeRange::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

inline GroupShapesPtr ShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

inline float ShapeRange::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShapeRange::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState ShapeRange::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float ShapeRange::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShapeRange::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline LineFormatPtr ShapeRange::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

inline enum Office::MsoTriState ShapeRange::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShapeRange::PutLockAspectRatio ( enum Office::MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ShapeRange::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ShapeRange::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapeNodesPtr ShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

inline float ShapeRange::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShapeRange::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline PictureFormatPtr ShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

inline ShadowFormatPtr ShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

inline TextEffectFormatPtr ShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

inline TextFramePtr ShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

inline ThreeDFormatPtr ShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

inline float ShapeRange::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShapeRange::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoShapeType ShapeRange::GetType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState ShapeRange::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t ShapeRange::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline enum Office::MsoTriState ShapeRange::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShapeRange::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float ShapeRange::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShapeRange::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int ShapeRange::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline OLEFormatPtr ShapeRange::GetOLEFormat ( ) {
    struct OLEFormat * _result = 0;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

inline LinkFormatPtr ShapeRange::GetLinkFormat ( ) {
    struct LinkFormat * _result = 0;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

inline PlaceholderFormatPtr ShapeRange::GetPlaceholderFormat ( ) {
    struct PlaceholderFormat * _result = 0;
    HRESULT _hr = get_PlaceholderFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaceholderFormatPtr(_result, false);
}

inline AnimationSettingsPtr ShapeRange::GetAnimationSettings ( ) {
    struct AnimationSettings * _result = 0;
    HRESULT _hr = get_AnimationSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationSettingsPtr(_result, false);
}

inline ActionSettingsPtr ShapeRange::GetActionSettings ( ) {
    struct ActionSettings * _result = 0;
    HRESULT _hr = get_ActionSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingsPtr(_result, false);
}

inline TagsPtr ShapeRange::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

inline HRESULT ShapeRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::Select ( enum Office::MsoTriState Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapeRangePtr ShapeRange::Duplicate ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline enum PpMediaType ShapeRange::GetMediaType ( ) {
    enum PpMediaType _result;
    HRESULT _hr = get_MediaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState ShapeRange::GetHasTextFrame ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SoundFormatPtr ShapeRange::GetSoundFormat ( ) {
    struct SoundFormat * _result = 0;
    HRESULT _hr = get_SoundFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundFormatPtr(_result, false);
}

inline ShapePtr ShapeRange::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline IUnknownPtr ShapeRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _variant_t ShapeRange::_Index ( int Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Index(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long ShapeRange::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr ShapeRange::Group ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr ShapeRange::Regroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Regroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline HRESULT ShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Align(AlignCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Distribute(DistributeCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::GetPolygonalRepresentation ( unsigned long maxPointsInBuffer, float * pPoints, unsigned long * numPointsInPolygon, enum Office::MsoTriState * IsOpen ) {
    HRESULT _hr = raw_GetPolygonalRepresentation(maxPointsInBuffer, pPoints, numPointsInPolygon, IsOpen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Office::ScriptPtr ShapeRange::GetScript ( ) {
    struct Office::Script * _result = 0;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptPtr(_result, false);
}

inline _bstr_t ShapeRange::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ShapeRange::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState ShapeRange::GetHasTable ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline TablePtr ShapeRange::GetTable ( ) {
    struct Table * _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

inline HRESULT ShapeRange::Export ( _bstr_t PathName, enum PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, enum PpExportMode ExportMode ) {
    HRESULT _hr = raw_Export(PathName, Filter, ScaleWidth, ScaleHeight, ExportMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoTriState ShapeRange::GetHasDiagram ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DiagramPtr ShapeRange::GetDiagram ( ) {
    struct Diagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramPtr(_result, false);
}

inline enum Office::MsoTriState ShapeRange::GetHasDiagramNode ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DiagramNodePtr ShapeRange::GetDiagramNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

inline enum Office::MsoTriState ShapeRange::GetChild ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr ShapeRange::GetParentGroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline CanvasShapesPtr ShapeRange::GetCanvasItems ( ) {
    struct CanvasShapes * _result = 0;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

inline int ShapeRange::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ShapeRange::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ShapeRange::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void ShapeRange::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline CustomerDataPtr ShapeRange::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

inline TextFrame2Ptr ShapeRange::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

inline enum Office::MsoTriState ShapeRange::GetHasChart ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoShapeStyleIndex ShapeRange::GetShapeStyle ( ) {
    enum Office::MsoShapeStyleIndex _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShapeRange::PutShapeStyle ( enum Office::MsoShapeStyleIndex ShapeStyle ) {
    HRESULT _hr = put_ShapeStyle(ShapeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoBackgroundStyleIndex ShapeRange::GetBackgroundStyle ( ) {
    enum Office::MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ShapeRange::PutBackgroundStyle ( enum Office::MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::SoftEdgeFormatPtr ShapeRange::GetSoftEdge ( ) {
    struct Office::SoftEdgeFormat * _result = 0;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SoftEdgeFormatPtr(_result, false);
}

inline Office::GlowFormatPtr ShapeRange::GetGlow ( ) {
    struct Office::GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::GlowFormatPtr(_result, false);
}

inline Office::ReflectionFormatPtr ShapeRange::GetReflection ( ) {
    struct Office::ReflectionFormat * _result = 0;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ReflectionFormatPtr(_result, false);
}

//
// interface GroupShapes wrapper method implementations
//

inline IDispatchPtr GroupShapes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long GroupShapes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr GroupShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline int GroupShapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr GroupShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline IUnknownPtr GroupShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline ShapeRangePtr GroupShapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

//
// interface CanvasShapes wrapper method implementations
//

inline IDispatchPtr CanvasShapes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long CanvasShapes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr CanvasShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline int CanvasShapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ShapePtr CanvasShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline IUnknownPtr CanvasShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline ShapePtr CanvasShapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr CanvasShapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr CanvasShapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr CanvasShapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr CanvasShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr CanvasShapes::AddPicture ( _bstr_t FileName, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr CanvasShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr CanvasShapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr CanvasShapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline ShapePtr CanvasShapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline FreeformBuilderPtr CanvasShapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

inline ShapeRangePtr CanvasShapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline HRESULT CanvasShapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ShapePtr CanvasShapes::GetBackground ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface CustomLayout wrapper method implementations
//

inline _ApplicationPtr CustomLayout::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr CustomLayout::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ShapesPtr CustomLayout::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

inline HeadersFootersPtr CustomLayout::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

inline ShapeRangePtr CustomLayout::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

inline _bstr_t CustomLayout::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void CustomLayout::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT CustomLayout::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float CustomLayout::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float CustomLayout::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HyperlinksPtr CustomLayout::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

inline DesignPtr CustomLayout::GetDesign ( ) {
    struct Design * _result = 0;
    HRESULT _hr = get_Design(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DesignPtr(_result, false);
}

inline TimeLinePtr CustomLayout::GetTimeLine ( ) {
    struct TimeLine * _result = 0;
    HRESULT _hr = get_TimeLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TimeLinePtr(_result, false);
}

inline SlideShowTransitionPtr CustomLayout::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

inline _bstr_t CustomLayout::GetMatchingName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MatchingName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void CustomLayout::PutMatchingName ( _bstr_t MatchingName ) {
    HRESULT _hr = put_MatchingName(MatchingName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState CustomLayout::GetPreserved ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Preserved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CustomLayout::PutPreserved ( enum Office::MsoTriState Preserved ) {
    HRESULT _hr = put_Preserved(Preserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int CustomLayout::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT CustomLayout::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT CustomLayout::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT CustomLayout::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline CustomLayoutPtr CustomLayout::Duplicate ( ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

inline HRESULT CustomLayout::MoveTo ( int toPos ) {
    HRESULT _hr = raw_MoveTo(toPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum Office::MsoTriState CustomLayout::GetDisplayMasterShapes ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayMasterShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CustomLayout::PutDisplayMasterShapes ( enum Office::MsoTriState DisplayMasterShapes ) {
    HRESULT _hr = put_DisplayMasterShapes(DisplayMasterShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState CustomLayout::GetFollowMasterBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FollowMasterBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void CustomLayout::PutFollowMasterBackground ( enum Office::MsoTriState FollowMasterBackground ) {
    HRESULT _hr = put_FollowMasterBackground(FollowMasterBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline Office::ThemeColorSchemePtr CustomLayout::GetThemeColorScheme ( ) {
    struct Office::ThemeColorScheme * _result = 0;
    HRESULT _hr = get_ThemeColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ThemeColorSchemePtr(_result, false);
}

inline CustomerDataPtr CustomLayout::GetCustomerData ( ) {
    struct CustomerData * _result = 0;
    HRESULT _hr = get_CustomerData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomerDataPtr(_result, false);
}

//
// interface CustomLayouts wrapper method implementations
//

inline _ApplicationPtr CustomLayouts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

inline IDispatchPtr CustomLayouts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline CustomLayoutPtr CustomLayouts::Item ( const _variant_t & Index ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

inline CustomLayoutPtr CustomLayouts::Add ( int Index ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = raw_Add(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

inline CustomLayoutPtr CustomLayouts::Paste ( int Index ) {
    struct CustomLayout * _result = 0;
    HRESULT _hr = raw_Paste(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLayoutPtr(_result, false);
}

//
// interface DiagramNode wrapper method implementations
//

inline IDispatchPtr DiagramNode::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long DiagramNode::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DiagramNodePtr DiagramNode::AddNode ( enum Office::MsoRelativeNodePosition Pos, enum Office::MsoDiagramNodeType NodeType ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_AddNode(Pos, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

inline HRESULT DiagramNode::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT DiagramNode::MoveNode ( struct DiagramNode * TargetNode, enum Office::MsoRelativeNodePosition Pos ) {
    HRESULT _hr = raw_MoveNode(TargetNode, Pos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT DiagramNode::ReplaceNode ( struct DiagramNode * TargetNode ) {
    HRESULT _hr = raw_ReplaceNode(TargetNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT DiagramNode::SwapNode ( struct DiagramNode * TargetNode, VARIANT_BOOL SwapChildren ) {
    HRESULT _hr = raw_SwapNode(TargetNode, SwapChildren);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline DiagramNodePtr DiagramNode::CloneNode ( VARIANT_BOOL CopyChildren, struct DiagramNode * TargetNode, enum Office::MsoRelativeNodePosition Pos ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_CloneNode(CopyChildren, TargetNode, Pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

inline HRESULT DiagramNode::TransferChildren ( struct DiagramNode * ReceivingNode ) {
    HRESULT _hr = raw_TransferChildren(ReceivingNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline DiagramNodePtr DiagramNode::NextNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_NextNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

inline DiagramNodePtr DiagramNode::PrevNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_PrevNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

inline IDispatchPtr DiagramNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline DiagramNodeChildrenPtr DiagramNode::GetChildren ( ) {
    struct DiagramNodeChildren * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodeChildrenPtr(_result, false);
}

inline ShapePtr DiagramNode::GetShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

inline DiagramNodePtr DiagramNode::GetRoot ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

inline DiagramPtr DiagramNode::GetDiagram ( ) {
    struct Diagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramPtr(_result, false);
}

inline enum Office::MsoOrgChartLayoutType DiagramNode::GetLayout ( ) {
    enum Office::MsoOrgChartLayoutType _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void DiagramNode::PutLayout ( enum Office::MsoOrgChartLayoutType Type ) {
    HRESULT _hr = put_Layout(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ShapePtr DiagramNode::GetTextShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_TextShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface DiagramNodeChildren wrapper method implementations
//

inline IDispatchPtr DiagramNodeChildren::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long DiagramNodeChildren::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr DiagramNodeChildren::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline DiagramNodePtr DiagramNodeChildren::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

inline DiagramNodePtr DiagramNodeChildren::AddNode ( const _variant_t & Index, enum Office::MsoDiagramNodeType NodeType ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_AddNode(Index, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

inline HRESULT DiagramNodeChildren::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr DiagramNodeChildren::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline int DiagramNodeChildren::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DiagramNodePtr DiagramNodeChildren::GetFirstChild ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_FirstChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

inline DiagramNodePtr DiagramNodeChildren::GetLastChild ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_LastChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

//
// interface DiagramNodes wrapper method implementations
//

inline IDispatchPtr DiagramNodes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long DiagramNodes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr DiagramNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline DiagramNodePtr DiagramNodes::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

inline HRESULT DiagramNodes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr DiagramNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline int DiagramNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Diagram wrapper method implementations
//

inline IDispatchPtr Diagram::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long Diagram::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr Diagram::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline DiagramNodesPtr Diagram::GetNodes ( ) {
    struct DiagramNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodesPtr(_result, false);
}

inline enum Office::MsoDiagramType Diagram::GetType ( ) {
    enum Office::MsoDiagramType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum Office::MsoTriState Diagram::GetAutoLayout ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Diagram::PutAutoLayout ( enum Office::MsoTriState AutoLayout ) {
    HRESULT _hr = put_AutoLayout(AutoLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState Diagram::GetReverse ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Reverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Diagram::PutReverse ( enum Office::MsoTriState Reverse ) {
    HRESULT _hr = put_Reverse(Reverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum Office::MsoTriState Diagram::GetAutoFormat ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Diagram::PutAutoFormat ( enum Office::MsoTriState AutoFormat ) {
    HRESULT _hr = put_AutoFormat(AutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT Diagram::Convert ( enum Office::MsoDiagramType Type ) {
    HRESULT _hr = raw_Convert(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Diagram::FitText ( ) {
    HRESULT _hr = raw_FitText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
